// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dotProduct_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_Vec3_float_x_AWVALID,
        m_axi_Vec3_float_x_AWREADY,
        m_axi_Vec3_float_x_AWADDR,
        m_axi_Vec3_float_x_AWID,
        m_axi_Vec3_float_x_AWLEN,
        m_axi_Vec3_float_x_AWSIZE,
        m_axi_Vec3_float_x_AWBURST,
        m_axi_Vec3_float_x_AWLOCK,
        m_axi_Vec3_float_x_AWCACHE,
        m_axi_Vec3_float_x_AWPROT,
        m_axi_Vec3_float_x_AWQOS,
        m_axi_Vec3_float_x_AWREGION,
        m_axi_Vec3_float_x_AWUSER,
        m_axi_Vec3_float_x_WVALID,
        m_axi_Vec3_float_x_WREADY,
        m_axi_Vec3_float_x_WDATA,
        m_axi_Vec3_float_x_WSTRB,
        m_axi_Vec3_float_x_WLAST,
        m_axi_Vec3_float_x_WID,
        m_axi_Vec3_float_x_WUSER,
        m_axi_Vec3_float_x_ARVALID,
        m_axi_Vec3_float_x_ARREADY,
        m_axi_Vec3_float_x_ARADDR,
        m_axi_Vec3_float_x_ARID,
        m_axi_Vec3_float_x_ARLEN,
        m_axi_Vec3_float_x_ARSIZE,
        m_axi_Vec3_float_x_ARBURST,
        m_axi_Vec3_float_x_ARLOCK,
        m_axi_Vec3_float_x_ARCACHE,
        m_axi_Vec3_float_x_ARPROT,
        m_axi_Vec3_float_x_ARQOS,
        m_axi_Vec3_float_x_ARREGION,
        m_axi_Vec3_float_x_ARUSER,
        m_axi_Vec3_float_x_RVALID,
        m_axi_Vec3_float_x_RREADY,
        m_axi_Vec3_float_x_RDATA,
        m_axi_Vec3_float_x_RLAST,
        m_axi_Vec3_float_x_RID,
        m_axi_Vec3_float_x_RUSER,
        m_axi_Vec3_float_x_RRESP,
        m_axi_Vec3_float_x_BVALID,
        m_axi_Vec3_float_x_BREADY,
        m_axi_Vec3_float_x_BRESP,
        m_axi_Vec3_float_x_BID,
        m_axi_Vec3_float_x_BUSER,
        Vec3_float_x_offset,
        Vec3_float_y_offset,
        Vec3_float_z_offset,
        v_x_read,
        v_y_read,
        v_z_read,
        ap_return
);

parameter    ap_ST_fsm_state1 = 23'd1;
parameter    ap_ST_fsm_state2 = 23'd2;
parameter    ap_ST_fsm_state3 = 23'd4;
parameter    ap_ST_fsm_state4 = 23'd8;
parameter    ap_ST_fsm_state5 = 23'd16;
parameter    ap_ST_fsm_state6 = 23'd32;
parameter    ap_ST_fsm_state7 = 23'd64;
parameter    ap_ST_fsm_state8 = 23'd128;
parameter    ap_ST_fsm_state9 = 23'd256;
parameter    ap_ST_fsm_state10 = 23'd512;
parameter    ap_ST_fsm_state11 = 23'd1024;
parameter    ap_ST_fsm_state12 = 23'd2048;
parameter    ap_ST_fsm_state13 = 23'd4096;
parameter    ap_ST_fsm_state14 = 23'd8192;
parameter    ap_ST_fsm_state15 = 23'd16384;
parameter    ap_ST_fsm_state16 = 23'd32768;
parameter    ap_ST_fsm_state17 = 23'd65536;
parameter    ap_ST_fsm_state18 = 23'd131072;
parameter    ap_ST_fsm_state19 = 23'd262144;
parameter    ap_ST_fsm_state20 = 23'd524288;
parameter    ap_ST_fsm_state21 = 23'd1048576;
parameter    ap_ST_fsm_state22 = 23'd2097152;
parameter    ap_ST_fsm_state23 = 23'd4194304;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_Vec3_float_x_AWVALID;
input   m_axi_Vec3_float_x_AWREADY;
output  [31:0] m_axi_Vec3_float_x_AWADDR;
output  [0:0] m_axi_Vec3_float_x_AWID;
output  [31:0] m_axi_Vec3_float_x_AWLEN;
output  [2:0] m_axi_Vec3_float_x_AWSIZE;
output  [1:0] m_axi_Vec3_float_x_AWBURST;
output  [1:0] m_axi_Vec3_float_x_AWLOCK;
output  [3:0] m_axi_Vec3_float_x_AWCACHE;
output  [2:0] m_axi_Vec3_float_x_AWPROT;
output  [3:0] m_axi_Vec3_float_x_AWQOS;
output  [3:0] m_axi_Vec3_float_x_AWREGION;
output  [0:0] m_axi_Vec3_float_x_AWUSER;
output   m_axi_Vec3_float_x_WVALID;
input   m_axi_Vec3_float_x_WREADY;
output  [31:0] m_axi_Vec3_float_x_WDATA;
output  [3:0] m_axi_Vec3_float_x_WSTRB;
output   m_axi_Vec3_float_x_WLAST;
output  [0:0] m_axi_Vec3_float_x_WID;
output  [0:0] m_axi_Vec3_float_x_WUSER;
output   m_axi_Vec3_float_x_ARVALID;
input   m_axi_Vec3_float_x_ARREADY;
output  [31:0] m_axi_Vec3_float_x_ARADDR;
output  [0:0] m_axi_Vec3_float_x_ARID;
output  [31:0] m_axi_Vec3_float_x_ARLEN;
output  [2:0] m_axi_Vec3_float_x_ARSIZE;
output  [1:0] m_axi_Vec3_float_x_ARBURST;
output  [1:0] m_axi_Vec3_float_x_ARLOCK;
output  [3:0] m_axi_Vec3_float_x_ARCACHE;
output  [2:0] m_axi_Vec3_float_x_ARPROT;
output  [3:0] m_axi_Vec3_float_x_ARQOS;
output  [3:0] m_axi_Vec3_float_x_ARREGION;
output  [0:0] m_axi_Vec3_float_x_ARUSER;
input   m_axi_Vec3_float_x_RVALID;
output   m_axi_Vec3_float_x_RREADY;
input  [31:0] m_axi_Vec3_float_x_RDATA;
input   m_axi_Vec3_float_x_RLAST;
input  [0:0] m_axi_Vec3_float_x_RID;
input  [0:0] m_axi_Vec3_float_x_RUSER;
input  [1:0] m_axi_Vec3_float_x_RRESP;
input   m_axi_Vec3_float_x_BVALID;
output   m_axi_Vec3_float_x_BREADY;
input  [1:0] m_axi_Vec3_float_x_BRESP;
input  [0:0] m_axi_Vec3_float_x_BID;
input  [0:0] m_axi_Vec3_float_x_BUSER;
input  [29:0] Vec3_float_x_offset;
input  [29:0] Vec3_float_y_offset;
input  [29:0] Vec3_float_z_offset;
input  [31:0] v_x_read;
input  [31:0] v_y_read;
input  [31:0] v_z_read;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_Vec3_float_x_ARVALID;
reg[31:0] m_axi_Vec3_float_x_ARADDR;
reg m_axi_Vec3_float_x_RREADY;
reg[31:0] ap_return;

(* fsm_encoding = "none" *) reg   [22:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    Vec3_float_x_blk_n_AR;
wire    ap_CS_fsm_state7;
reg    Vec3_float_x_blk_n_R;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state8;
wire   [31:0] grp_fu_116_p2;
reg   [31:0] reg_127;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state18;
reg   [31:0] Vec3_x_addr_9_read_reg_184;
reg   [31:0] Vec3_x_addr_8_read_reg_189;
wire    ap_CS_fsm_state10;
wire   [31:0] grp_fu_121_p2;
reg   [31:0] tmp_s_reg_204;
reg   [31:0] Vec3_x_addr_read_reg_209;
wire    ap_CS_fsm_state15;
wire   [31:0] grp_fu_112_p2;
reg   [31:0] tmp_11_reg_219;
wire   [63:0] zext_ln95_2_fu_133_p1;
wire   [63:0] zext_ln95_1_fu_144_p1;
wire   [63:0] zext_ln95_fu_155_p1;
reg   [31:0] grp_fu_112_p0;
reg   [31:0] grp_fu_112_p1;
wire    ap_CS_fsm_state19;
reg   [31:0] grp_fu_116_p0;
reg   [31:0] grp_fu_116_p1;
reg    grp_fu_112_ce;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
reg   [31:0] ap_return_preg;
reg   [22:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 23'd1;
#0 ap_return_preg = 32'd0;
end

rayTI_fadd_32ns_3dEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
rayTI_fadd_32ns_3dEe_U36(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_112_p0),
    .din1(grp_fu_112_p1),
    .ce(grp_fu_112_ce),
    .dout(grp_fu_112_p2)
);

rayTI_fmul_32ns_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
rayTI_fmul_32ns_3cud_U37(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_116_p0),
    .din1(grp_fu_116_p1),
    .ce(1'b1),
    .dout(grp_fu_116_p2)
);

rayTI_fmul_32ns_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
rayTI_fmul_32ns_3cud_U38(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(Vec3_x_addr_8_read_reg_189),
    .din1(v_y_read),
    .ce(1'b1),
    .dout(grp_fu_121_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state23)) begin
            ap_return_preg <= grp_fu_112_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_Vec3_float_x_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        Vec3_x_addr_8_read_reg_189 <= m_axi_Vec3_float_x_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_Vec3_float_x_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        Vec3_x_addr_9_read_reg_184 <= m_axi_Vec3_float_x_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_Vec3_float_x_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
        Vec3_x_addr_read_reg_209 <= m_axi_Vec3_float_x_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state13))) begin
        reg_127 <= grp_fu_116_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        tmp_11_reg_219 <= grp_fu_112_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        tmp_s_reg_204 <= grp_fu_121_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state7) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        Vec3_float_x_blk_n_AR = m_axi_Vec3_float_x_ARREADY;
    end else begin
        Vec3_float_x_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state14))) begin
        Vec3_float_x_blk_n_R = m_axi_Vec3_float_x_RVALID;
    end else begin
        Vec3_float_x_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        ap_return = grp_fu_112_p2;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state18) | ((m_axi_Vec3_float_x_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state14)))) begin
        grp_fu_112_ce = 1'b1;
    end else begin
        grp_fu_112_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_112_p0 = tmp_11_reg_219;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_112_p0 = reg_127;
    end else begin
        grp_fu_112_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_112_p1 = reg_127;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_112_p1 = tmp_s_reg_204;
    end else begin
        grp_fu_112_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_116_p0 = Vec3_x_addr_read_reg_209;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_116_p0 = Vec3_x_addr_9_read_reg_184;
    end else begin
        grp_fu_116_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_116_p1 = v_z_read;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_116_p1 = v_x_read;
    end else begin
        grp_fu_116_p1 = 'bx;
    end
end

always @ (*) begin
    if (((m_axi_Vec3_float_x_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        m_axi_Vec3_float_x_ARADDR = zext_ln95_fu_155_p1;
    end else if (((m_axi_Vec3_float_x_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_Vec3_float_x_ARADDR = zext_ln95_1_fu_144_p1;
    end else if ((~((m_axi_Vec3_float_x_ARREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_Vec3_float_x_ARADDR = zext_ln95_2_fu_133_p1;
    end else begin
        m_axi_Vec3_float_x_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((~((m_axi_Vec3_float_x_ARREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((m_axi_Vec3_float_x_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((m_axi_Vec3_float_x_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state7)))) begin
        m_axi_Vec3_float_x_ARVALID = 1'b1;
    end else begin
        m_axi_Vec3_float_x_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((m_axi_Vec3_float_x_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((m_axi_Vec3_float_x_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((m_axi_Vec3_float_x_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state14)))) begin
        m_axi_Vec3_float_x_RREADY = 1'b1;
    end else begin
        m_axi_Vec3_float_x_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((m_axi_Vec3_float_x_ARREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((m_axi_Vec3_float_x_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((m_axi_Vec3_float_x_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((m_axi_Vec3_float_x_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((m_axi_Vec3_float_x_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((m_axi_Vec3_float_x_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign m_axi_Vec3_float_x_ARBURST = 2'd0;

assign m_axi_Vec3_float_x_ARCACHE = 4'd0;

assign m_axi_Vec3_float_x_ARID = 1'd0;

assign m_axi_Vec3_float_x_ARLEN = 32'd1;

assign m_axi_Vec3_float_x_ARLOCK = 2'd0;

assign m_axi_Vec3_float_x_ARPROT = 3'd0;

assign m_axi_Vec3_float_x_ARQOS = 4'd0;

assign m_axi_Vec3_float_x_ARREGION = 4'd0;

assign m_axi_Vec3_float_x_ARSIZE = 3'd0;

assign m_axi_Vec3_float_x_ARUSER = 1'd0;

assign m_axi_Vec3_float_x_AWADDR = 32'd0;

assign m_axi_Vec3_float_x_AWBURST = 2'd0;

assign m_axi_Vec3_float_x_AWCACHE = 4'd0;

assign m_axi_Vec3_float_x_AWID = 1'd0;

assign m_axi_Vec3_float_x_AWLEN = 32'd0;

assign m_axi_Vec3_float_x_AWLOCK = 2'd0;

assign m_axi_Vec3_float_x_AWPROT = 3'd0;

assign m_axi_Vec3_float_x_AWQOS = 4'd0;

assign m_axi_Vec3_float_x_AWREGION = 4'd0;

assign m_axi_Vec3_float_x_AWSIZE = 3'd0;

assign m_axi_Vec3_float_x_AWUSER = 1'd0;

assign m_axi_Vec3_float_x_AWVALID = 1'b0;

assign m_axi_Vec3_float_x_BREADY = 1'b0;

assign m_axi_Vec3_float_x_WDATA = 32'd0;

assign m_axi_Vec3_float_x_WID = 1'd0;

assign m_axi_Vec3_float_x_WLAST = 1'b0;

assign m_axi_Vec3_float_x_WSTRB = 4'd0;

assign m_axi_Vec3_float_x_WUSER = 1'd0;

assign m_axi_Vec3_float_x_WVALID = 1'b0;

assign zext_ln95_1_fu_144_p1 = Vec3_float_y_offset;

assign zext_ln95_2_fu_133_p1 = Vec3_float_x_offset;

assign zext_ln95_fu_155_p1 = Vec3_float_z_offset;

endmodule //dotProduct_2
