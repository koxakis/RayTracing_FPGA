-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity rayTI is
generic (
    C_M_AXI_RAY_BUNDLE_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_RAY_BUNDLE_ID_WIDTH : INTEGER := 1;
    C_M_AXI_RAY_BUNDLE_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_RAY_BUNDLE_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_RAY_BUNDLE_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_RAY_BUNDLE_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_RAY_BUNDLE_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_RAY_BUNDLE_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_TRIANGLE_BUNDLE_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_TRIANGLE_BUNDLE_ID_WIDTH : INTEGER := 1;
    C_M_AXI_TRIANGLE_BUNDLE_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_TRIANGLE_BUNDLE_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_TRIANGLE_BUNDLE_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_TRIANGLE_BUNDLE_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_TRIANGLE_BUNDLE_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_TRIANGLE_BUNDLE_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_RES_BUNDLE_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_RES_BUNDLE_ID_WIDTH : INTEGER := 1;
    C_M_AXI_RES_BUNDLE_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_RES_BUNDLE_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_RES_BUNDLE_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_RES_BUNDLE_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_RES_BUNDLE_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_RES_BUNDLE_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_RET_BUNDLE_ADDR_WIDTH : INTEGER := 8;
    C_S_AXI_RET_BUNDLE_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_RAY_BUNDLE_USER_VALUE : INTEGER := 0;
    C_M_AXI_RAY_BUNDLE_PROT_VALUE : INTEGER := 0;
    C_M_AXI_RAY_BUNDLE_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_TRIANGLE_BUNDLE_USER_VALUE : INTEGER := 0;
    C_M_AXI_TRIANGLE_BUNDLE_PROT_VALUE : INTEGER := 0;
    C_M_AXI_TRIANGLE_BUNDLE_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_RES_BUNDLE_USER_VALUE : INTEGER := 0;
    C_M_AXI_RES_BUNDLE_PROT_VALUE : INTEGER := 0;
    C_M_AXI_RES_BUNDLE_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_ray_bundle_AWVALID : OUT STD_LOGIC;
    m_axi_ray_bundle_AWREADY : IN STD_LOGIC;
    m_axi_ray_bundle_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_RAY_BUNDLE_ADDR_WIDTH-1 downto 0);
    m_axi_ray_bundle_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_RAY_BUNDLE_ID_WIDTH-1 downto 0);
    m_axi_ray_bundle_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_ray_bundle_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ray_bundle_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ray_bundle_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ray_bundle_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ray_bundle_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ray_bundle_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ray_bundle_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ray_bundle_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_RAY_BUNDLE_AWUSER_WIDTH-1 downto 0);
    m_axi_ray_bundle_WVALID : OUT STD_LOGIC;
    m_axi_ray_bundle_WREADY : IN STD_LOGIC;
    m_axi_ray_bundle_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_RAY_BUNDLE_DATA_WIDTH-1 downto 0);
    m_axi_ray_bundle_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_RAY_BUNDLE_DATA_WIDTH/8-1 downto 0);
    m_axi_ray_bundle_WLAST : OUT STD_LOGIC;
    m_axi_ray_bundle_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_RAY_BUNDLE_ID_WIDTH-1 downto 0);
    m_axi_ray_bundle_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_RAY_BUNDLE_WUSER_WIDTH-1 downto 0);
    m_axi_ray_bundle_ARVALID : OUT STD_LOGIC;
    m_axi_ray_bundle_ARREADY : IN STD_LOGIC;
    m_axi_ray_bundle_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_RAY_BUNDLE_ADDR_WIDTH-1 downto 0);
    m_axi_ray_bundle_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_RAY_BUNDLE_ID_WIDTH-1 downto 0);
    m_axi_ray_bundle_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_ray_bundle_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ray_bundle_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ray_bundle_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ray_bundle_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ray_bundle_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ray_bundle_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ray_bundle_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ray_bundle_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_RAY_BUNDLE_ARUSER_WIDTH-1 downto 0);
    m_axi_ray_bundle_RVALID : IN STD_LOGIC;
    m_axi_ray_bundle_RREADY : OUT STD_LOGIC;
    m_axi_ray_bundle_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_RAY_BUNDLE_DATA_WIDTH-1 downto 0);
    m_axi_ray_bundle_RLAST : IN STD_LOGIC;
    m_axi_ray_bundle_RID : IN STD_LOGIC_VECTOR (C_M_AXI_RAY_BUNDLE_ID_WIDTH-1 downto 0);
    m_axi_ray_bundle_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RAY_BUNDLE_RUSER_WIDTH-1 downto 0);
    m_axi_ray_bundle_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ray_bundle_BVALID : IN STD_LOGIC;
    m_axi_ray_bundle_BREADY : OUT STD_LOGIC;
    m_axi_ray_bundle_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ray_bundle_BID : IN STD_LOGIC_VECTOR (C_M_AXI_RAY_BUNDLE_ID_WIDTH-1 downto 0);
    m_axi_ray_bundle_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RAY_BUNDLE_BUSER_WIDTH-1 downto 0);
    m_axi_triangle_bundle_AWVALID : OUT STD_LOGIC;
    m_axi_triangle_bundle_AWREADY : IN STD_LOGIC;
    m_axi_triangle_bundle_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_TRIANGLE_BUNDLE_ADDR_WIDTH-1 downto 0);
    m_axi_triangle_bundle_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_TRIANGLE_BUNDLE_ID_WIDTH-1 downto 0);
    m_axi_triangle_bundle_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_triangle_bundle_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_triangle_bundle_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_triangle_bundle_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_triangle_bundle_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_triangle_bundle_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_triangle_bundle_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_triangle_bundle_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_triangle_bundle_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_TRIANGLE_BUNDLE_AWUSER_WIDTH-1 downto 0);
    m_axi_triangle_bundle_WVALID : OUT STD_LOGIC;
    m_axi_triangle_bundle_WREADY : IN STD_LOGIC;
    m_axi_triangle_bundle_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_TRIANGLE_BUNDLE_DATA_WIDTH-1 downto 0);
    m_axi_triangle_bundle_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_TRIANGLE_BUNDLE_DATA_WIDTH/8-1 downto 0);
    m_axi_triangle_bundle_WLAST : OUT STD_LOGIC;
    m_axi_triangle_bundle_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_TRIANGLE_BUNDLE_ID_WIDTH-1 downto 0);
    m_axi_triangle_bundle_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_TRIANGLE_BUNDLE_WUSER_WIDTH-1 downto 0);
    m_axi_triangle_bundle_ARVALID : OUT STD_LOGIC;
    m_axi_triangle_bundle_ARREADY : IN STD_LOGIC;
    m_axi_triangle_bundle_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_TRIANGLE_BUNDLE_ADDR_WIDTH-1 downto 0);
    m_axi_triangle_bundle_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_TRIANGLE_BUNDLE_ID_WIDTH-1 downto 0);
    m_axi_triangle_bundle_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_triangle_bundle_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_triangle_bundle_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_triangle_bundle_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_triangle_bundle_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_triangle_bundle_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_triangle_bundle_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_triangle_bundle_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_triangle_bundle_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_TRIANGLE_BUNDLE_ARUSER_WIDTH-1 downto 0);
    m_axi_triangle_bundle_RVALID : IN STD_LOGIC;
    m_axi_triangle_bundle_RREADY : OUT STD_LOGIC;
    m_axi_triangle_bundle_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_TRIANGLE_BUNDLE_DATA_WIDTH-1 downto 0);
    m_axi_triangle_bundle_RLAST : IN STD_LOGIC;
    m_axi_triangle_bundle_RID : IN STD_LOGIC_VECTOR (C_M_AXI_TRIANGLE_BUNDLE_ID_WIDTH-1 downto 0);
    m_axi_triangle_bundle_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_TRIANGLE_BUNDLE_RUSER_WIDTH-1 downto 0);
    m_axi_triangle_bundle_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_triangle_bundle_BVALID : IN STD_LOGIC;
    m_axi_triangle_bundle_BREADY : OUT STD_LOGIC;
    m_axi_triangle_bundle_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_triangle_bundle_BID : IN STD_LOGIC_VECTOR (C_M_AXI_TRIANGLE_BUNDLE_ID_WIDTH-1 downto 0);
    m_axi_triangle_bundle_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_TRIANGLE_BUNDLE_BUSER_WIDTH-1 downto 0);
    m_axi_res_bundle_AWVALID : OUT STD_LOGIC;
    m_axi_res_bundle_AWREADY : IN STD_LOGIC;
    m_axi_res_bundle_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_RES_BUNDLE_ADDR_WIDTH-1 downto 0);
    m_axi_res_bundle_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_RES_BUNDLE_ID_WIDTH-1 downto 0);
    m_axi_res_bundle_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_res_bundle_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_res_bundle_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_res_bundle_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_res_bundle_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_res_bundle_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_res_bundle_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_res_bundle_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_res_bundle_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_RES_BUNDLE_AWUSER_WIDTH-1 downto 0);
    m_axi_res_bundle_WVALID : OUT STD_LOGIC;
    m_axi_res_bundle_WREADY : IN STD_LOGIC;
    m_axi_res_bundle_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_RES_BUNDLE_DATA_WIDTH-1 downto 0);
    m_axi_res_bundle_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_RES_BUNDLE_DATA_WIDTH/8-1 downto 0);
    m_axi_res_bundle_WLAST : OUT STD_LOGIC;
    m_axi_res_bundle_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_RES_BUNDLE_ID_WIDTH-1 downto 0);
    m_axi_res_bundle_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_RES_BUNDLE_WUSER_WIDTH-1 downto 0);
    m_axi_res_bundle_ARVALID : OUT STD_LOGIC;
    m_axi_res_bundle_ARREADY : IN STD_LOGIC;
    m_axi_res_bundle_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_RES_BUNDLE_ADDR_WIDTH-1 downto 0);
    m_axi_res_bundle_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_RES_BUNDLE_ID_WIDTH-1 downto 0);
    m_axi_res_bundle_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_res_bundle_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_res_bundle_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_res_bundle_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_res_bundle_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_res_bundle_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_res_bundle_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_res_bundle_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_res_bundle_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_RES_BUNDLE_ARUSER_WIDTH-1 downto 0);
    m_axi_res_bundle_RVALID : IN STD_LOGIC;
    m_axi_res_bundle_RREADY : OUT STD_LOGIC;
    m_axi_res_bundle_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_RES_BUNDLE_DATA_WIDTH-1 downto 0);
    m_axi_res_bundle_RLAST : IN STD_LOGIC;
    m_axi_res_bundle_RID : IN STD_LOGIC_VECTOR (C_M_AXI_RES_BUNDLE_ID_WIDTH-1 downto 0);
    m_axi_res_bundle_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RES_BUNDLE_RUSER_WIDTH-1 downto 0);
    m_axi_res_bundle_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_res_bundle_BVALID : IN STD_LOGIC;
    m_axi_res_bundle_BREADY : OUT STD_LOGIC;
    m_axi_res_bundle_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_res_bundle_BID : IN STD_LOGIC_VECTOR (C_M_AXI_RES_BUNDLE_ID_WIDTH-1 downto 0);
    m_axi_res_bundle_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RES_BUNDLE_BUSER_WIDTH-1 downto 0);
    s_axi_ret_bundle_AWVALID : IN STD_LOGIC;
    s_axi_ret_bundle_AWREADY : OUT STD_LOGIC;
    s_axi_ret_bundle_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_RET_BUNDLE_ADDR_WIDTH-1 downto 0);
    s_axi_ret_bundle_WVALID : IN STD_LOGIC;
    s_axi_ret_bundle_WREADY : OUT STD_LOGIC;
    s_axi_ret_bundle_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_RET_BUNDLE_DATA_WIDTH-1 downto 0);
    s_axi_ret_bundle_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_RET_BUNDLE_DATA_WIDTH/8-1 downto 0);
    s_axi_ret_bundle_ARVALID : IN STD_LOGIC;
    s_axi_ret_bundle_ARREADY : OUT STD_LOGIC;
    s_axi_ret_bundle_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_RET_BUNDLE_ADDR_WIDTH-1 downto 0);
    s_axi_ret_bundle_RVALID : OUT STD_LOGIC;
    s_axi_ret_bundle_RREADY : IN STD_LOGIC;
    s_axi_ret_bundle_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_RET_BUNDLE_DATA_WIDTH-1 downto 0);
    s_axi_ret_bundle_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_ret_bundle_BVALID : OUT STD_LOGIC;
    s_axi_ret_bundle_BREADY : IN STD_LOGIC;
    s_axi_ret_bundle_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of rayTI is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "rayTI,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=133,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=60,HLS_SYN_FF=10115,HLS_SYN_LUT=15080,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (96 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (96 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (96 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (96 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (96 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (96 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (96 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (96 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (96 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (96 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_B22BCC77 : STD_LOGIC_VECTOR (31 downto 0) := "10110010001010111100110001110111";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_322BCC77 : STD_LOGIC_VECTOR (31 downto 0) := "00110010001010111100110001110111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal dir_pading : STD_LOGIC_VECTOR (31 downto 0);
    signal dir_x : STD_LOGIC_VECTOR (31 downto 0);
    signal dir_y : STD_LOGIC_VECTOR (31 downto 0);
    signal dir_z : STD_LOGIC_VECTOR (31 downto 0);
    signal orig_pading : STD_LOGIC_VECTOR (31 downto 0);
    signal orig_x : STD_LOGIC_VECTOR (31 downto 0);
    signal orig_y : STD_LOGIC_VECTOR (31 downto 0);
    signal orig_z : STD_LOGIC_VECTOR (31 downto 0);
    signal v0_pading : STD_LOGIC_VECTOR (31 downto 0);
    signal v0_x : STD_LOGIC_VECTOR (31 downto 0);
    signal v0_y : STD_LOGIC_VECTOR (31 downto 0);
    signal v0_z : STD_LOGIC_VECTOR (31 downto 0);
    signal v1_pading : STD_LOGIC_VECTOR (31 downto 0);
    signal v1_x : STD_LOGIC_VECTOR (31 downto 0);
    signal v1_y : STD_LOGIC_VECTOR (31 downto 0);
    signal v1_z : STD_LOGIC_VECTOR (31 downto 0);
    signal v2_pading : STD_LOGIC_VECTOR (31 downto 0);
    signal v2_x : STD_LOGIC_VECTOR (31 downto 0);
    signal v2_y : STD_LOGIC_VECTOR (31 downto 0);
    signal v2_z : STD_LOGIC_VECTOR (31 downto 0);
    signal t : STD_LOGIC_VECTOR (31 downto 0);
    signal u : STD_LOGIC_VECTOR (31 downto 0);
    signal v : STD_LOGIC_VECTOR (31 downto 0);
    signal res_bundle_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal res_bundle_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal res_bundle_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state91 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state91 : signal is "none";
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal ap_CS_fsm_state97 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state97 : signal is "none";
    signal and_ln42_reg_1174 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln53_reg_1204 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln60_reg_1240 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln60_1_reg_1254 : STD_LOGIC_VECTOR (0 downto 0);
    signal ray_bundle_AWREADY : STD_LOGIC;
    signal ray_bundle_WREADY : STD_LOGIC;
    signal ray_bundle_ARVALID : STD_LOGIC;
    signal ray_bundle_ARREADY : STD_LOGIC;
    signal ray_bundle_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal ray_bundle_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal ray_bundle_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal ray_bundle_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal ray_bundle_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal ray_bundle_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal ray_bundle_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal ray_bundle_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal ray_bundle_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal ray_bundle_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal ray_bundle_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ray_bundle_RVALID : STD_LOGIC;
    signal ray_bundle_RREADY : STD_LOGIC;
    signal ray_bundle_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal ray_bundle_RLAST : STD_LOGIC;
    signal ray_bundle_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal ray_bundle_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ray_bundle_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal ray_bundle_BVALID : STD_LOGIC;
    signal ray_bundle_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal ray_bundle_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal ray_bundle_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal triangle_bundle_AWREADY : STD_LOGIC;
    signal triangle_bundle_WREADY : STD_LOGIC;
    signal triangle_bundle_ARVALID : STD_LOGIC;
    signal triangle_bundle_ARREADY : STD_LOGIC;
    signal triangle_bundle_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal triangle_bundle_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal triangle_bundle_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal triangle_bundle_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal triangle_bundle_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal triangle_bundle_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal triangle_bundle_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal triangle_bundle_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal triangle_bundle_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal triangle_bundle_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal triangle_bundle_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal triangle_bundle_RVALID : STD_LOGIC;
    signal triangle_bundle_RREADY : STD_LOGIC;
    signal triangle_bundle_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal triangle_bundle_RLAST : STD_LOGIC;
    signal triangle_bundle_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal triangle_bundle_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal triangle_bundle_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal triangle_bundle_BVALID : STD_LOGIC;
    signal triangle_bundle_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal triangle_bundle_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal triangle_bundle_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal res_bundle_AWVALID : STD_LOGIC;
    signal res_bundle_AWREADY : STD_LOGIC;
    signal res_bundle_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal res_bundle_WVALID : STD_LOGIC;
    signal res_bundle_WREADY : STD_LOGIC;
    signal res_bundle_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal res_bundle_ARREADY : STD_LOGIC;
    signal res_bundle_RVALID : STD_LOGIC;
    signal res_bundle_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal res_bundle_RLAST : STD_LOGIC;
    signal res_bundle_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal res_bundle_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal res_bundle_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal res_bundle_BVALID : STD_LOGIC;
    signal res_bundle_BREADY : STD_LOGIC;
    signal res_bundle_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal res_bundle_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal res_bundle_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_397_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_451 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal grp_fu_401_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_461 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal grp_fu_385_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_466 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal reg_477 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal reg_483 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_405_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_491 : STD_LOGIC_VECTOR (31 downto 0);
    signal v1_reg_1000 : STD_LOGIC_VECTOR (29 downto 0);
    signal u1_reg_1005 : STD_LOGIC_VECTOR (29 downto 0);
    signal t1_reg_1010 : STD_LOGIC_VECTOR (29 downto 0);
    signal v2_z1_reg_1015 : STD_LOGIC_VECTOR (29 downto 0);
    signal v2_y1_reg_1020 : STD_LOGIC_VECTOR (29 downto 0);
    signal v2_x1_reg_1025 : STD_LOGIC_VECTOR (29 downto 0);
    signal v1_z1_reg_1030 : STD_LOGIC_VECTOR (29 downto 0);
    signal v1_y1_reg_1035 : STD_LOGIC_VECTOR (29 downto 0);
    signal v1_x1_reg_1040 : STD_LOGIC_VECTOR (29 downto 0);
    signal v0_z1_reg_1045 : STD_LOGIC_VECTOR (29 downto 0);
    signal v0_y1_reg_1052 : STD_LOGIC_VECTOR (29 downto 0);
    signal v0_x1_reg_1059 : STD_LOGIC_VECTOR (29 downto 0);
    signal orig_z1_reg_1066 : STD_LOGIC_VECTOR (29 downto 0);
    signal orig_y1_reg_1071 : STD_LOGIC_VECTOR (29 downto 0);
    signal orig_x1_reg_1076 : STD_LOGIC_VECTOR (29 downto 0);
    signal dir_z7_reg_1081 : STD_LOGIC_VECTOR (29 downto 0);
    signal dir_y5_reg_1088 : STD_LOGIC_VECTOR (29 downto 0);
    signal dir_x3_reg_1095 : STD_LOGIC_VECTOR (29 downto 0);
    signal v0v1_x_reg_1102 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_operator_1_fu_359_ap_ready : STD_LOGIC;
    signal grp_operator_1_fu_359_ap_done : STD_LOGIC;
    signal v0v1_y_reg_1109 : STD_LOGIC_VECTOR (31 downto 0);
    signal v0v1_z_reg_1116 : STD_LOGIC_VECTOR (31 downto 0);
    signal v0v2_x_reg_1123 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal v0v2_y_reg_1129 : STD_LOGIC_VECTOR (31 downto 0);
    signal v0v2_z_reg_1135 : STD_LOGIC_VECTOR (31 downto 0);
    signal pvec_x_reg_1141 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_crossProduct_1_fu_335_ap_ready : STD_LOGIC;
    signal grp_crossProduct_1_fu_335_ap_done : STD_LOGIC;
    signal pvec_y_reg_1146 : STD_LOGIC_VECTOR (31 downto 0);
    signal pvec_z_reg_1151 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_bundle_addr_reg_1156 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal res_bundle_addr_1_reg_1162 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_bundle_addr_2_reg_1168 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln42_fu_812_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tvec_x_reg_1178 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal grp_operator_sub_fu_371_ap_ready : STD_LOGIC;
    signal grp_operator_sub_fu_371_ap_done : STD_LOGIC;
    signal tvec_y_reg_1185 : STD_LOGIC_VECTOR (31 downto 0);
    signal tvec_z_reg_1192 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_421_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal invDet_reg_1199 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln53_fu_872_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_409_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_i_reg_1208 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_413_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_i_reg_1213 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_417_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_i_reg_1218 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_389_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal qvec_y_reg_1223 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_393_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal qvec_z_reg_1229 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dotProduct_2_fu_347_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_reg_1235 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal grp_dotProduct_2_fu_347_ap_ready : STD_LOGIC;
    signal grp_dotProduct_2_fu_347_ap_done : STD_LOGIC;
    signal and_ln60_fu_914_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln60_2_fu_938_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln60_2_reg_1244 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal icmp_ln60_3_fu_944_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln60_3_reg_1249 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln60_1_fu_954_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal icmp_ln65_fu_978_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_reg_1258 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_1_fu_984_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_1_reg_1263 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln65_fu_994_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln65_reg_1268 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal grp_crossProduct_1_fu_335_ap_start : STD_LOGIC;
    signal grp_crossProduct_1_fu_335_ap_idle : STD_LOGIC;
    signal grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_AWVALID : STD_LOGIC;
    signal grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_WVALID : STD_LOGIC;
    signal grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_WLAST : STD_LOGIC;
    signal grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARVALID : STD_LOGIC;
    signal grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_RREADY : STD_LOGIC;
    signal grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_BREADY : STD_LOGIC;
    signal grp_crossProduct_1_fu_335_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_crossProduct_1_fu_335_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_crossProduct_1_fu_335_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dotProduct_2_fu_347_ap_start : STD_LOGIC;
    signal grp_dotProduct_2_fu_347_ap_idle : STD_LOGIC;
    signal grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_AWVALID : STD_LOGIC;
    signal grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_WVALID : STD_LOGIC;
    signal grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_WLAST : STD_LOGIC;
    signal grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARVALID : STD_LOGIC;
    signal grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_RREADY : STD_LOGIC;
    signal grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_BREADY : STD_LOGIC;
    signal grp_operator_1_fu_359_ap_start : STD_LOGIC;
    signal grp_operator_1_fu_359_ap_idle : STD_LOGIC;
    signal grp_operator_1_fu_359_m_axi_Vec3_float_x_AWVALID : STD_LOGIC;
    signal grp_operator_1_fu_359_m_axi_Vec3_float_x_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_operator_1_fu_359_m_axi_Vec3_float_x_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_operator_1_fu_359_m_axi_Vec3_float_x_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_operator_1_fu_359_m_axi_Vec3_float_x_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_operator_1_fu_359_m_axi_Vec3_float_x_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_operator_1_fu_359_m_axi_Vec3_float_x_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_operator_1_fu_359_m_axi_Vec3_float_x_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_operator_1_fu_359_m_axi_Vec3_float_x_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_operator_1_fu_359_m_axi_Vec3_float_x_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_operator_1_fu_359_m_axi_Vec3_float_x_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_operator_1_fu_359_m_axi_Vec3_float_x_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_operator_1_fu_359_m_axi_Vec3_float_x_WVALID : STD_LOGIC;
    signal grp_operator_1_fu_359_m_axi_Vec3_float_x_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_operator_1_fu_359_m_axi_Vec3_float_x_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_operator_1_fu_359_m_axi_Vec3_float_x_WLAST : STD_LOGIC;
    signal grp_operator_1_fu_359_m_axi_Vec3_float_x_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_operator_1_fu_359_m_axi_Vec3_float_x_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_operator_1_fu_359_m_axi_Vec3_float_x_ARVALID : STD_LOGIC;
    signal grp_operator_1_fu_359_m_axi_Vec3_float_x_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_operator_1_fu_359_m_axi_Vec3_float_x_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_operator_1_fu_359_m_axi_Vec3_float_x_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_operator_1_fu_359_m_axi_Vec3_float_x_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_operator_1_fu_359_m_axi_Vec3_float_x_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_operator_1_fu_359_m_axi_Vec3_float_x_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_operator_1_fu_359_m_axi_Vec3_float_x_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_operator_1_fu_359_m_axi_Vec3_float_x_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_operator_1_fu_359_m_axi_Vec3_float_x_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_operator_1_fu_359_m_axi_Vec3_float_x_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_operator_1_fu_359_m_axi_Vec3_float_x_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_operator_1_fu_359_m_axi_Vec3_float_x_RREADY : STD_LOGIC;
    signal grp_operator_1_fu_359_m_axi_Vec3_float_x_BREADY : STD_LOGIC;
    signal grp_operator_1_fu_359_Vec3_float_x_offset : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_operator_1_fu_359_Vec3_float_y_offset : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_operator_1_fu_359_Vec3_float_z_offset : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_operator_1_fu_359_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_operator_1_fu_359_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_operator_1_fu_359_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_operator_sub_fu_371_ap_start : STD_LOGIC;
    signal grp_operator_sub_fu_371_ap_idle : STD_LOGIC;
    signal grp_operator_sub_fu_371_m_axi_Vec3_float_x_AWVALID : STD_LOGIC;
    signal grp_operator_sub_fu_371_m_axi_Vec3_float_x_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_operator_sub_fu_371_m_axi_Vec3_float_x_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_operator_sub_fu_371_m_axi_Vec3_float_x_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_operator_sub_fu_371_m_axi_Vec3_float_x_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_operator_sub_fu_371_m_axi_Vec3_float_x_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_operator_sub_fu_371_m_axi_Vec3_float_x_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_operator_sub_fu_371_m_axi_Vec3_float_x_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_operator_sub_fu_371_m_axi_Vec3_float_x_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_operator_sub_fu_371_m_axi_Vec3_float_x_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_operator_sub_fu_371_m_axi_Vec3_float_x_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_operator_sub_fu_371_m_axi_Vec3_float_x_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_operator_sub_fu_371_m_axi_Vec3_float_x_WVALID : STD_LOGIC;
    signal grp_operator_sub_fu_371_m_axi_Vec3_float_x_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_operator_sub_fu_371_m_axi_Vec3_float_x_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_operator_sub_fu_371_m_axi_Vec3_float_x_WLAST : STD_LOGIC;
    signal grp_operator_sub_fu_371_m_axi_Vec3_float_x_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_operator_sub_fu_371_m_axi_Vec3_float_x_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARVALID : STD_LOGIC;
    signal grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_operator_sub_fu_371_m_axi_Vec3_float_x_RREADY : STD_LOGIC;
    signal grp_operator_sub_fu_371_m_axi_Vec3_float_x_BREADY : STD_LOGIC;
    signal grp_operator_sub_fu_371_m_axi_v_x_AWVALID : STD_LOGIC;
    signal grp_operator_sub_fu_371_m_axi_v_x_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_operator_sub_fu_371_m_axi_v_x_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_operator_sub_fu_371_m_axi_v_x_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_operator_sub_fu_371_m_axi_v_x_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_operator_sub_fu_371_m_axi_v_x_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_operator_sub_fu_371_m_axi_v_x_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_operator_sub_fu_371_m_axi_v_x_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_operator_sub_fu_371_m_axi_v_x_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_operator_sub_fu_371_m_axi_v_x_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_operator_sub_fu_371_m_axi_v_x_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_operator_sub_fu_371_m_axi_v_x_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_operator_sub_fu_371_m_axi_v_x_WVALID : STD_LOGIC;
    signal grp_operator_sub_fu_371_m_axi_v_x_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_operator_sub_fu_371_m_axi_v_x_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_operator_sub_fu_371_m_axi_v_x_WLAST : STD_LOGIC;
    signal grp_operator_sub_fu_371_m_axi_v_x_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_operator_sub_fu_371_m_axi_v_x_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_operator_sub_fu_371_m_axi_v_x_ARVALID : STD_LOGIC;
    signal grp_operator_sub_fu_371_m_axi_v_x_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_operator_sub_fu_371_m_axi_v_x_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_operator_sub_fu_371_m_axi_v_x_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_operator_sub_fu_371_m_axi_v_x_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_operator_sub_fu_371_m_axi_v_x_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_operator_sub_fu_371_m_axi_v_x_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_operator_sub_fu_371_m_axi_v_x_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_operator_sub_fu_371_m_axi_v_x_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_operator_sub_fu_371_m_axi_v_x_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_operator_sub_fu_371_m_axi_v_x_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_operator_sub_fu_371_m_axi_v_x_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_operator_sub_fu_371_m_axi_v_x_RREADY : STD_LOGIC;
    signal grp_operator_sub_fu_371_m_axi_v_x_BREADY : STD_LOGIC;
    signal grp_operator_sub_fu_371_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_operator_sub_fu_371_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_operator_sub_fu_371_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_p_0_phi_fu_322_p8 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_0_reg_318 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op405_writeresp_state97 : BOOLEAN;
    signal ap_block_state97 : BOOLEAN;
    signal grp_crossProduct_1_fu_335_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_dotProduct_2_fu_347_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal grp_operator_1_fu_359_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_operator_sub_fu_371_ap_start_reg : STD_LOGIC := '0';
    signal empty_fu_689_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_4_fu_698_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_5_fu_707_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_385_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_385_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal grp_fu_397_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_397_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal grp_fu_401_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_401_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_405_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_405_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_426_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_426_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal grp_fu_431_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_431_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln42_fu_770_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_774_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln42_fu_784_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln42_1_fu_794_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_fu_788_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln42_fu_800_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln42_1_fu_806_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln53_fu_830_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_834_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln53_fu_844_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln53_1_fu_854_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln53_fu_848_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln53_fu_860_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln53_1_fu_866_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln60_fu_878_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_882_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln60_fu_892_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln60_1_fu_902_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln60_fu_896_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln60_fu_908_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln60_1_fu_920_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_924_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln60_1_fu_934_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln60_1_fu_950_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln65_fu_960_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_964_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln65_fu_974_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln65_fu_990_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_385_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_385_ce : STD_LOGIC;
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal grp_fu_397_ce : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal ap_CS_fsm_state90 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state90 : signal is "none";
    signal grp_fu_401_ce : STD_LOGIC;
    signal grp_fu_405_ce : STD_LOGIC;
    signal grp_fu_409_ce : STD_LOGIC;
    signal grp_fu_413_ce : STD_LOGIC;
    signal grp_fu_417_ce : STD_LOGIC;
    signal grp_fu_421_ce : STD_LOGIC;
    signal grp_fu_426_ce : STD_LOGIC;
    signal grp_fu_426_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_431_ce : STD_LOGIC;
    signal grp_fu_431_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (96 downto 0);
    signal ap_return : STD_LOGIC_VECTOR (0 downto 0);

    component crossProduct_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_Vec3_float_x_AWVALID : OUT STD_LOGIC;
        m_axi_Vec3_float_x_AWREADY : IN STD_LOGIC;
        m_axi_Vec3_float_x_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_Vec3_float_x_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Vec3_float_x_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_Vec3_float_x_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_Vec3_float_x_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_Vec3_float_x_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_Vec3_float_x_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_Vec3_float_x_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_Vec3_float_x_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_Vec3_float_x_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_Vec3_float_x_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Vec3_float_x_WVALID : OUT STD_LOGIC;
        m_axi_Vec3_float_x_WREADY : IN STD_LOGIC;
        m_axi_Vec3_float_x_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_Vec3_float_x_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_Vec3_float_x_WLAST : OUT STD_LOGIC;
        m_axi_Vec3_float_x_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Vec3_float_x_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Vec3_float_x_ARVALID : OUT STD_LOGIC;
        m_axi_Vec3_float_x_ARREADY : IN STD_LOGIC;
        m_axi_Vec3_float_x_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_Vec3_float_x_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Vec3_float_x_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_Vec3_float_x_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_Vec3_float_x_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_Vec3_float_x_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_Vec3_float_x_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_Vec3_float_x_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_Vec3_float_x_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_Vec3_float_x_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_Vec3_float_x_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Vec3_float_x_RVALID : IN STD_LOGIC;
        m_axi_Vec3_float_x_RREADY : OUT STD_LOGIC;
        m_axi_Vec3_float_x_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_Vec3_float_x_RLAST : IN STD_LOGIC;
        m_axi_Vec3_float_x_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Vec3_float_x_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Vec3_float_x_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_Vec3_float_x_BVALID : IN STD_LOGIC;
        m_axi_Vec3_float_x_BREADY : OUT STD_LOGIC;
        m_axi_Vec3_float_x_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_Vec3_float_x_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Vec3_float_x_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        Vec3_float_x_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        Vec3_float_y_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        Vec3_float_z_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        v_x_read : IN STD_LOGIC_VECTOR (31 downto 0);
        v_y_read : IN STD_LOGIC_VECTOR (31 downto 0);
        v_z_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dotProduct_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_Vec3_float_x_AWVALID : OUT STD_LOGIC;
        m_axi_Vec3_float_x_AWREADY : IN STD_LOGIC;
        m_axi_Vec3_float_x_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_Vec3_float_x_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Vec3_float_x_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_Vec3_float_x_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_Vec3_float_x_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_Vec3_float_x_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_Vec3_float_x_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_Vec3_float_x_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_Vec3_float_x_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_Vec3_float_x_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_Vec3_float_x_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Vec3_float_x_WVALID : OUT STD_LOGIC;
        m_axi_Vec3_float_x_WREADY : IN STD_LOGIC;
        m_axi_Vec3_float_x_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_Vec3_float_x_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_Vec3_float_x_WLAST : OUT STD_LOGIC;
        m_axi_Vec3_float_x_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Vec3_float_x_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Vec3_float_x_ARVALID : OUT STD_LOGIC;
        m_axi_Vec3_float_x_ARREADY : IN STD_LOGIC;
        m_axi_Vec3_float_x_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_Vec3_float_x_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Vec3_float_x_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_Vec3_float_x_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_Vec3_float_x_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_Vec3_float_x_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_Vec3_float_x_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_Vec3_float_x_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_Vec3_float_x_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_Vec3_float_x_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_Vec3_float_x_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Vec3_float_x_RVALID : IN STD_LOGIC;
        m_axi_Vec3_float_x_RREADY : OUT STD_LOGIC;
        m_axi_Vec3_float_x_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_Vec3_float_x_RLAST : IN STD_LOGIC;
        m_axi_Vec3_float_x_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Vec3_float_x_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Vec3_float_x_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_Vec3_float_x_BVALID : IN STD_LOGIC;
        m_axi_Vec3_float_x_BREADY : OUT STD_LOGIC;
        m_axi_Vec3_float_x_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_Vec3_float_x_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Vec3_float_x_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        Vec3_float_x_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        Vec3_float_y_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        Vec3_float_z_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        v_x_read : IN STD_LOGIC_VECTOR (31 downto 0);
        v_y_read : IN STD_LOGIC_VECTOR (31 downto 0);
        v_z_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component operator_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_Vec3_float_x_AWVALID : OUT STD_LOGIC;
        m_axi_Vec3_float_x_AWREADY : IN STD_LOGIC;
        m_axi_Vec3_float_x_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_Vec3_float_x_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Vec3_float_x_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_Vec3_float_x_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_Vec3_float_x_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_Vec3_float_x_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_Vec3_float_x_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_Vec3_float_x_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_Vec3_float_x_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_Vec3_float_x_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_Vec3_float_x_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Vec3_float_x_WVALID : OUT STD_LOGIC;
        m_axi_Vec3_float_x_WREADY : IN STD_LOGIC;
        m_axi_Vec3_float_x_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_Vec3_float_x_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_Vec3_float_x_WLAST : OUT STD_LOGIC;
        m_axi_Vec3_float_x_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Vec3_float_x_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Vec3_float_x_ARVALID : OUT STD_LOGIC;
        m_axi_Vec3_float_x_ARREADY : IN STD_LOGIC;
        m_axi_Vec3_float_x_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_Vec3_float_x_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Vec3_float_x_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_Vec3_float_x_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_Vec3_float_x_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_Vec3_float_x_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_Vec3_float_x_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_Vec3_float_x_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_Vec3_float_x_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_Vec3_float_x_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_Vec3_float_x_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Vec3_float_x_RVALID : IN STD_LOGIC;
        m_axi_Vec3_float_x_RREADY : OUT STD_LOGIC;
        m_axi_Vec3_float_x_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_Vec3_float_x_RLAST : IN STD_LOGIC;
        m_axi_Vec3_float_x_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Vec3_float_x_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Vec3_float_x_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_Vec3_float_x_BVALID : IN STD_LOGIC;
        m_axi_Vec3_float_x_BREADY : OUT STD_LOGIC;
        m_axi_Vec3_float_x_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_Vec3_float_x_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Vec3_float_x_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        Vec3_float_x_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        Vec3_float_y_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        Vec3_float_z_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        v_x_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        v_y_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        v_z_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component operator_sub IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_Vec3_float_x_AWVALID : OUT STD_LOGIC;
        m_axi_Vec3_float_x_AWREADY : IN STD_LOGIC;
        m_axi_Vec3_float_x_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_Vec3_float_x_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Vec3_float_x_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_Vec3_float_x_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_Vec3_float_x_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_Vec3_float_x_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_Vec3_float_x_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_Vec3_float_x_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_Vec3_float_x_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_Vec3_float_x_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_Vec3_float_x_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Vec3_float_x_WVALID : OUT STD_LOGIC;
        m_axi_Vec3_float_x_WREADY : IN STD_LOGIC;
        m_axi_Vec3_float_x_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_Vec3_float_x_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_Vec3_float_x_WLAST : OUT STD_LOGIC;
        m_axi_Vec3_float_x_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Vec3_float_x_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Vec3_float_x_ARVALID : OUT STD_LOGIC;
        m_axi_Vec3_float_x_ARREADY : IN STD_LOGIC;
        m_axi_Vec3_float_x_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_Vec3_float_x_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Vec3_float_x_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_Vec3_float_x_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_Vec3_float_x_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_Vec3_float_x_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_Vec3_float_x_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_Vec3_float_x_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_Vec3_float_x_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_Vec3_float_x_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_Vec3_float_x_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Vec3_float_x_RVALID : IN STD_LOGIC;
        m_axi_Vec3_float_x_RREADY : OUT STD_LOGIC;
        m_axi_Vec3_float_x_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_Vec3_float_x_RLAST : IN STD_LOGIC;
        m_axi_Vec3_float_x_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Vec3_float_x_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Vec3_float_x_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_Vec3_float_x_BVALID : IN STD_LOGIC;
        m_axi_Vec3_float_x_BREADY : OUT STD_LOGIC;
        m_axi_Vec3_float_x_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_Vec3_float_x_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Vec3_float_x_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        Vec3_float_x_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        Vec3_float_y_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        Vec3_float_z_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        m_axi_v_x_AWVALID : OUT STD_LOGIC;
        m_axi_v_x_AWREADY : IN STD_LOGIC;
        m_axi_v_x_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_v_x_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_v_x_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_v_x_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_v_x_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_v_x_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_v_x_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_v_x_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_v_x_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_v_x_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_v_x_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_v_x_WVALID : OUT STD_LOGIC;
        m_axi_v_x_WREADY : IN STD_LOGIC;
        m_axi_v_x_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_v_x_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_v_x_WLAST : OUT STD_LOGIC;
        m_axi_v_x_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_v_x_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_v_x_ARVALID : OUT STD_LOGIC;
        m_axi_v_x_ARREADY : IN STD_LOGIC;
        m_axi_v_x_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_v_x_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_v_x_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_v_x_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_v_x_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_v_x_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_v_x_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_v_x_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_v_x_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_v_x_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_v_x_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_v_x_RVALID : IN STD_LOGIC;
        m_axi_v_x_RREADY : OUT STD_LOGIC;
        m_axi_v_x_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_v_x_RLAST : IN STD_LOGIC;
        m_axi_v_x_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_v_x_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_v_x_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_v_x_BVALID : IN STD_LOGIC;
        m_axi_v_x_BREADY : OUT STD_LOGIC;
        m_axi_v_x_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_v_x_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_v_x_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        v_x_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        v_y_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        v_z_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component rayTI_faddfsub_32eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component rayTI_fsub_32ns_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component rayTI_fmul_32ns_3cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component rayTI_fdiv_32ns_3fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component rayTI_fcmp_32ns_3g8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component rayTI_ret_bundle_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (0 downto 0);
        dir_pading : OUT STD_LOGIC_VECTOR (31 downto 0);
        dir_x : OUT STD_LOGIC_VECTOR (31 downto 0);
        dir_y : OUT STD_LOGIC_VECTOR (31 downto 0);
        dir_z : OUT STD_LOGIC_VECTOR (31 downto 0);
        orig_pading : OUT STD_LOGIC_VECTOR (31 downto 0);
        orig_x : OUT STD_LOGIC_VECTOR (31 downto 0);
        orig_y : OUT STD_LOGIC_VECTOR (31 downto 0);
        orig_z : OUT STD_LOGIC_VECTOR (31 downto 0);
        v0_pading : OUT STD_LOGIC_VECTOR (31 downto 0);
        v0_x : OUT STD_LOGIC_VECTOR (31 downto 0);
        v0_y : OUT STD_LOGIC_VECTOR (31 downto 0);
        v0_z : OUT STD_LOGIC_VECTOR (31 downto 0);
        v1_pading : OUT STD_LOGIC_VECTOR (31 downto 0);
        v1_x : OUT STD_LOGIC_VECTOR (31 downto 0);
        v1_y : OUT STD_LOGIC_VECTOR (31 downto 0);
        v1_z : OUT STD_LOGIC_VECTOR (31 downto 0);
        v2_pading : OUT STD_LOGIC_VECTOR (31 downto 0);
        v2_x : OUT STD_LOGIC_VECTOR (31 downto 0);
        v2_y : OUT STD_LOGIC_VECTOR (31 downto 0);
        v2_z : OUT STD_LOGIC_VECTOR (31 downto 0);
        t : OUT STD_LOGIC_VECTOR (31 downto 0);
        u : OUT STD_LOGIC_VECTOR (31 downto 0);
        v : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component rayTI_ray_bundle_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component rayTI_triangle_bundle_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component rayTI_res_bundle_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    rayTI_ret_bundle_s_axi_U : component rayTI_ret_bundle_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_RET_BUNDLE_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_RET_BUNDLE_DATA_WIDTH)
    port map (
        AWVALID => s_axi_ret_bundle_AWVALID,
        AWREADY => s_axi_ret_bundle_AWREADY,
        AWADDR => s_axi_ret_bundle_AWADDR,
        WVALID => s_axi_ret_bundle_WVALID,
        WREADY => s_axi_ret_bundle_WREADY,
        WDATA => s_axi_ret_bundle_WDATA,
        WSTRB => s_axi_ret_bundle_WSTRB,
        ARVALID => s_axi_ret_bundle_ARVALID,
        ARREADY => s_axi_ret_bundle_ARREADY,
        ARADDR => s_axi_ret_bundle_ARADDR,
        RVALID => s_axi_ret_bundle_RVALID,
        RREADY => s_axi_ret_bundle_RREADY,
        RDATA => s_axi_ret_bundle_RDATA,
        RRESP => s_axi_ret_bundle_RRESP,
        BVALID => s_axi_ret_bundle_BVALID,
        BREADY => s_axi_ret_bundle_BREADY,
        BRESP => s_axi_ret_bundle_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_return => ap_phi_mux_p_0_phi_fu_322_p8,
        dir_pading => dir_pading,
        dir_x => dir_x,
        dir_y => dir_y,
        dir_z => dir_z,
        orig_pading => orig_pading,
        orig_x => orig_x,
        orig_y => orig_y,
        orig_z => orig_z,
        v0_pading => v0_pading,
        v0_x => v0_x,
        v0_y => v0_y,
        v0_z => v0_z,
        v1_pading => v1_pading,
        v1_x => v1_x,
        v1_y => v1_y,
        v1_z => v1_z,
        v2_pading => v2_pading,
        v2_x => v2_x,
        v2_y => v2_y,
        v2_z => v2_z,
        t => t,
        u => u,
        v => v);

    rayTI_ray_bundle_m_axi_U : component rayTI_ray_bundle_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_RAY_BUNDLE_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_RAY_BUNDLE_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_RAY_BUNDLE_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_RAY_BUNDLE_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_RAY_BUNDLE_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_RAY_BUNDLE_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_RAY_BUNDLE_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_RAY_BUNDLE_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_RAY_BUNDLE_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_RAY_BUNDLE_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_RAY_BUNDLE_CACHE_VALUE)
    port map (
        AWVALID => m_axi_ray_bundle_AWVALID,
        AWREADY => m_axi_ray_bundle_AWREADY,
        AWADDR => m_axi_ray_bundle_AWADDR,
        AWID => m_axi_ray_bundle_AWID,
        AWLEN => m_axi_ray_bundle_AWLEN,
        AWSIZE => m_axi_ray_bundle_AWSIZE,
        AWBURST => m_axi_ray_bundle_AWBURST,
        AWLOCK => m_axi_ray_bundle_AWLOCK,
        AWCACHE => m_axi_ray_bundle_AWCACHE,
        AWPROT => m_axi_ray_bundle_AWPROT,
        AWQOS => m_axi_ray_bundle_AWQOS,
        AWREGION => m_axi_ray_bundle_AWREGION,
        AWUSER => m_axi_ray_bundle_AWUSER,
        WVALID => m_axi_ray_bundle_WVALID,
        WREADY => m_axi_ray_bundle_WREADY,
        WDATA => m_axi_ray_bundle_WDATA,
        WSTRB => m_axi_ray_bundle_WSTRB,
        WLAST => m_axi_ray_bundle_WLAST,
        WID => m_axi_ray_bundle_WID,
        WUSER => m_axi_ray_bundle_WUSER,
        ARVALID => m_axi_ray_bundle_ARVALID,
        ARREADY => m_axi_ray_bundle_ARREADY,
        ARADDR => m_axi_ray_bundle_ARADDR,
        ARID => m_axi_ray_bundle_ARID,
        ARLEN => m_axi_ray_bundle_ARLEN,
        ARSIZE => m_axi_ray_bundle_ARSIZE,
        ARBURST => m_axi_ray_bundle_ARBURST,
        ARLOCK => m_axi_ray_bundle_ARLOCK,
        ARCACHE => m_axi_ray_bundle_ARCACHE,
        ARPROT => m_axi_ray_bundle_ARPROT,
        ARQOS => m_axi_ray_bundle_ARQOS,
        ARREGION => m_axi_ray_bundle_ARREGION,
        ARUSER => m_axi_ray_bundle_ARUSER,
        RVALID => m_axi_ray_bundle_RVALID,
        RREADY => m_axi_ray_bundle_RREADY,
        RDATA => m_axi_ray_bundle_RDATA,
        RLAST => m_axi_ray_bundle_RLAST,
        RID => m_axi_ray_bundle_RID,
        RUSER => m_axi_ray_bundle_RUSER,
        RRESP => m_axi_ray_bundle_RRESP,
        BVALID => m_axi_ray_bundle_BVALID,
        BREADY => m_axi_ray_bundle_BREADY,
        BRESP => m_axi_ray_bundle_BRESP,
        BID => m_axi_ray_bundle_BID,
        BUSER => m_axi_ray_bundle_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ray_bundle_ARVALID,
        I_ARREADY => ray_bundle_ARREADY,
        I_ARADDR => ray_bundle_ARADDR,
        I_ARID => ray_bundle_ARID,
        I_ARLEN => ray_bundle_ARLEN,
        I_ARSIZE => ray_bundle_ARSIZE,
        I_ARLOCK => ray_bundle_ARLOCK,
        I_ARCACHE => ray_bundle_ARCACHE,
        I_ARQOS => ray_bundle_ARQOS,
        I_ARPROT => ray_bundle_ARPROT,
        I_ARUSER => ray_bundle_ARUSER,
        I_ARBURST => ray_bundle_ARBURST,
        I_ARREGION => ray_bundle_ARREGION,
        I_RVALID => ray_bundle_RVALID,
        I_RREADY => ray_bundle_RREADY,
        I_RDATA => ray_bundle_RDATA,
        I_RID => ray_bundle_RID,
        I_RUSER => ray_bundle_RUSER,
        I_RRESP => ray_bundle_RRESP,
        I_RLAST => ray_bundle_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => ray_bundle_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => ray_bundle_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => ray_bundle_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => ray_bundle_BRESP,
        I_BID => ray_bundle_BID,
        I_BUSER => ray_bundle_BUSER);

    rayTI_triangle_bundle_m_axi_U : component rayTI_triangle_bundle_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_TRIANGLE_BUNDLE_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_TRIANGLE_BUNDLE_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_TRIANGLE_BUNDLE_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_TRIANGLE_BUNDLE_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_TRIANGLE_BUNDLE_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_TRIANGLE_BUNDLE_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_TRIANGLE_BUNDLE_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_TRIANGLE_BUNDLE_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_TRIANGLE_BUNDLE_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_TRIANGLE_BUNDLE_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_TRIANGLE_BUNDLE_CACHE_VALUE)
    port map (
        AWVALID => m_axi_triangle_bundle_AWVALID,
        AWREADY => m_axi_triangle_bundle_AWREADY,
        AWADDR => m_axi_triangle_bundle_AWADDR,
        AWID => m_axi_triangle_bundle_AWID,
        AWLEN => m_axi_triangle_bundle_AWLEN,
        AWSIZE => m_axi_triangle_bundle_AWSIZE,
        AWBURST => m_axi_triangle_bundle_AWBURST,
        AWLOCK => m_axi_triangle_bundle_AWLOCK,
        AWCACHE => m_axi_triangle_bundle_AWCACHE,
        AWPROT => m_axi_triangle_bundle_AWPROT,
        AWQOS => m_axi_triangle_bundle_AWQOS,
        AWREGION => m_axi_triangle_bundle_AWREGION,
        AWUSER => m_axi_triangle_bundle_AWUSER,
        WVALID => m_axi_triangle_bundle_WVALID,
        WREADY => m_axi_triangle_bundle_WREADY,
        WDATA => m_axi_triangle_bundle_WDATA,
        WSTRB => m_axi_triangle_bundle_WSTRB,
        WLAST => m_axi_triangle_bundle_WLAST,
        WID => m_axi_triangle_bundle_WID,
        WUSER => m_axi_triangle_bundle_WUSER,
        ARVALID => m_axi_triangle_bundle_ARVALID,
        ARREADY => m_axi_triangle_bundle_ARREADY,
        ARADDR => m_axi_triangle_bundle_ARADDR,
        ARID => m_axi_triangle_bundle_ARID,
        ARLEN => m_axi_triangle_bundle_ARLEN,
        ARSIZE => m_axi_triangle_bundle_ARSIZE,
        ARBURST => m_axi_triangle_bundle_ARBURST,
        ARLOCK => m_axi_triangle_bundle_ARLOCK,
        ARCACHE => m_axi_triangle_bundle_ARCACHE,
        ARPROT => m_axi_triangle_bundle_ARPROT,
        ARQOS => m_axi_triangle_bundle_ARQOS,
        ARREGION => m_axi_triangle_bundle_ARREGION,
        ARUSER => m_axi_triangle_bundle_ARUSER,
        RVALID => m_axi_triangle_bundle_RVALID,
        RREADY => m_axi_triangle_bundle_RREADY,
        RDATA => m_axi_triangle_bundle_RDATA,
        RLAST => m_axi_triangle_bundle_RLAST,
        RID => m_axi_triangle_bundle_RID,
        RUSER => m_axi_triangle_bundle_RUSER,
        RRESP => m_axi_triangle_bundle_RRESP,
        BVALID => m_axi_triangle_bundle_BVALID,
        BREADY => m_axi_triangle_bundle_BREADY,
        BRESP => m_axi_triangle_bundle_BRESP,
        BID => m_axi_triangle_bundle_BID,
        BUSER => m_axi_triangle_bundle_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => triangle_bundle_ARVALID,
        I_ARREADY => triangle_bundle_ARREADY,
        I_ARADDR => triangle_bundle_ARADDR,
        I_ARID => triangle_bundle_ARID,
        I_ARLEN => triangle_bundle_ARLEN,
        I_ARSIZE => triangle_bundle_ARSIZE,
        I_ARLOCK => triangle_bundle_ARLOCK,
        I_ARCACHE => triangle_bundle_ARCACHE,
        I_ARQOS => triangle_bundle_ARQOS,
        I_ARPROT => triangle_bundle_ARPROT,
        I_ARUSER => triangle_bundle_ARUSER,
        I_ARBURST => triangle_bundle_ARBURST,
        I_ARREGION => triangle_bundle_ARREGION,
        I_RVALID => triangle_bundle_RVALID,
        I_RREADY => triangle_bundle_RREADY,
        I_RDATA => triangle_bundle_RDATA,
        I_RID => triangle_bundle_RID,
        I_RUSER => triangle_bundle_RUSER,
        I_RRESP => triangle_bundle_RRESP,
        I_RLAST => triangle_bundle_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => triangle_bundle_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => triangle_bundle_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => triangle_bundle_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => triangle_bundle_BRESP,
        I_BID => triangle_bundle_BID,
        I_BUSER => triangle_bundle_BUSER);

    rayTI_res_bundle_m_axi_U : component rayTI_res_bundle_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_RES_BUNDLE_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_RES_BUNDLE_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_RES_BUNDLE_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_RES_BUNDLE_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_RES_BUNDLE_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_RES_BUNDLE_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_RES_BUNDLE_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_RES_BUNDLE_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_RES_BUNDLE_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_RES_BUNDLE_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_RES_BUNDLE_CACHE_VALUE)
    port map (
        AWVALID => m_axi_res_bundle_AWVALID,
        AWREADY => m_axi_res_bundle_AWREADY,
        AWADDR => m_axi_res_bundle_AWADDR,
        AWID => m_axi_res_bundle_AWID,
        AWLEN => m_axi_res_bundle_AWLEN,
        AWSIZE => m_axi_res_bundle_AWSIZE,
        AWBURST => m_axi_res_bundle_AWBURST,
        AWLOCK => m_axi_res_bundle_AWLOCK,
        AWCACHE => m_axi_res_bundle_AWCACHE,
        AWPROT => m_axi_res_bundle_AWPROT,
        AWQOS => m_axi_res_bundle_AWQOS,
        AWREGION => m_axi_res_bundle_AWREGION,
        AWUSER => m_axi_res_bundle_AWUSER,
        WVALID => m_axi_res_bundle_WVALID,
        WREADY => m_axi_res_bundle_WREADY,
        WDATA => m_axi_res_bundle_WDATA,
        WSTRB => m_axi_res_bundle_WSTRB,
        WLAST => m_axi_res_bundle_WLAST,
        WID => m_axi_res_bundle_WID,
        WUSER => m_axi_res_bundle_WUSER,
        ARVALID => m_axi_res_bundle_ARVALID,
        ARREADY => m_axi_res_bundle_ARREADY,
        ARADDR => m_axi_res_bundle_ARADDR,
        ARID => m_axi_res_bundle_ARID,
        ARLEN => m_axi_res_bundle_ARLEN,
        ARSIZE => m_axi_res_bundle_ARSIZE,
        ARBURST => m_axi_res_bundle_ARBURST,
        ARLOCK => m_axi_res_bundle_ARLOCK,
        ARCACHE => m_axi_res_bundle_ARCACHE,
        ARPROT => m_axi_res_bundle_ARPROT,
        ARQOS => m_axi_res_bundle_ARQOS,
        ARREGION => m_axi_res_bundle_ARREGION,
        ARUSER => m_axi_res_bundle_ARUSER,
        RVALID => m_axi_res_bundle_RVALID,
        RREADY => m_axi_res_bundle_RREADY,
        RDATA => m_axi_res_bundle_RDATA,
        RLAST => m_axi_res_bundle_RLAST,
        RID => m_axi_res_bundle_RID,
        RUSER => m_axi_res_bundle_RUSER,
        RRESP => m_axi_res_bundle_RRESP,
        BVALID => m_axi_res_bundle_BVALID,
        BREADY => m_axi_res_bundle_BREADY,
        BRESP => m_axi_res_bundle_BRESP,
        BID => m_axi_res_bundle_BID,
        BUSER => m_axi_res_bundle_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => res_bundle_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => res_bundle_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => res_bundle_RDATA,
        I_RID => res_bundle_RID,
        I_RUSER => res_bundle_RUSER,
        I_RRESP => res_bundle_RRESP,
        I_RLAST => res_bundle_RLAST,
        I_AWVALID => res_bundle_AWVALID,
        I_AWREADY => res_bundle_AWREADY,
        I_AWADDR => res_bundle_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => res_bundle_WVALID,
        I_WREADY => res_bundle_WREADY,
        I_WDATA => res_bundle_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => res_bundle_BVALID,
        I_BREADY => res_bundle_BREADY,
        I_BRESP => res_bundle_BRESP,
        I_BID => res_bundle_BID,
        I_BUSER => res_bundle_BUSER);

    grp_crossProduct_1_fu_335 : component crossProduct_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_crossProduct_1_fu_335_ap_start,
        ap_done => grp_crossProduct_1_fu_335_ap_done,
        ap_idle => grp_crossProduct_1_fu_335_ap_idle,
        ap_ready => grp_crossProduct_1_fu_335_ap_ready,
        m_axi_Vec3_float_x_AWVALID => grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_AWVALID,
        m_axi_Vec3_float_x_AWREADY => ap_const_logic_0,
        m_axi_Vec3_float_x_AWADDR => grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_AWADDR,
        m_axi_Vec3_float_x_AWID => grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_AWID,
        m_axi_Vec3_float_x_AWLEN => grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_AWLEN,
        m_axi_Vec3_float_x_AWSIZE => grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_AWSIZE,
        m_axi_Vec3_float_x_AWBURST => grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_AWBURST,
        m_axi_Vec3_float_x_AWLOCK => grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_AWLOCK,
        m_axi_Vec3_float_x_AWCACHE => grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_AWCACHE,
        m_axi_Vec3_float_x_AWPROT => grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_AWPROT,
        m_axi_Vec3_float_x_AWQOS => grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_AWQOS,
        m_axi_Vec3_float_x_AWREGION => grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_AWREGION,
        m_axi_Vec3_float_x_AWUSER => grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_AWUSER,
        m_axi_Vec3_float_x_WVALID => grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_WVALID,
        m_axi_Vec3_float_x_WREADY => ap_const_logic_0,
        m_axi_Vec3_float_x_WDATA => grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_WDATA,
        m_axi_Vec3_float_x_WSTRB => grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_WSTRB,
        m_axi_Vec3_float_x_WLAST => grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_WLAST,
        m_axi_Vec3_float_x_WID => grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_WID,
        m_axi_Vec3_float_x_WUSER => grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_WUSER,
        m_axi_Vec3_float_x_ARVALID => grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARVALID,
        m_axi_Vec3_float_x_ARREADY => ray_bundle_ARREADY,
        m_axi_Vec3_float_x_ARADDR => grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARADDR,
        m_axi_Vec3_float_x_ARID => grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARID,
        m_axi_Vec3_float_x_ARLEN => grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARLEN,
        m_axi_Vec3_float_x_ARSIZE => grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARSIZE,
        m_axi_Vec3_float_x_ARBURST => grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARBURST,
        m_axi_Vec3_float_x_ARLOCK => grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARLOCK,
        m_axi_Vec3_float_x_ARCACHE => grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARCACHE,
        m_axi_Vec3_float_x_ARPROT => grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARPROT,
        m_axi_Vec3_float_x_ARQOS => grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARQOS,
        m_axi_Vec3_float_x_ARREGION => grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARREGION,
        m_axi_Vec3_float_x_ARUSER => grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARUSER,
        m_axi_Vec3_float_x_RVALID => ray_bundle_RVALID,
        m_axi_Vec3_float_x_RREADY => grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_RREADY,
        m_axi_Vec3_float_x_RDATA => ray_bundle_RDATA,
        m_axi_Vec3_float_x_RLAST => ray_bundle_RLAST,
        m_axi_Vec3_float_x_RID => ray_bundle_RID,
        m_axi_Vec3_float_x_RUSER => ray_bundle_RUSER,
        m_axi_Vec3_float_x_RRESP => ray_bundle_RRESP,
        m_axi_Vec3_float_x_BVALID => ap_const_logic_0,
        m_axi_Vec3_float_x_BREADY => grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_BREADY,
        m_axi_Vec3_float_x_BRESP => ap_const_lv2_0,
        m_axi_Vec3_float_x_BID => ap_const_lv1_0,
        m_axi_Vec3_float_x_BUSER => ap_const_lv1_0,
        Vec3_float_x_offset => dir_x3_reg_1095,
        Vec3_float_y_offset => dir_y5_reg_1088,
        Vec3_float_z_offset => dir_z7_reg_1081,
        v_x_read => v0v2_x_reg_1123,
        v_y_read => v0v2_y_reg_1129,
        v_z_read => v0v2_z_reg_1135,
        ap_return_0 => grp_crossProduct_1_fu_335_ap_return_0,
        ap_return_1 => grp_crossProduct_1_fu_335_ap_return_1,
        ap_return_2 => grp_crossProduct_1_fu_335_ap_return_2);

    grp_dotProduct_2_fu_347 : component dotProduct_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_dotProduct_2_fu_347_ap_start,
        ap_done => grp_dotProduct_2_fu_347_ap_done,
        ap_idle => grp_dotProduct_2_fu_347_ap_idle,
        ap_ready => grp_dotProduct_2_fu_347_ap_ready,
        m_axi_Vec3_float_x_AWVALID => grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_AWVALID,
        m_axi_Vec3_float_x_AWREADY => ap_const_logic_0,
        m_axi_Vec3_float_x_AWADDR => grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_AWADDR,
        m_axi_Vec3_float_x_AWID => grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_AWID,
        m_axi_Vec3_float_x_AWLEN => grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_AWLEN,
        m_axi_Vec3_float_x_AWSIZE => grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_AWSIZE,
        m_axi_Vec3_float_x_AWBURST => grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_AWBURST,
        m_axi_Vec3_float_x_AWLOCK => grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_AWLOCK,
        m_axi_Vec3_float_x_AWCACHE => grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_AWCACHE,
        m_axi_Vec3_float_x_AWPROT => grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_AWPROT,
        m_axi_Vec3_float_x_AWQOS => grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_AWQOS,
        m_axi_Vec3_float_x_AWREGION => grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_AWREGION,
        m_axi_Vec3_float_x_AWUSER => grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_AWUSER,
        m_axi_Vec3_float_x_WVALID => grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_WVALID,
        m_axi_Vec3_float_x_WREADY => ap_const_logic_0,
        m_axi_Vec3_float_x_WDATA => grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_WDATA,
        m_axi_Vec3_float_x_WSTRB => grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_WSTRB,
        m_axi_Vec3_float_x_WLAST => grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_WLAST,
        m_axi_Vec3_float_x_WID => grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_WID,
        m_axi_Vec3_float_x_WUSER => grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_WUSER,
        m_axi_Vec3_float_x_ARVALID => grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARVALID,
        m_axi_Vec3_float_x_ARREADY => ray_bundle_ARREADY,
        m_axi_Vec3_float_x_ARADDR => grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARADDR,
        m_axi_Vec3_float_x_ARID => grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARID,
        m_axi_Vec3_float_x_ARLEN => grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARLEN,
        m_axi_Vec3_float_x_ARSIZE => grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARSIZE,
        m_axi_Vec3_float_x_ARBURST => grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARBURST,
        m_axi_Vec3_float_x_ARLOCK => grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARLOCK,
        m_axi_Vec3_float_x_ARCACHE => grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARCACHE,
        m_axi_Vec3_float_x_ARPROT => grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARPROT,
        m_axi_Vec3_float_x_ARQOS => grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARQOS,
        m_axi_Vec3_float_x_ARREGION => grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARREGION,
        m_axi_Vec3_float_x_ARUSER => grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARUSER,
        m_axi_Vec3_float_x_RVALID => ray_bundle_RVALID,
        m_axi_Vec3_float_x_RREADY => grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_RREADY,
        m_axi_Vec3_float_x_RDATA => ray_bundle_RDATA,
        m_axi_Vec3_float_x_RLAST => ray_bundle_RLAST,
        m_axi_Vec3_float_x_RID => ray_bundle_RID,
        m_axi_Vec3_float_x_RUSER => ray_bundle_RUSER,
        m_axi_Vec3_float_x_RRESP => ray_bundle_RRESP,
        m_axi_Vec3_float_x_BVALID => ap_const_logic_0,
        m_axi_Vec3_float_x_BREADY => grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_BREADY,
        m_axi_Vec3_float_x_BRESP => ap_const_lv2_0,
        m_axi_Vec3_float_x_BID => ap_const_lv1_0,
        m_axi_Vec3_float_x_BUSER => ap_const_lv1_0,
        Vec3_float_x_offset => dir_x3_reg_1095,
        Vec3_float_y_offset => dir_y5_reg_1088,
        Vec3_float_z_offset => dir_z7_reg_1081,
        v_x_read => reg_466,
        v_y_read => qvec_y_reg_1223,
        v_z_read => qvec_z_reg_1229,
        ap_return => grp_dotProduct_2_fu_347_ap_return);

    grp_operator_1_fu_359 : component operator_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_operator_1_fu_359_ap_start,
        ap_done => grp_operator_1_fu_359_ap_done,
        ap_idle => grp_operator_1_fu_359_ap_idle,
        ap_ready => grp_operator_1_fu_359_ap_ready,
        m_axi_Vec3_float_x_AWVALID => grp_operator_1_fu_359_m_axi_Vec3_float_x_AWVALID,
        m_axi_Vec3_float_x_AWREADY => ap_const_logic_0,
        m_axi_Vec3_float_x_AWADDR => grp_operator_1_fu_359_m_axi_Vec3_float_x_AWADDR,
        m_axi_Vec3_float_x_AWID => grp_operator_1_fu_359_m_axi_Vec3_float_x_AWID,
        m_axi_Vec3_float_x_AWLEN => grp_operator_1_fu_359_m_axi_Vec3_float_x_AWLEN,
        m_axi_Vec3_float_x_AWSIZE => grp_operator_1_fu_359_m_axi_Vec3_float_x_AWSIZE,
        m_axi_Vec3_float_x_AWBURST => grp_operator_1_fu_359_m_axi_Vec3_float_x_AWBURST,
        m_axi_Vec3_float_x_AWLOCK => grp_operator_1_fu_359_m_axi_Vec3_float_x_AWLOCK,
        m_axi_Vec3_float_x_AWCACHE => grp_operator_1_fu_359_m_axi_Vec3_float_x_AWCACHE,
        m_axi_Vec3_float_x_AWPROT => grp_operator_1_fu_359_m_axi_Vec3_float_x_AWPROT,
        m_axi_Vec3_float_x_AWQOS => grp_operator_1_fu_359_m_axi_Vec3_float_x_AWQOS,
        m_axi_Vec3_float_x_AWREGION => grp_operator_1_fu_359_m_axi_Vec3_float_x_AWREGION,
        m_axi_Vec3_float_x_AWUSER => grp_operator_1_fu_359_m_axi_Vec3_float_x_AWUSER,
        m_axi_Vec3_float_x_WVALID => grp_operator_1_fu_359_m_axi_Vec3_float_x_WVALID,
        m_axi_Vec3_float_x_WREADY => ap_const_logic_0,
        m_axi_Vec3_float_x_WDATA => grp_operator_1_fu_359_m_axi_Vec3_float_x_WDATA,
        m_axi_Vec3_float_x_WSTRB => grp_operator_1_fu_359_m_axi_Vec3_float_x_WSTRB,
        m_axi_Vec3_float_x_WLAST => grp_operator_1_fu_359_m_axi_Vec3_float_x_WLAST,
        m_axi_Vec3_float_x_WID => grp_operator_1_fu_359_m_axi_Vec3_float_x_WID,
        m_axi_Vec3_float_x_WUSER => grp_operator_1_fu_359_m_axi_Vec3_float_x_WUSER,
        m_axi_Vec3_float_x_ARVALID => grp_operator_1_fu_359_m_axi_Vec3_float_x_ARVALID,
        m_axi_Vec3_float_x_ARREADY => triangle_bundle_ARREADY,
        m_axi_Vec3_float_x_ARADDR => grp_operator_1_fu_359_m_axi_Vec3_float_x_ARADDR,
        m_axi_Vec3_float_x_ARID => grp_operator_1_fu_359_m_axi_Vec3_float_x_ARID,
        m_axi_Vec3_float_x_ARLEN => grp_operator_1_fu_359_m_axi_Vec3_float_x_ARLEN,
        m_axi_Vec3_float_x_ARSIZE => grp_operator_1_fu_359_m_axi_Vec3_float_x_ARSIZE,
        m_axi_Vec3_float_x_ARBURST => grp_operator_1_fu_359_m_axi_Vec3_float_x_ARBURST,
        m_axi_Vec3_float_x_ARLOCK => grp_operator_1_fu_359_m_axi_Vec3_float_x_ARLOCK,
        m_axi_Vec3_float_x_ARCACHE => grp_operator_1_fu_359_m_axi_Vec3_float_x_ARCACHE,
        m_axi_Vec3_float_x_ARPROT => grp_operator_1_fu_359_m_axi_Vec3_float_x_ARPROT,
        m_axi_Vec3_float_x_ARQOS => grp_operator_1_fu_359_m_axi_Vec3_float_x_ARQOS,
        m_axi_Vec3_float_x_ARREGION => grp_operator_1_fu_359_m_axi_Vec3_float_x_ARREGION,
        m_axi_Vec3_float_x_ARUSER => grp_operator_1_fu_359_m_axi_Vec3_float_x_ARUSER,
        m_axi_Vec3_float_x_RVALID => triangle_bundle_RVALID,
        m_axi_Vec3_float_x_RREADY => grp_operator_1_fu_359_m_axi_Vec3_float_x_RREADY,
        m_axi_Vec3_float_x_RDATA => triangle_bundle_RDATA,
        m_axi_Vec3_float_x_RLAST => triangle_bundle_RLAST,
        m_axi_Vec3_float_x_RID => triangle_bundle_RID,
        m_axi_Vec3_float_x_RUSER => triangle_bundle_RUSER,
        m_axi_Vec3_float_x_RRESP => triangle_bundle_RRESP,
        m_axi_Vec3_float_x_BVALID => ap_const_logic_0,
        m_axi_Vec3_float_x_BREADY => grp_operator_1_fu_359_m_axi_Vec3_float_x_BREADY,
        m_axi_Vec3_float_x_BRESP => ap_const_lv2_0,
        m_axi_Vec3_float_x_BID => ap_const_lv1_0,
        m_axi_Vec3_float_x_BUSER => ap_const_lv1_0,
        Vec3_float_x_offset => grp_operator_1_fu_359_Vec3_float_x_offset,
        Vec3_float_y_offset => grp_operator_1_fu_359_Vec3_float_y_offset,
        Vec3_float_z_offset => grp_operator_1_fu_359_Vec3_float_z_offset,
        v_x_offset => v0_x1_reg_1059,
        v_y_offset => v0_y1_reg_1052,
        v_z_offset => v0_z1_reg_1045,
        ap_return_0 => grp_operator_1_fu_359_ap_return_0,
        ap_return_1 => grp_operator_1_fu_359_ap_return_1,
        ap_return_2 => grp_operator_1_fu_359_ap_return_2);

    grp_operator_sub_fu_371 : component operator_sub
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_operator_sub_fu_371_ap_start,
        ap_done => grp_operator_sub_fu_371_ap_done,
        ap_idle => grp_operator_sub_fu_371_ap_idle,
        ap_ready => grp_operator_sub_fu_371_ap_ready,
        m_axi_Vec3_float_x_AWVALID => grp_operator_sub_fu_371_m_axi_Vec3_float_x_AWVALID,
        m_axi_Vec3_float_x_AWREADY => ap_const_logic_0,
        m_axi_Vec3_float_x_AWADDR => grp_operator_sub_fu_371_m_axi_Vec3_float_x_AWADDR,
        m_axi_Vec3_float_x_AWID => grp_operator_sub_fu_371_m_axi_Vec3_float_x_AWID,
        m_axi_Vec3_float_x_AWLEN => grp_operator_sub_fu_371_m_axi_Vec3_float_x_AWLEN,
        m_axi_Vec3_float_x_AWSIZE => grp_operator_sub_fu_371_m_axi_Vec3_float_x_AWSIZE,
        m_axi_Vec3_float_x_AWBURST => grp_operator_sub_fu_371_m_axi_Vec3_float_x_AWBURST,
        m_axi_Vec3_float_x_AWLOCK => grp_operator_sub_fu_371_m_axi_Vec3_float_x_AWLOCK,
        m_axi_Vec3_float_x_AWCACHE => grp_operator_sub_fu_371_m_axi_Vec3_float_x_AWCACHE,
        m_axi_Vec3_float_x_AWPROT => grp_operator_sub_fu_371_m_axi_Vec3_float_x_AWPROT,
        m_axi_Vec3_float_x_AWQOS => grp_operator_sub_fu_371_m_axi_Vec3_float_x_AWQOS,
        m_axi_Vec3_float_x_AWREGION => grp_operator_sub_fu_371_m_axi_Vec3_float_x_AWREGION,
        m_axi_Vec3_float_x_AWUSER => grp_operator_sub_fu_371_m_axi_Vec3_float_x_AWUSER,
        m_axi_Vec3_float_x_WVALID => grp_operator_sub_fu_371_m_axi_Vec3_float_x_WVALID,
        m_axi_Vec3_float_x_WREADY => ap_const_logic_0,
        m_axi_Vec3_float_x_WDATA => grp_operator_sub_fu_371_m_axi_Vec3_float_x_WDATA,
        m_axi_Vec3_float_x_WSTRB => grp_operator_sub_fu_371_m_axi_Vec3_float_x_WSTRB,
        m_axi_Vec3_float_x_WLAST => grp_operator_sub_fu_371_m_axi_Vec3_float_x_WLAST,
        m_axi_Vec3_float_x_WID => grp_operator_sub_fu_371_m_axi_Vec3_float_x_WID,
        m_axi_Vec3_float_x_WUSER => grp_operator_sub_fu_371_m_axi_Vec3_float_x_WUSER,
        m_axi_Vec3_float_x_ARVALID => grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARVALID,
        m_axi_Vec3_float_x_ARREADY => ray_bundle_ARREADY,
        m_axi_Vec3_float_x_ARADDR => grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARADDR,
        m_axi_Vec3_float_x_ARID => grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARID,
        m_axi_Vec3_float_x_ARLEN => grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARLEN,
        m_axi_Vec3_float_x_ARSIZE => grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARSIZE,
        m_axi_Vec3_float_x_ARBURST => grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARBURST,
        m_axi_Vec3_float_x_ARLOCK => grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARLOCK,
        m_axi_Vec3_float_x_ARCACHE => grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARCACHE,
        m_axi_Vec3_float_x_ARPROT => grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARPROT,
        m_axi_Vec3_float_x_ARQOS => grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARQOS,
        m_axi_Vec3_float_x_ARREGION => grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARREGION,
        m_axi_Vec3_float_x_ARUSER => grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARUSER,
        m_axi_Vec3_float_x_RVALID => ray_bundle_RVALID,
        m_axi_Vec3_float_x_RREADY => grp_operator_sub_fu_371_m_axi_Vec3_float_x_RREADY,
        m_axi_Vec3_float_x_RDATA => ray_bundle_RDATA,
        m_axi_Vec3_float_x_RLAST => ray_bundle_RLAST,
        m_axi_Vec3_float_x_RID => ray_bundle_RID,
        m_axi_Vec3_float_x_RUSER => ray_bundle_RUSER,
        m_axi_Vec3_float_x_RRESP => ray_bundle_RRESP,
        m_axi_Vec3_float_x_BVALID => ap_const_logic_0,
        m_axi_Vec3_float_x_BREADY => grp_operator_sub_fu_371_m_axi_Vec3_float_x_BREADY,
        m_axi_Vec3_float_x_BRESP => ap_const_lv2_0,
        m_axi_Vec3_float_x_BID => ap_const_lv1_0,
        m_axi_Vec3_float_x_BUSER => ap_const_lv1_0,
        Vec3_float_x_offset => orig_x1_reg_1076,
        Vec3_float_y_offset => orig_y1_reg_1071,
        Vec3_float_z_offset => orig_z1_reg_1066,
        m_axi_v_x_AWVALID => grp_operator_sub_fu_371_m_axi_v_x_AWVALID,
        m_axi_v_x_AWREADY => ap_const_logic_0,
        m_axi_v_x_AWADDR => grp_operator_sub_fu_371_m_axi_v_x_AWADDR,
        m_axi_v_x_AWID => grp_operator_sub_fu_371_m_axi_v_x_AWID,
        m_axi_v_x_AWLEN => grp_operator_sub_fu_371_m_axi_v_x_AWLEN,
        m_axi_v_x_AWSIZE => grp_operator_sub_fu_371_m_axi_v_x_AWSIZE,
        m_axi_v_x_AWBURST => grp_operator_sub_fu_371_m_axi_v_x_AWBURST,
        m_axi_v_x_AWLOCK => grp_operator_sub_fu_371_m_axi_v_x_AWLOCK,
        m_axi_v_x_AWCACHE => grp_operator_sub_fu_371_m_axi_v_x_AWCACHE,
        m_axi_v_x_AWPROT => grp_operator_sub_fu_371_m_axi_v_x_AWPROT,
        m_axi_v_x_AWQOS => grp_operator_sub_fu_371_m_axi_v_x_AWQOS,
        m_axi_v_x_AWREGION => grp_operator_sub_fu_371_m_axi_v_x_AWREGION,
        m_axi_v_x_AWUSER => grp_operator_sub_fu_371_m_axi_v_x_AWUSER,
        m_axi_v_x_WVALID => grp_operator_sub_fu_371_m_axi_v_x_WVALID,
        m_axi_v_x_WREADY => ap_const_logic_0,
        m_axi_v_x_WDATA => grp_operator_sub_fu_371_m_axi_v_x_WDATA,
        m_axi_v_x_WSTRB => grp_operator_sub_fu_371_m_axi_v_x_WSTRB,
        m_axi_v_x_WLAST => grp_operator_sub_fu_371_m_axi_v_x_WLAST,
        m_axi_v_x_WID => grp_operator_sub_fu_371_m_axi_v_x_WID,
        m_axi_v_x_WUSER => grp_operator_sub_fu_371_m_axi_v_x_WUSER,
        m_axi_v_x_ARVALID => grp_operator_sub_fu_371_m_axi_v_x_ARVALID,
        m_axi_v_x_ARREADY => triangle_bundle_ARREADY,
        m_axi_v_x_ARADDR => grp_operator_sub_fu_371_m_axi_v_x_ARADDR,
        m_axi_v_x_ARID => grp_operator_sub_fu_371_m_axi_v_x_ARID,
        m_axi_v_x_ARLEN => grp_operator_sub_fu_371_m_axi_v_x_ARLEN,
        m_axi_v_x_ARSIZE => grp_operator_sub_fu_371_m_axi_v_x_ARSIZE,
        m_axi_v_x_ARBURST => grp_operator_sub_fu_371_m_axi_v_x_ARBURST,
        m_axi_v_x_ARLOCK => grp_operator_sub_fu_371_m_axi_v_x_ARLOCK,
        m_axi_v_x_ARCACHE => grp_operator_sub_fu_371_m_axi_v_x_ARCACHE,
        m_axi_v_x_ARPROT => grp_operator_sub_fu_371_m_axi_v_x_ARPROT,
        m_axi_v_x_ARQOS => grp_operator_sub_fu_371_m_axi_v_x_ARQOS,
        m_axi_v_x_ARREGION => grp_operator_sub_fu_371_m_axi_v_x_ARREGION,
        m_axi_v_x_ARUSER => grp_operator_sub_fu_371_m_axi_v_x_ARUSER,
        m_axi_v_x_RVALID => triangle_bundle_RVALID,
        m_axi_v_x_RREADY => grp_operator_sub_fu_371_m_axi_v_x_RREADY,
        m_axi_v_x_RDATA => triangle_bundle_RDATA,
        m_axi_v_x_RLAST => triangle_bundle_RLAST,
        m_axi_v_x_RID => triangle_bundle_RID,
        m_axi_v_x_RUSER => triangle_bundle_RUSER,
        m_axi_v_x_RRESP => triangle_bundle_RRESP,
        m_axi_v_x_BVALID => ap_const_logic_0,
        m_axi_v_x_BREADY => grp_operator_sub_fu_371_m_axi_v_x_BREADY,
        m_axi_v_x_BRESP => ap_const_lv2_0,
        m_axi_v_x_BID => ap_const_lv1_0,
        m_axi_v_x_BUSER => ap_const_lv1_0,
        v_x_offset => v0_x1_reg_1059,
        v_y_offset => v0_y1_reg_1052,
        v_z_offset => v0_z1_reg_1045,
        ap_return_0 => grp_operator_sub_fu_371_ap_return_0,
        ap_return_1 => grp_operator_sub_fu_371_ap_return_1,
        ap_return_2 => grp_operator_sub_fu_371_ap_return_2);

    rayTI_faddfsub_32eOg_U47 : component rayTI_faddfsub_32eOg
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_385_p0,
        din1 => grp_fu_385_p1,
        opcode => grp_fu_385_opcode,
        ce => grp_fu_385_ce,
        dout => grp_fu_385_p2);

    rayTI_fsub_32ns_3bkb_U48 : component rayTI_fsub_32ns_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_491,
        din1 => tmp_21_i_reg_1208,
        ce => ap_const_logic_1,
        dout => grp_fu_389_p2);

    rayTI_fsub_32ns_3bkb_U49 : component rayTI_fsub_32ns_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_22_i_reg_1213,
        din1 => tmp_23_i_reg_1218,
        ce => ap_const_logic_1,
        dout => grp_fu_393_p2);

    rayTI_fmul_32ns_3cud_U50 : component rayTI_fmul_32ns_3cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_397_p0,
        din1 => grp_fu_397_p1,
        ce => grp_fu_397_ce,
        dout => grp_fu_397_p2);

    rayTI_fmul_32ns_3cud_U51 : component rayTI_fmul_32ns_3cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_401_p0,
        din1 => grp_fu_401_p1,
        ce => grp_fu_401_ce,
        dout => grp_fu_401_p2);

    rayTI_fmul_32ns_3cud_U52 : component rayTI_fmul_32ns_3cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_405_p0,
        din1 => grp_fu_405_p1,
        ce => grp_fu_405_ce,
        dout => grp_fu_405_p2);

    rayTI_fmul_32ns_3cud_U53 : component rayTI_fmul_32ns_3cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tvec_x_reg_1178,
        din1 => v0v1_z_reg_1116,
        ce => grp_fu_409_ce,
        dout => grp_fu_409_p2);

    rayTI_fmul_32ns_3cud_U54 : component rayTI_fmul_32ns_3cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tvec_x_reg_1178,
        din1 => v0v1_y_reg_1109,
        ce => grp_fu_413_ce,
        dout => grp_fu_413_p2);

    rayTI_fmul_32ns_3cud_U55 : component rayTI_fmul_32ns_3cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tvec_y_reg_1185,
        din1 => v0v1_x_reg_1102,
        ce => grp_fu_417_ce,
        dout => grp_fu_417_p2);

    rayTI_fdiv_32ns_3fYi_U56 : component rayTI_fdiv_32ns_3fYi
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_const_lv32_3F800000,
        din1 => reg_466,
        ce => grp_fu_421_ce,
        dout => grp_fu_421_p2);

    rayTI_fcmp_32ns_3g8j_U57 : component rayTI_fcmp_32ns_3g8j
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_426_p0,
        din1 => grp_fu_426_p1,
        ce => grp_fu_426_ce,
        opcode => grp_fu_426_opcode,
        dout => grp_fu_426_p2);

    rayTI_fcmp_32ns_3g8j_U58 : component rayTI_fcmp_32ns_3g8j
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_431_p0,
        din1 => grp_fu_431_p1,
        ce => grp_fu_431_ce,
        opcode => grp_fu_431_opcode,
        dout => grp_fu_431_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_crossProduct_1_fu_335_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_crossProduct_1_fu_335_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    grp_crossProduct_1_fu_335_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_crossProduct_1_fu_335_ap_ready = ap_const_logic_1)) then 
                    grp_crossProduct_1_fu_335_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_dotProduct_2_fu_347_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_dotProduct_2_fu_347_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
                    grp_dotProduct_2_fu_347_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dotProduct_2_fu_347_ap_ready = ap_const_logic_1)) then 
                    grp_dotProduct_2_fu_347_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_operator_1_fu_359_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_operator_1_fu_359_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_operator_1_fu_359_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_operator_1_fu_359_ap_ready = ap_const_logic_1)) then 
                    grp_operator_1_fu_359_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_operator_sub_fu_371_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_operator_sub_fu_371_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_lv1_0 = and_ln42_fu_812_p2) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                    grp_operator_sub_fu_371_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_operator_sub_fu_371_ap_ready = ap_const_logic_1)) then 
                    grp_operator_sub_fu_371_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    p_0_reg_318_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((res_bundle_BVALID = ap_const_logic_0) and (ap_predicate_op405_writeresp_state97 = ap_const_boolean_1))) and (ap_const_lv1_0 = and_ln60_1_reg_1254) and (ap_const_lv1_0 = and_ln60_reg_1240) and (ap_const_lv1_0 = and_ln53_reg_1204) and (ap_const_lv1_0 = and_ln42_reg_1174) and (ap_const_logic_1 = ap_CS_fsm_state97))) then 
                p_0_reg_318 <= and_ln65_reg_1268;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state74) and ((ap_const_lv1_1 = and_ln60_1_fu_954_p2) or (ap_const_lv1_1 = and_ln60_reg_1240))) or ((ap_const_lv1_1 = and_ln42_fu_812_p2) and (ap_const_logic_1 = ap_CS_fsm_state23)) or ((ap_const_lv1_1 = and_ln53_fu_872_p2) and (res_bundle_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48)))) then 
                p_0_reg_318 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                and_ln42_reg_1174 <= and_ln42_fu_812_p2;
                    res_bundle_addr_1_reg_1162(29 downto 0) <= empty_4_fu_698_p1(32 - 1 downto 0)(29 downto 0);
                    res_bundle_addr_2_reg_1168(29 downto 0) <= empty_5_fu_707_p1(32 - 1 downto 0)(29 downto 0);
                    res_bundle_addr_reg_1156(29 downto 0) <= empty_fu_689_p1(32 - 1 downto 0)(29 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((res_bundle_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                and_ln53_reg_1204 <= and_ln53_fu_872_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln60_reg_1240) and (ap_const_logic_1 = ap_CS_fsm_state74))) then
                and_ln60_1_reg_1254 <= and_ln60_1_fu_954_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((res_bundle_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state68))) then
                and_ln60_reg_1240 <= and_ln60_fu_914_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state93)) then
                and_ln65_reg_1268 <= and_ln65_fu_994_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                dir_x3_reg_1095 <= dir_x(31 downto 2);
                dir_y5_reg_1088 <= dir_y(31 downto 2);
                dir_z7_reg_1081 <= dir_z(31 downto 2);
                orig_x1_reg_1076 <= orig_x(31 downto 2);
                orig_y1_reg_1071 <= orig_y(31 downto 2);
                orig_z1_reg_1066 <= orig_z(31 downto 2);
                t1_reg_1010 <= t(31 downto 2);
                u1_reg_1005 <= u(31 downto 2);
                v0_x1_reg_1059 <= v0_x(31 downto 2);
                v0_y1_reg_1052 <= v0_y(31 downto 2);
                v0_z1_reg_1045 <= v0_z(31 downto 2);
                v1_reg_1000 <= v(31 downto 2);
                v1_x1_reg_1040 <= v1_x(31 downto 2);
                v1_y1_reg_1035 <= v1_y(31 downto 2);
                v1_z1_reg_1030 <= v1_z(31 downto 2);
                v2_x1_reg_1025 <= v2_x(31 downto 2);
                v2_y1_reg_1020 <= v2_y(31 downto 2);
                v2_z1_reg_1015 <= v2_z(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state73)) then
                icmp_ln60_2_reg_1244 <= icmp_ln60_2_fu_938_p2;
                icmp_ln60_3_reg_1249 <= icmp_ln60_3_fu_944_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((res_bundle_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state92))) then
                icmp_ln65_1_reg_1263 <= icmp_ln65_1_fu_984_p2;
                icmp_ln65_reg_1258 <= icmp_ln65_fu_978_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                invDet_reg_1199 <= grp_fu_421_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_crossProduct_1_fu_335_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                pvec_x_reg_1141 <= grp_crossProduct_1_fu_335_ap_return_0;
                pvec_y_reg_1146 <= grp_crossProduct_1_fu_335_ap_return_1;
                pvec_z_reg_1151 <= grp_crossProduct_1_fu_335_ap_return_2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state56)) then
                qvec_y_reg_1223 <= grp_fu_389_p2;
                qvec_z_reg_1229 <= grp_fu_393_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state11) or ((res_bundle_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state91)) or ((res_bundle_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42)))) then
                reg_451 <= grp_fu_397_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state11))) then
                reg_461 <= grp_fu_401_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state16))) then
                reg_466 <= grp_fu_385_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state33))) then
                reg_477 <= grp_fu_385_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state51) or ((res_bundle_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state62)))) then
                reg_483 <= grp_fu_397_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state77))) then
                reg_491 <= grp_fu_405_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_dotProduct_2_fu_347_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state58))) then
                tmp_19_reg_1235 <= grp_dotProduct_2_fu_347_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state51)) then
                tmp_21_i_reg_1208 <= grp_fu_409_p2;
                tmp_22_i_reg_1213 <= grp_fu_413_p2;
                tmp_23_i_reg_1218 <= grp_fu_417_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_operator_sub_fu_371_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                tvec_x_reg_1178 <= grp_operator_sub_fu_371_ap_return_0;
                tvec_y_reg_1185 <= grp_operator_sub_fu_371_ap_return_1;
                tvec_z_reg_1192 <= grp_operator_sub_fu_371_ap_return_2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_operator_1_fu_359_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                v0v1_x_reg_1102 <= grp_operator_1_fu_359_ap_return_0;
                v0v1_y_reg_1109 <= grp_operator_1_fu_359_ap_return_1;
                v0v1_z_reg_1116 <= grp_operator_1_fu_359_ap_return_2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_operator_1_fu_359_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                v0v2_x_reg_1123 <= grp_operator_1_fu_359_ap_return_0;
                v0v2_y_reg_1129 <= grp_operator_1_fu_359_ap_return_1;
                v0v2_z_reg_1135 <= grp_operator_1_fu_359_ap_return_2;
            end if;
        end if;
    end process;
    res_bundle_addr_reg_1156(31 downto 30) <= "00";
    res_bundle_addr_1_reg_1162(31 downto 30) <= "00";
    res_bundle_addr_2_reg_1168(31 downto 30) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state68, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state48, ap_CS_fsm_state91, ap_CS_fsm_state92, ap_CS_fsm_state97, and_ln60_reg_1240, res_bundle_AWREADY, res_bundle_WREADY, res_bundle_BVALID, ap_CS_fsm_state3, grp_operator_1_fu_359_ap_done, ap_CS_fsm_state5, ap_CS_fsm_state7, grp_crossProduct_1_fu_335_ap_done, ap_CS_fsm_state23, and_ln42_fu_812_p2, ap_CS_fsm_state24, grp_operator_sub_fu_371_ap_done, and_ln53_fu_872_p2, ap_CS_fsm_state58, grp_dotProduct_2_fu_347_ap_done, and_ln60_fu_914_p2, and_ln60_1_fu_954_p2, ap_CS_fsm_state74, ap_predicate_op405_writeresp_state97)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((grp_operator_1_fu_359_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((grp_operator_1_fu_359_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((grp_crossProduct_1_fu_335_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                if (((ap_const_lv1_1 = and_ln42_fu_812_p2) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state97;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state24 => 
                if (((grp_operator_sub_fu_371_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                if (((res_bundle_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state43 => 
                if (((res_bundle_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                if (((ap_const_lv1_1 = and_ln53_fu_872_p2) and (res_bundle_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                    ap_NS_fsm <= ap_ST_fsm_state97;
                elsif (((res_bundle_BVALID = ap_const_logic_1) and (ap_const_lv1_0 = and_ln53_fu_872_p2) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                if (((grp_dotProduct_2_fu_347_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state58))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                else
                    ap_NS_fsm <= ap_ST_fsm_state58;
                end if;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                if (((res_bundle_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state62))) then
                    ap_NS_fsm <= ap_ST_fsm_state63;
                else
                    ap_NS_fsm <= ap_ST_fsm_state62;
                end if;
            when ap_ST_fsm_state63 => 
                if (((res_bundle_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state63))) then
                    ap_NS_fsm <= ap_ST_fsm_state64;
                else
                    ap_NS_fsm <= ap_ST_fsm_state63;
                end if;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                if (((ap_const_lv1_1 = and_ln60_fu_914_p2) and (res_bundle_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state68))) then
                    ap_NS_fsm <= ap_ST_fsm_state74;
                elsif (((res_bundle_BVALID = ap_const_logic_1) and (ap_const_lv1_0 = and_ln60_fu_914_p2) and (ap_const_logic_1 = ap_CS_fsm_state68))) then
                    ap_NS_fsm <= ap_ST_fsm_state69;
                else
                    ap_NS_fsm <= ap_ST_fsm_state68;
                end if;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state74) and ((ap_const_lv1_1 = and_ln60_1_fu_954_p2) or (ap_const_lv1_1 = and_ln60_reg_1240)))) then
                    ap_NS_fsm <= ap_ST_fsm_state97;
                else
                    ap_NS_fsm <= ap_ST_fsm_state75;
                end if;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                if (((res_bundle_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state91))) then
                    ap_NS_fsm <= ap_ST_fsm_state92;
                else
                    ap_NS_fsm <= ap_ST_fsm_state91;
                end if;
            when ap_ST_fsm_state92 => 
                if (((res_bundle_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state92))) then
                    ap_NS_fsm <= ap_ST_fsm_state93;
                else
                    ap_NS_fsm <= ap_ST_fsm_state92;
                end if;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                if ((not(((res_bundle_BVALID = ap_const_logic_0) and (ap_predicate_op405_writeresp_state97 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_CS_fsm_state97))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state97;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    and_ln42_1_fu_806_p2 <= (or_ln42_fu_800_p2 and grp_fu_426_p2);
    and_ln42_fu_812_p2 <= (grp_fu_431_p2 and and_ln42_1_fu_806_p2);
    and_ln53_fu_872_p2 <= (or_ln53_fu_860_p2 and or_ln53_1_fu_866_p2);
    and_ln60_1_fu_954_p2 <= (or_ln60_1_fu_950_p2 and grp_fu_426_p2);
    and_ln60_fu_914_p2 <= (or_ln60_fu_908_p2 and grp_fu_426_p2);
    and_ln65_fu_994_p2 <= (or_ln65_fu_990_p2 and grp_fu_426_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state80 <= ap_CS_fsm(79);
    ap_CS_fsm_state81 <= ap_CS_fsm(80);
    ap_CS_fsm_state82 <= ap_CS_fsm(81);
    ap_CS_fsm_state83 <= ap_CS_fsm(82);
    ap_CS_fsm_state84 <= ap_CS_fsm(83);
    ap_CS_fsm_state85 <= ap_CS_fsm(84);
    ap_CS_fsm_state86 <= ap_CS_fsm(85);
    ap_CS_fsm_state87 <= ap_CS_fsm(86);
    ap_CS_fsm_state88 <= ap_CS_fsm(87);
    ap_CS_fsm_state89 <= ap_CS_fsm(88);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_CS_fsm_state90 <= ap_CS_fsm(89);
    ap_CS_fsm_state91 <= ap_CS_fsm(90);
    ap_CS_fsm_state92 <= ap_CS_fsm(91);
    ap_CS_fsm_state93 <= ap_CS_fsm(92);
    ap_CS_fsm_state97 <= ap_CS_fsm(96);

    ap_block_state97_assign_proc : process(res_bundle_BVALID, ap_predicate_op405_writeresp_state97)
    begin
                ap_block_state97 <= ((res_bundle_BVALID = ap_const_logic_0) and (ap_predicate_op405_writeresp_state97 = ap_const_boolean_1));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state97, res_bundle_BVALID, ap_predicate_op405_writeresp_state97)
    begin
        if ((not(((res_bundle_BVALID = ap_const_logic_0) and (ap_predicate_op405_writeresp_state97 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_CS_fsm_state97))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_0_phi_fu_322_p8_assign_proc : process(ap_CS_fsm_state97, and_ln42_reg_1174, and_ln53_reg_1204, and_ln60_reg_1240, and_ln60_1_reg_1254, and_ln65_reg_1268, p_0_reg_318)
    begin
        if (((ap_const_lv1_0 = and_ln60_1_reg_1254) and (ap_const_lv1_0 = and_ln60_reg_1240) and (ap_const_lv1_0 = and_ln53_reg_1204) and (ap_const_lv1_0 = and_ln42_reg_1174) and (ap_const_logic_1 = ap_CS_fsm_state97))) then 
            ap_phi_mux_p_0_phi_fu_322_p8 <= and_ln65_reg_1268;
        else 
            ap_phi_mux_p_0_phi_fu_322_p8 <= p_0_reg_318;
        end if; 
    end process;


    ap_predicate_op405_writeresp_state97_assign_proc : process(and_ln42_reg_1174, and_ln53_reg_1204, and_ln60_reg_1240, and_ln60_1_reg_1254)
    begin
                ap_predicate_op405_writeresp_state97 <= ((ap_const_lv1_0 = and_ln60_1_reg_1254) and (ap_const_lv1_0 = and_ln60_reg_1240) and (ap_const_lv1_0 = and_ln53_reg_1204) and (ap_const_lv1_0 = and_ln42_reg_1174));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state97, res_bundle_BVALID, ap_predicate_op405_writeresp_state97)
    begin
        if ((not(((res_bundle_BVALID = ap_const_logic_0) and (ap_predicate_op405_writeresp_state97 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_CS_fsm_state97))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bitcast_ln42_fu_770_p1 <= reg_466;
    bitcast_ln53_fu_830_p1 <= reg_451;
    bitcast_ln60_1_fu_920_p1 <= reg_477;
    bitcast_ln60_fu_878_p1 <= reg_483;
    bitcast_ln65_fu_960_p1 <= reg_451;
    empty_4_fu_698_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(u1_reg_1005),64));
    empty_5_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t1_reg_1010),64));
    empty_fu_689_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(v1_reg_1000),64));
    grp_crossProduct_1_fu_335_ap_start <= grp_crossProduct_1_fu_335_ap_start_reg;
    grp_dotProduct_2_fu_347_ap_start <= grp_dotProduct_2_fu_347_ap_start_reg;

    grp_fu_385_ce_assign_proc : process(ap_CS_fsm_state68, res_bundle_BVALID, ap_CS_fsm_state16, ap_CS_fsm_state33, ap_CS_fsm_state21, ap_CS_fsm_state38, ap_CS_fsm_state56, ap_CS_fsm_state82, ap_CS_fsm_state87, ap_CS_fsm_state72, ap_CS_fsm_state12, ap_CS_fsm_state17, ap_CS_fsm_state29, ap_CS_fsm_state34, ap_CS_fsm_state52, ap_CS_fsm_state78, ap_CS_fsm_state83, ap_CS_fsm_state13, ap_CS_fsm_state30, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state12) or ((res_bundle_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state68)))) then 
            grp_fu_385_ce <= ap_const_logic_1;
        else 
            grp_fu_385_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_385_opcode_assign_proc : process(ap_CS_fsm_state68, res_bundle_BVALID, and_ln60_fu_914_p2, ap_CS_fsm_state12, ap_CS_fsm_state17, ap_CS_fsm_state29, ap_CS_fsm_state34, ap_CS_fsm_state52, ap_CS_fsm_state78, ap_CS_fsm_state83)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            grp_fu_385_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state12) or ((res_bundle_BVALID = ap_const_logic_1) and (ap_const_lv1_0 = and_ln60_fu_914_p2) and (ap_const_logic_1 = ap_CS_fsm_state68)))) then 
            grp_fu_385_opcode <= ap_const_lv2_0;
        else 
            grp_fu_385_opcode <= "XX";
        end if; 
    end process;


    grp_fu_385_p0_assign_proc : process(ap_CS_fsm_state68, reg_451, reg_466, reg_477, reg_483, ap_CS_fsm_state12, ap_CS_fsm_state17, ap_CS_fsm_state29, ap_CS_fsm_state34, ap_CS_fsm_state52, ap_CS_fsm_state78, ap_CS_fsm_state83)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            grp_fu_385_p0 <= reg_483;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_385_p0 <= reg_477;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            grp_fu_385_p0 <= reg_466;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            grp_fu_385_p0 <= reg_451;
        else 
            grp_fu_385_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_385_p1_assign_proc : process(ap_CS_fsm_state68, reg_451, reg_461, reg_483, reg_491, ap_CS_fsm_state12, ap_CS_fsm_state17, ap_CS_fsm_state29, ap_CS_fsm_state34, ap_CS_fsm_state52, ap_CS_fsm_state78, ap_CS_fsm_state83)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            grp_fu_385_p1 <= reg_491;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            grp_fu_385_p1 <= reg_483;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            grp_fu_385_p1 <= reg_451;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            grp_fu_385_p1 <= reg_461;
        else 
            grp_fu_385_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_397_ce_assign_proc : process(ap_CS_fsm_state62, ap_CS_fsm_state42, ap_CS_fsm_state48, ap_CS_fsm_state91, res_bundle_AWREADY, res_bundle_BVALID, ap_CS_fsm_state11, ap_CS_fsm_state16, ap_CS_fsm_state28, ap_CS_fsm_state33, ap_CS_fsm_state77, ap_CS_fsm_state51, ap_CS_fsm_state74, ap_CS_fsm_state8, ap_CS_fsm_state13, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state39, ap_CS_fsm_state59, ap_CS_fsm_state88, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state89, ap_CS_fsm_state90)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((res_bundle_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state91)) or ((res_bundle_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((res_bundle_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((res_bundle_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state62)))) then 
            grp_fu_397_ce <= ap_const_logic_1;
        else 
            grp_fu_397_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_397_p0_assign_proc : process(ap_CS_fsm_state48, reg_466, v0v1_x_reg_1102, v0v1_z_reg_1116, v0v2_x_reg_1123, tvec_x_reg_1178, tvec_y_reg_1185, tvec_z_reg_1192, tmp_19_reg_1235, ap_CS_fsm_state74, ap_CS_fsm_state8, ap_CS_fsm_state13, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state39, ap_CS_fsm_state59, ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_fu_397_p0 <= v0v2_x_reg_1123;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_fu_397_p0 <= tmp_19_reg_1235;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_397_p0 <= tvec_y_reg_1185;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state39))) then 
            grp_fu_397_p0 <= reg_466;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_fu_397_p0 <= tvec_z_reg_1192;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_397_p0 <= tvec_x_reg_1178;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_397_p0 <= v0v1_z_reg_1116;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_397_p0 <= v0v1_x_reg_1102;
        else 
            grp_fu_397_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_397_p1_assign_proc : process(ap_CS_fsm_state48, reg_466, v0v1_z_reg_1116, pvec_x_reg_1141, pvec_z_reg_1151, invDet_reg_1199, ap_CS_fsm_state74, ap_CS_fsm_state8, ap_CS_fsm_state13, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state39, ap_CS_fsm_state59, ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_fu_397_p1 <= reg_466;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_397_p1 <= v0v1_z_reg_1116;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state39))) then 
            grp_fu_397_p1 <= invDet_reg_1199;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            grp_fu_397_p1 <= pvec_z_reg_1151;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            grp_fu_397_p1 <= pvec_x_reg_1141;
        else 
            grp_fu_397_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_401_ce_assign_proc : process(ap_CS_fsm_state48, res_bundle_BVALID, ap_CS_fsm_state11, ap_CS_fsm_state28, ap_CS_fsm_state77, ap_CS_fsm_state51, ap_CS_fsm_state74, ap_CS_fsm_state8, ap_CS_fsm_state25, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state75, ap_CS_fsm_state76)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((res_bundle_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48)))) then 
            grp_fu_401_ce <= ap_const_logic_1;
        else 
            grp_fu_401_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_401_p0_assign_proc : process(ap_CS_fsm_state48, v0v1_y_reg_1109, v0v2_y_reg_1129, tvec_y_reg_1185, tvec_z_reg_1192, ap_CS_fsm_state74, ap_CS_fsm_state8, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_fu_401_p0 <= v0v2_y_reg_1129;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_401_p0 <= tvec_z_reg_1192;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_401_p0 <= tvec_y_reg_1185;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_401_p0 <= v0v1_y_reg_1109;
        else 
            grp_fu_401_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_401_p1_assign_proc : process(ap_CS_fsm_state48, v0v1_y_reg_1109, pvec_y_reg_1146, qvec_y_reg_1223, ap_CS_fsm_state74, ap_CS_fsm_state8, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_fu_401_p1 <= qvec_y_reg_1223;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_401_p1 <= v0v1_y_reg_1109;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            grp_fu_401_p1 <= pvec_y_reg_1146;
        else 
            grp_fu_401_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_405_ce_assign_proc : process(ap_CS_fsm_state48, res_bundle_BVALID, ap_CS_fsm_state77, ap_CS_fsm_state51, ap_CS_fsm_state74, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state75, ap_CS_fsm_state76)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or ((res_bundle_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48)))) then 
            grp_fu_405_ce <= ap_const_logic_1;
        else 
            grp_fu_405_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_405_p0_assign_proc : process(ap_CS_fsm_state48, v0v2_z_reg_1135, tvec_z_reg_1192, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_fu_405_p0 <= v0v2_z_reg_1135;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_405_p0 <= tvec_z_reg_1192;
        else 
            grp_fu_405_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_405_p1_assign_proc : process(ap_CS_fsm_state48, v0v1_x_reg_1102, qvec_z_reg_1229, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_fu_405_p1 <= qvec_z_reg_1229;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_405_p1 <= v0v1_x_reg_1102;
        else 
            grp_fu_405_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_409_ce_assign_proc : process(ap_CS_fsm_state48, res_bundle_BVALID, ap_CS_fsm_state51, ap_CS_fsm_state49, ap_CS_fsm_state50)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or ((res_bundle_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48)))) then 
            grp_fu_409_ce <= ap_const_logic_1;
        else 
            grp_fu_409_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_413_ce_assign_proc : process(ap_CS_fsm_state48, res_bundle_BVALID, ap_CS_fsm_state51, ap_CS_fsm_state49, ap_CS_fsm_state50)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or ((res_bundle_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48)))) then 
            grp_fu_413_ce <= ap_const_logic_1;
        else 
            grp_fu_413_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_417_ce_assign_proc : process(ap_CS_fsm_state48, res_bundle_BVALID, ap_CS_fsm_state51, ap_CS_fsm_state49, ap_CS_fsm_state50)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or ((res_bundle_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48)))) then 
            grp_fu_417_ce <= ap_const_logic_1;
        else 
            grp_fu_417_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_421_ce_assign_proc : process(ap_CS_fsm_state28, ap_CS_fsm_state33, ap_CS_fsm_state38, ap_CS_fsm_state23, ap_CS_fsm_state24, grp_operator_sub_fu_371_ap_done, ap_CS_fsm_state29, ap_CS_fsm_state34, ap_CS_fsm_state25, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state26, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state29) or ((grp_operator_sub_fu_371_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24)))) then 
            grp_fu_421_ce <= ap_const_logic_1;
        else 
            grp_fu_421_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_426_ce_assign_proc : process(ap_CS_fsm_state68, ap_CS_fsm_state48, ap_CS_fsm_state92, res_bundle_WREADY, res_bundle_BVALID, ap_CS_fsm_state23, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state93, ap_CS_fsm_state22, ap_CS_fsm_state47, ap_CS_fsm_state67)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state22) or ((res_bundle_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state92)) or ((res_bundle_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((res_bundle_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state68)))) then 
            grp_fu_426_ce <= ap_const_logic_1;
        else 
            grp_fu_426_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_426_opcode_assign_proc : process(ap_CS_fsm_state92, ap_CS_fsm_state73, ap_CS_fsm_state22, ap_CS_fsm_state47, ap_CS_fsm_state67)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state47))) then 
            grp_fu_426_opcode <= ap_const_lv5_4;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            grp_fu_426_opcode <= ap_const_lv5_2;
        else 
            grp_fu_426_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_426_p0_assign_proc : process(ap_CS_fsm_state92, reg_451, reg_466, reg_477, reg_483, ap_CS_fsm_state73, ap_CS_fsm_state22, ap_CS_fsm_state47, ap_CS_fsm_state67)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            grp_fu_426_p0 <= reg_477;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            grp_fu_426_p0 <= reg_483;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state47))) then 
            grp_fu_426_p0 <= reg_451;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_426_p0 <= reg_466;
        else 
            grp_fu_426_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_426_p1_assign_proc : process(ap_CS_fsm_state92, ap_CS_fsm_state73, ap_CS_fsm_state22, ap_CS_fsm_state47, ap_CS_fsm_state67)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            grp_fu_426_p1 <= ap_const_lv32_3F800000;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state47))) then 
            grp_fu_426_p1 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_426_p1 <= ap_const_lv32_B22BCC77;
        else 
            grp_fu_426_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_431_ce_assign_proc : process(ap_CS_fsm_state48, res_bundle_BVALID, ap_CS_fsm_state23, ap_CS_fsm_state22, ap_CS_fsm_state47)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state22) or ((res_bundle_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48)))) then 
            grp_fu_431_ce <= ap_const_logic_1;
        else 
            grp_fu_431_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_431_opcode_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_fu_431_opcode <= ap_const_lv5_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_431_opcode <= ap_const_lv5_4;
        else 
            grp_fu_431_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_431_p0_assign_proc : process(reg_451, reg_466, ap_CS_fsm_state22, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_fu_431_p0 <= reg_451;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_431_p0 <= reg_466;
        else 
            grp_fu_431_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_431_p1_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_fu_431_p1 <= ap_const_lv32_3F800000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_431_p1 <= ap_const_lv32_322BCC77;
        else 
            grp_fu_431_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_operator_1_fu_359_Vec3_float_x_offset_assign_proc : process(v2_x1_reg_1025, v1_x1_reg_1040, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_operator_1_fu_359_Vec3_float_x_offset <= v2_x1_reg_1025;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_operator_1_fu_359_Vec3_float_x_offset <= v1_x1_reg_1040;
        else 
            grp_operator_1_fu_359_Vec3_float_x_offset <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_operator_1_fu_359_Vec3_float_y_offset_assign_proc : process(v2_y1_reg_1020, v1_y1_reg_1035, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_operator_1_fu_359_Vec3_float_y_offset <= v2_y1_reg_1020;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_operator_1_fu_359_Vec3_float_y_offset <= v1_y1_reg_1035;
        else 
            grp_operator_1_fu_359_Vec3_float_y_offset <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_operator_1_fu_359_Vec3_float_z_offset_assign_proc : process(v2_z1_reg_1015, v1_z1_reg_1030, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_operator_1_fu_359_Vec3_float_z_offset <= v2_z1_reg_1015;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_operator_1_fu_359_Vec3_float_z_offset <= v1_z1_reg_1030;
        else 
            grp_operator_1_fu_359_Vec3_float_z_offset <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_operator_1_fu_359_ap_start <= grp_operator_1_fu_359_ap_start_reg;
    grp_operator_sub_fu_371_ap_start <= grp_operator_sub_fu_371_ap_start_reg;
    icmp_ln42_1_fu_794_p2 <= "1" when (trunc_ln42_fu_784_p1 = ap_const_lv23_0) else "0";
    icmp_ln42_fu_788_p2 <= "0" when (tmp_fu_774_p4 = ap_const_lv8_FF) else "1";
    icmp_ln53_1_fu_854_p2 <= "1" when (trunc_ln53_fu_844_p1 = ap_const_lv23_0) else "0";
    icmp_ln53_fu_848_p2 <= "0" when (tmp_5_fu_834_p4 = ap_const_lv8_FF) else "1";
    icmp_ln60_1_fu_902_p2 <= "1" when (trunc_ln60_fu_892_p1 = ap_const_lv23_0) else "0";
    icmp_ln60_2_fu_938_p2 <= "0" when (tmp_14_fu_924_p4 = ap_const_lv8_FF) else "1";
    icmp_ln60_3_fu_944_p2 <= "1" when (trunc_ln60_1_fu_934_p1 = ap_const_lv23_0) else "0";
    icmp_ln60_fu_896_p2 <= "0" when (tmp_12_fu_882_p4 = ap_const_lv8_FF) else "1";
    icmp_ln65_1_fu_984_p2 <= "1" when (trunc_ln65_fu_974_p1 = ap_const_lv23_0) else "0";
    icmp_ln65_fu_978_p2 <= "0" when (tmp_16_fu_964_p4 = ap_const_lv8_FF) else "1";
    or_ln42_fu_800_p2 <= (icmp_ln42_fu_788_p2 or icmp_ln42_1_fu_794_p2);
    or_ln53_1_fu_866_p2 <= (grp_fu_431_p2 or grp_fu_426_p2);
    or_ln53_fu_860_p2 <= (icmp_ln53_fu_848_p2 or icmp_ln53_1_fu_854_p2);
    or_ln60_1_fu_950_p2 <= (icmp_ln60_3_reg_1249 or icmp_ln60_2_reg_1244);
    or_ln60_fu_908_p2 <= (icmp_ln60_fu_896_p2 or icmp_ln60_1_fu_902_p2);
    or_ln65_fu_990_p2 <= (icmp_ln65_reg_1258 or icmp_ln65_1_reg_1263);

    ray_bundle_ARADDR_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state23, and_ln42_fu_812_p2, ap_CS_fsm_state24, ap_CS_fsm_state58, grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARADDR, grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARADDR, grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARADDR, ap_CS_fsm_state6, ap_CS_fsm_state57)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or ((ap_const_lv1_0 = and_ln42_fu_812_p2) and (ap_const_logic_1 = ap_CS_fsm_state23)))) then 
            ray_bundle_ARADDR <= grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57))) then 
            ray_bundle_ARADDR <= grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ray_bundle_ARADDR <= grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARADDR;
        else 
            ray_bundle_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ray_bundle_ARBURST_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state23, and_ln42_fu_812_p2, ap_CS_fsm_state24, ap_CS_fsm_state58, grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARBURST, grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARBURST, grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARBURST, ap_CS_fsm_state6, ap_CS_fsm_state57)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or ((ap_const_lv1_0 = and_ln42_fu_812_p2) and (ap_const_logic_1 = ap_CS_fsm_state23)))) then 
            ray_bundle_ARBURST <= grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57))) then 
            ray_bundle_ARBURST <= grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ray_bundle_ARBURST <= grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARBURST;
        else 
            ray_bundle_ARBURST <= "XX";
        end if; 
    end process;


    ray_bundle_ARCACHE_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state23, and_ln42_fu_812_p2, ap_CS_fsm_state24, ap_CS_fsm_state58, grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARCACHE, grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARCACHE, grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARCACHE, ap_CS_fsm_state6, ap_CS_fsm_state57)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or ((ap_const_lv1_0 = and_ln42_fu_812_p2) and (ap_const_logic_1 = ap_CS_fsm_state23)))) then 
            ray_bundle_ARCACHE <= grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57))) then 
            ray_bundle_ARCACHE <= grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ray_bundle_ARCACHE <= grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARCACHE;
        else 
            ray_bundle_ARCACHE <= "XXXX";
        end if; 
    end process;


    ray_bundle_ARID_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state23, and_ln42_fu_812_p2, ap_CS_fsm_state24, ap_CS_fsm_state58, grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARID, grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARID, grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARID, ap_CS_fsm_state6, ap_CS_fsm_state57)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or ((ap_const_lv1_0 = and_ln42_fu_812_p2) and (ap_const_logic_1 = ap_CS_fsm_state23)))) then 
            ray_bundle_ARID <= grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57))) then 
            ray_bundle_ARID <= grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ray_bundle_ARID <= grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARID;
        else 
            ray_bundle_ARID <= "X";
        end if; 
    end process;


    ray_bundle_ARLEN_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state23, and_ln42_fu_812_p2, ap_CS_fsm_state24, ap_CS_fsm_state58, grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARLEN, grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARLEN, grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARLEN, ap_CS_fsm_state6, ap_CS_fsm_state57)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or ((ap_const_lv1_0 = and_ln42_fu_812_p2) and (ap_const_logic_1 = ap_CS_fsm_state23)))) then 
            ray_bundle_ARLEN <= grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57))) then 
            ray_bundle_ARLEN <= grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ray_bundle_ARLEN <= grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARLEN;
        else 
            ray_bundle_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ray_bundle_ARLOCK_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state23, and_ln42_fu_812_p2, ap_CS_fsm_state24, ap_CS_fsm_state58, grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARLOCK, grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARLOCK, grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARLOCK, ap_CS_fsm_state6, ap_CS_fsm_state57)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or ((ap_const_lv1_0 = and_ln42_fu_812_p2) and (ap_const_logic_1 = ap_CS_fsm_state23)))) then 
            ray_bundle_ARLOCK <= grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57))) then 
            ray_bundle_ARLOCK <= grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ray_bundle_ARLOCK <= grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARLOCK;
        else 
            ray_bundle_ARLOCK <= "XX";
        end if; 
    end process;


    ray_bundle_ARPROT_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state23, and_ln42_fu_812_p2, ap_CS_fsm_state24, ap_CS_fsm_state58, grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARPROT, grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARPROT, grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARPROT, ap_CS_fsm_state6, ap_CS_fsm_state57)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or ((ap_const_lv1_0 = and_ln42_fu_812_p2) and (ap_const_logic_1 = ap_CS_fsm_state23)))) then 
            ray_bundle_ARPROT <= grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57))) then 
            ray_bundle_ARPROT <= grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ray_bundle_ARPROT <= grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARPROT;
        else 
            ray_bundle_ARPROT <= "XXX";
        end if; 
    end process;


    ray_bundle_ARQOS_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state23, and_ln42_fu_812_p2, ap_CS_fsm_state24, ap_CS_fsm_state58, grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARQOS, grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARQOS, grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARQOS, ap_CS_fsm_state6, ap_CS_fsm_state57)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or ((ap_const_lv1_0 = and_ln42_fu_812_p2) and (ap_const_logic_1 = ap_CS_fsm_state23)))) then 
            ray_bundle_ARQOS <= grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57))) then 
            ray_bundle_ARQOS <= grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ray_bundle_ARQOS <= grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARQOS;
        else 
            ray_bundle_ARQOS <= "XXXX";
        end if; 
    end process;


    ray_bundle_ARREGION_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state23, and_ln42_fu_812_p2, ap_CS_fsm_state24, ap_CS_fsm_state58, grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARREGION, grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARREGION, grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARREGION, ap_CS_fsm_state6, ap_CS_fsm_state57)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or ((ap_const_lv1_0 = and_ln42_fu_812_p2) and (ap_const_logic_1 = ap_CS_fsm_state23)))) then 
            ray_bundle_ARREGION <= grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57))) then 
            ray_bundle_ARREGION <= grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ray_bundle_ARREGION <= grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARREGION;
        else 
            ray_bundle_ARREGION <= "XXXX";
        end if; 
    end process;


    ray_bundle_ARSIZE_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state23, and_ln42_fu_812_p2, ap_CS_fsm_state24, ap_CS_fsm_state58, grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARSIZE, grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARSIZE, grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARSIZE, ap_CS_fsm_state6, ap_CS_fsm_state57)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or ((ap_const_lv1_0 = and_ln42_fu_812_p2) and (ap_const_logic_1 = ap_CS_fsm_state23)))) then 
            ray_bundle_ARSIZE <= grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57))) then 
            ray_bundle_ARSIZE <= grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ray_bundle_ARSIZE <= grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARSIZE;
        else 
            ray_bundle_ARSIZE <= "XXX";
        end if; 
    end process;


    ray_bundle_ARUSER_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state23, and_ln42_fu_812_p2, ap_CS_fsm_state24, ap_CS_fsm_state58, grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARUSER, grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARUSER, grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARUSER, ap_CS_fsm_state6, ap_CS_fsm_state57)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or ((ap_const_lv1_0 = and_ln42_fu_812_p2) and (ap_const_logic_1 = ap_CS_fsm_state23)))) then 
            ray_bundle_ARUSER <= grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57))) then 
            ray_bundle_ARUSER <= grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ray_bundle_ARUSER <= grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARUSER;
        else 
            ray_bundle_ARUSER <= "X";
        end if; 
    end process;


    ray_bundle_ARVALID_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state23, and_ln42_fu_812_p2, ap_CS_fsm_state24, ap_CS_fsm_state58, grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARVALID, grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARVALID, grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARVALID, ap_CS_fsm_state6, ap_CS_fsm_state57)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or ((ap_const_lv1_0 = and_ln42_fu_812_p2) and (ap_const_logic_1 = ap_CS_fsm_state23)))) then 
            ray_bundle_ARVALID <= grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57))) then 
            ray_bundle_ARVALID <= grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ray_bundle_ARVALID <= grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARVALID;
        else 
            ray_bundle_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    ray_bundle_RREADY_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state23, and_ln42_fu_812_p2, ap_CS_fsm_state24, ap_CS_fsm_state58, grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_RREADY, grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_RREADY, grp_operator_sub_fu_371_m_axi_Vec3_float_x_RREADY, ap_CS_fsm_state6, ap_CS_fsm_state57)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or ((ap_const_lv1_0 = and_ln42_fu_812_p2) and (ap_const_logic_1 = ap_CS_fsm_state23)))) then 
            ray_bundle_RREADY <= grp_operator_sub_fu_371_m_axi_Vec3_float_x_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57))) then 
            ray_bundle_RREADY <= grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ray_bundle_RREADY <= grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_RREADY;
        else 
            ray_bundle_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    res_bundle_AWADDR_assign_proc : process(ap_CS_fsm_state62, ap_CS_fsm_state42, ap_CS_fsm_state91, res_bundle_AWREADY, res_bundle_addr_reg_1156, res_bundle_addr_1_reg_1162, res_bundle_addr_2_reg_1168)
    begin
        if ((res_bundle_AWREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
                res_bundle_AWADDR <= res_bundle_addr_2_reg_1168;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
                res_bundle_AWADDR <= res_bundle_addr_reg_1156;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                res_bundle_AWADDR <= res_bundle_addr_1_reg_1162;
            else 
                res_bundle_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            res_bundle_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    res_bundle_AWVALID_assign_proc : process(ap_CS_fsm_state62, ap_CS_fsm_state42, ap_CS_fsm_state91, res_bundle_AWREADY)
    begin
        if ((((res_bundle_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state91)) or ((res_bundle_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((res_bundle_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state62)))) then 
            res_bundle_AWVALID <= ap_const_logic_1;
        else 
            res_bundle_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    res_bundle_BREADY_assign_proc : process(ap_CS_fsm_state68, ap_CS_fsm_state48, ap_CS_fsm_state97, res_bundle_BVALID, ap_predicate_op405_writeresp_state97)
    begin
        if (((not(((res_bundle_BVALID = ap_const_logic_0) and (ap_predicate_op405_writeresp_state97 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_CS_fsm_state97) and (ap_predicate_op405_writeresp_state97 = ap_const_boolean_1)) or ((res_bundle_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((res_bundle_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state68)))) then 
            res_bundle_BREADY <= ap_const_logic_1;
        else 
            res_bundle_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    res_bundle_WDATA_assign_proc : process(ap_CS_fsm_state63, ap_CS_fsm_state43, ap_CS_fsm_state92, reg_451, reg_483)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            res_bundle_WDATA <= reg_483;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            res_bundle_WDATA <= reg_451;
        else 
            res_bundle_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    res_bundle_WVALID_assign_proc : process(ap_CS_fsm_state63, ap_CS_fsm_state43, ap_CS_fsm_state92, res_bundle_WREADY)
    begin
        if ((((res_bundle_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state92)) or ((res_bundle_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state43)) or ((res_bundle_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state63)))) then 
            res_bundle_WVALID <= ap_const_logic_1;
        else 
            res_bundle_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    res_bundle_blk_n_AW_assign_proc : process(m_axi_res_bundle_AWREADY, ap_CS_fsm_state62, ap_CS_fsm_state42, ap_CS_fsm_state91)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state62))) then 
            res_bundle_blk_n_AW <= m_axi_res_bundle_AWREADY;
        else 
            res_bundle_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    res_bundle_blk_n_B_assign_proc : process(m_axi_res_bundle_BVALID, ap_CS_fsm_state68, ap_CS_fsm_state48, ap_CS_fsm_state97, and_ln42_reg_1174, and_ln53_reg_1204, and_ln60_reg_1240, and_ln60_1_reg_1254)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state68) or ((ap_const_lv1_0 = and_ln60_1_reg_1254) and (ap_const_lv1_0 = and_ln60_reg_1240) and (ap_const_lv1_0 = and_ln53_reg_1204) and (ap_const_lv1_0 = and_ln42_reg_1174) and (ap_const_logic_1 = ap_CS_fsm_state97)))) then 
            res_bundle_blk_n_B <= m_axi_res_bundle_BVALID;
        else 
            res_bundle_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    res_bundle_blk_n_W_assign_proc : process(m_axi_res_bundle_WREADY, ap_CS_fsm_state63, ap_CS_fsm_state43, ap_CS_fsm_state92)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state63))) then 
            res_bundle_blk_n_W <= m_axi_res_bundle_WREADY;
        else 
            res_bundle_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    tmp_12_fu_882_p4 <= bitcast_ln60_fu_878_p1(30 downto 23);
    tmp_14_fu_924_p4 <= bitcast_ln60_1_fu_920_p1(30 downto 23);
    tmp_16_fu_964_p4 <= bitcast_ln65_fu_960_p1(30 downto 23);
    tmp_5_fu_834_p4 <= bitcast_ln53_fu_830_p1(30 downto 23);
    tmp_fu_774_p4 <= bitcast_ln42_fu_770_p1(30 downto 23);

    triangle_bundle_ARADDR_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state23, and_ln42_fu_812_p2, ap_CS_fsm_state24, grp_operator_1_fu_359_m_axi_Vec3_float_x_ARADDR, grp_operator_sub_fu_371_m_axi_v_x_ARADDR, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or ((ap_const_lv1_0 = and_ln42_fu_812_p2) and (ap_const_logic_1 = ap_CS_fsm_state23)))) then 
            triangle_bundle_ARADDR <= grp_operator_sub_fu_371_m_axi_v_x_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            triangle_bundle_ARADDR <= grp_operator_1_fu_359_m_axi_Vec3_float_x_ARADDR;
        else 
            triangle_bundle_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    triangle_bundle_ARBURST_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state23, and_ln42_fu_812_p2, ap_CS_fsm_state24, grp_operator_1_fu_359_m_axi_Vec3_float_x_ARBURST, grp_operator_sub_fu_371_m_axi_v_x_ARBURST, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or ((ap_const_lv1_0 = and_ln42_fu_812_p2) and (ap_const_logic_1 = ap_CS_fsm_state23)))) then 
            triangle_bundle_ARBURST <= grp_operator_sub_fu_371_m_axi_v_x_ARBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            triangle_bundle_ARBURST <= grp_operator_1_fu_359_m_axi_Vec3_float_x_ARBURST;
        else 
            triangle_bundle_ARBURST <= "XX";
        end if; 
    end process;


    triangle_bundle_ARCACHE_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state23, and_ln42_fu_812_p2, ap_CS_fsm_state24, grp_operator_1_fu_359_m_axi_Vec3_float_x_ARCACHE, grp_operator_sub_fu_371_m_axi_v_x_ARCACHE, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or ((ap_const_lv1_0 = and_ln42_fu_812_p2) and (ap_const_logic_1 = ap_CS_fsm_state23)))) then 
            triangle_bundle_ARCACHE <= grp_operator_sub_fu_371_m_axi_v_x_ARCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            triangle_bundle_ARCACHE <= grp_operator_1_fu_359_m_axi_Vec3_float_x_ARCACHE;
        else 
            triangle_bundle_ARCACHE <= "XXXX";
        end if; 
    end process;


    triangle_bundle_ARID_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state23, and_ln42_fu_812_p2, ap_CS_fsm_state24, grp_operator_1_fu_359_m_axi_Vec3_float_x_ARID, grp_operator_sub_fu_371_m_axi_v_x_ARID, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or ((ap_const_lv1_0 = and_ln42_fu_812_p2) and (ap_const_logic_1 = ap_CS_fsm_state23)))) then 
            triangle_bundle_ARID <= grp_operator_sub_fu_371_m_axi_v_x_ARID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            triangle_bundle_ARID <= grp_operator_1_fu_359_m_axi_Vec3_float_x_ARID;
        else 
            triangle_bundle_ARID <= "X";
        end if; 
    end process;


    triangle_bundle_ARLEN_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state23, and_ln42_fu_812_p2, ap_CS_fsm_state24, grp_operator_1_fu_359_m_axi_Vec3_float_x_ARLEN, grp_operator_sub_fu_371_m_axi_v_x_ARLEN, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or ((ap_const_lv1_0 = and_ln42_fu_812_p2) and (ap_const_logic_1 = ap_CS_fsm_state23)))) then 
            triangle_bundle_ARLEN <= grp_operator_sub_fu_371_m_axi_v_x_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            triangle_bundle_ARLEN <= grp_operator_1_fu_359_m_axi_Vec3_float_x_ARLEN;
        else 
            triangle_bundle_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    triangle_bundle_ARLOCK_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state23, and_ln42_fu_812_p2, ap_CS_fsm_state24, grp_operator_1_fu_359_m_axi_Vec3_float_x_ARLOCK, grp_operator_sub_fu_371_m_axi_v_x_ARLOCK, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or ((ap_const_lv1_0 = and_ln42_fu_812_p2) and (ap_const_logic_1 = ap_CS_fsm_state23)))) then 
            triangle_bundle_ARLOCK <= grp_operator_sub_fu_371_m_axi_v_x_ARLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            triangle_bundle_ARLOCK <= grp_operator_1_fu_359_m_axi_Vec3_float_x_ARLOCK;
        else 
            triangle_bundle_ARLOCK <= "XX";
        end if; 
    end process;


    triangle_bundle_ARPROT_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state23, and_ln42_fu_812_p2, ap_CS_fsm_state24, grp_operator_1_fu_359_m_axi_Vec3_float_x_ARPROT, grp_operator_sub_fu_371_m_axi_v_x_ARPROT, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or ((ap_const_lv1_0 = and_ln42_fu_812_p2) and (ap_const_logic_1 = ap_CS_fsm_state23)))) then 
            triangle_bundle_ARPROT <= grp_operator_sub_fu_371_m_axi_v_x_ARPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            triangle_bundle_ARPROT <= grp_operator_1_fu_359_m_axi_Vec3_float_x_ARPROT;
        else 
            triangle_bundle_ARPROT <= "XXX";
        end if; 
    end process;


    triangle_bundle_ARQOS_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state23, and_ln42_fu_812_p2, ap_CS_fsm_state24, grp_operator_1_fu_359_m_axi_Vec3_float_x_ARQOS, grp_operator_sub_fu_371_m_axi_v_x_ARQOS, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or ((ap_const_lv1_0 = and_ln42_fu_812_p2) and (ap_const_logic_1 = ap_CS_fsm_state23)))) then 
            triangle_bundle_ARQOS <= grp_operator_sub_fu_371_m_axi_v_x_ARQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            triangle_bundle_ARQOS <= grp_operator_1_fu_359_m_axi_Vec3_float_x_ARQOS;
        else 
            triangle_bundle_ARQOS <= "XXXX";
        end if; 
    end process;


    triangle_bundle_ARREGION_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state23, and_ln42_fu_812_p2, ap_CS_fsm_state24, grp_operator_1_fu_359_m_axi_Vec3_float_x_ARREGION, grp_operator_sub_fu_371_m_axi_v_x_ARREGION, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or ((ap_const_lv1_0 = and_ln42_fu_812_p2) and (ap_const_logic_1 = ap_CS_fsm_state23)))) then 
            triangle_bundle_ARREGION <= grp_operator_sub_fu_371_m_axi_v_x_ARREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            triangle_bundle_ARREGION <= grp_operator_1_fu_359_m_axi_Vec3_float_x_ARREGION;
        else 
            triangle_bundle_ARREGION <= "XXXX";
        end if; 
    end process;


    triangle_bundle_ARSIZE_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state23, and_ln42_fu_812_p2, ap_CS_fsm_state24, grp_operator_1_fu_359_m_axi_Vec3_float_x_ARSIZE, grp_operator_sub_fu_371_m_axi_v_x_ARSIZE, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or ((ap_const_lv1_0 = and_ln42_fu_812_p2) and (ap_const_logic_1 = ap_CS_fsm_state23)))) then 
            triangle_bundle_ARSIZE <= grp_operator_sub_fu_371_m_axi_v_x_ARSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            triangle_bundle_ARSIZE <= grp_operator_1_fu_359_m_axi_Vec3_float_x_ARSIZE;
        else 
            triangle_bundle_ARSIZE <= "XXX";
        end if; 
    end process;


    triangle_bundle_ARUSER_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state23, and_ln42_fu_812_p2, ap_CS_fsm_state24, grp_operator_1_fu_359_m_axi_Vec3_float_x_ARUSER, grp_operator_sub_fu_371_m_axi_v_x_ARUSER, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or ((ap_const_lv1_0 = and_ln42_fu_812_p2) and (ap_const_logic_1 = ap_CS_fsm_state23)))) then 
            triangle_bundle_ARUSER <= grp_operator_sub_fu_371_m_axi_v_x_ARUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            triangle_bundle_ARUSER <= grp_operator_1_fu_359_m_axi_Vec3_float_x_ARUSER;
        else 
            triangle_bundle_ARUSER <= "X";
        end if; 
    end process;


    triangle_bundle_ARVALID_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state23, and_ln42_fu_812_p2, ap_CS_fsm_state24, grp_operator_1_fu_359_m_axi_Vec3_float_x_ARVALID, grp_operator_sub_fu_371_m_axi_v_x_ARVALID, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or ((ap_const_lv1_0 = and_ln42_fu_812_p2) and (ap_const_logic_1 = ap_CS_fsm_state23)))) then 
            triangle_bundle_ARVALID <= grp_operator_sub_fu_371_m_axi_v_x_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            triangle_bundle_ARVALID <= grp_operator_1_fu_359_m_axi_Vec3_float_x_ARVALID;
        else 
            triangle_bundle_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    triangle_bundle_RREADY_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state23, and_ln42_fu_812_p2, ap_CS_fsm_state24, grp_operator_1_fu_359_m_axi_Vec3_float_x_RREADY, grp_operator_sub_fu_371_m_axi_v_x_RREADY, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or ((ap_const_lv1_0 = and_ln42_fu_812_p2) and (ap_const_logic_1 = ap_CS_fsm_state23)))) then 
            triangle_bundle_RREADY <= grp_operator_sub_fu_371_m_axi_v_x_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            triangle_bundle_RREADY <= grp_operator_1_fu_359_m_axi_Vec3_float_x_RREADY;
        else 
            triangle_bundle_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln42_fu_784_p1 <= bitcast_ln42_fu_770_p1(23 - 1 downto 0);
    trunc_ln53_fu_844_p1 <= bitcast_ln53_fu_830_p1(23 - 1 downto 0);
    trunc_ln60_1_fu_934_p1 <= bitcast_ln60_1_fu_920_p1(23 - 1 downto 0);
    trunc_ln60_fu_892_p1 <= bitcast_ln60_fu_878_p1(23 - 1 downto 0);
    trunc_ln65_fu_974_p1 <= bitcast_ln65_fu_960_p1(23 - 1 downto 0);
end behav;
