// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="rayTI,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=133,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=60,HLS_SYN_FF=10115,HLS_SYN_LUT=15080,HLS_VERSION=2020_1}" *)

module rayTI (
        ap_clk,
        ap_rst_n,
        m_axi_ray_bundle_AWVALID,
        m_axi_ray_bundle_AWREADY,
        m_axi_ray_bundle_AWADDR,
        m_axi_ray_bundle_AWID,
        m_axi_ray_bundle_AWLEN,
        m_axi_ray_bundle_AWSIZE,
        m_axi_ray_bundle_AWBURST,
        m_axi_ray_bundle_AWLOCK,
        m_axi_ray_bundle_AWCACHE,
        m_axi_ray_bundle_AWPROT,
        m_axi_ray_bundle_AWQOS,
        m_axi_ray_bundle_AWREGION,
        m_axi_ray_bundle_AWUSER,
        m_axi_ray_bundle_WVALID,
        m_axi_ray_bundle_WREADY,
        m_axi_ray_bundle_WDATA,
        m_axi_ray_bundle_WSTRB,
        m_axi_ray_bundle_WLAST,
        m_axi_ray_bundle_WID,
        m_axi_ray_bundle_WUSER,
        m_axi_ray_bundle_ARVALID,
        m_axi_ray_bundle_ARREADY,
        m_axi_ray_bundle_ARADDR,
        m_axi_ray_bundle_ARID,
        m_axi_ray_bundle_ARLEN,
        m_axi_ray_bundle_ARSIZE,
        m_axi_ray_bundle_ARBURST,
        m_axi_ray_bundle_ARLOCK,
        m_axi_ray_bundle_ARCACHE,
        m_axi_ray_bundle_ARPROT,
        m_axi_ray_bundle_ARQOS,
        m_axi_ray_bundle_ARREGION,
        m_axi_ray_bundle_ARUSER,
        m_axi_ray_bundle_RVALID,
        m_axi_ray_bundle_RREADY,
        m_axi_ray_bundle_RDATA,
        m_axi_ray_bundle_RLAST,
        m_axi_ray_bundle_RID,
        m_axi_ray_bundle_RUSER,
        m_axi_ray_bundle_RRESP,
        m_axi_ray_bundle_BVALID,
        m_axi_ray_bundle_BREADY,
        m_axi_ray_bundle_BRESP,
        m_axi_ray_bundle_BID,
        m_axi_ray_bundle_BUSER,
        m_axi_triangle_bundle_AWVALID,
        m_axi_triangle_bundle_AWREADY,
        m_axi_triangle_bundle_AWADDR,
        m_axi_triangle_bundle_AWID,
        m_axi_triangle_bundle_AWLEN,
        m_axi_triangle_bundle_AWSIZE,
        m_axi_triangle_bundle_AWBURST,
        m_axi_triangle_bundle_AWLOCK,
        m_axi_triangle_bundle_AWCACHE,
        m_axi_triangle_bundle_AWPROT,
        m_axi_triangle_bundle_AWQOS,
        m_axi_triangle_bundle_AWREGION,
        m_axi_triangle_bundle_AWUSER,
        m_axi_triangle_bundle_WVALID,
        m_axi_triangle_bundle_WREADY,
        m_axi_triangle_bundle_WDATA,
        m_axi_triangle_bundle_WSTRB,
        m_axi_triangle_bundle_WLAST,
        m_axi_triangle_bundle_WID,
        m_axi_triangle_bundle_WUSER,
        m_axi_triangle_bundle_ARVALID,
        m_axi_triangle_bundle_ARREADY,
        m_axi_triangle_bundle_ARADDR,
        m_axi_triangle_bundle_ARID,
        m_axi_triangle_bundle_ARLEN,
        m_axi_triangle_bundle_ARSIZE,
        m_axi_triangle_bundle_ARBURST,
        m_axi_triangle_bundle_ARLOCK,
        m_axi_triangle_bundle_ARCACHE,
        m_axi_triangle_bundle_ARPROT,
        m_axi_triangle_bundle_ARQOS,
        m_axi_triangle_bundle_ARREGION,
        m_axi_triangle_bundle_ARUSER,
        m_axi_triangle_bundle_RVALID,
        m_axi_triangle_bundle_RREADY,
        m_axi_triangle_bundle_RDATA,
        m_axi_triangle_bundle_RLAST,
        m_axi_triangle_bundle_RID,
        m_axi_triangle_bundle_RUSER,
        m_axi_triangle_bundle_RRESP,
        m_axi_triangle_bundle_BVALID,
        m_axi_triangle_bundle_BREADY,
        m_axi_triangle_bundle_BRESP,
        m_axi_triangle_bundle_BID,
        m_axi_triangle_bundle_BUSER,
        m_axi_res_bundle_AWVALID,
        m_axi_res_bundle_AWREADY,
        m_axi_res_bundle_AWADDR,
        m_axi_res_bundle_AWID,
        m_axi_res_bundle_AWLEN,
        m_axi_res_bundle_AWSIZE,
        m_axi_res_bundle_AWBURST,
        m_axi_res_bundle_AWLOCK,
        m_axi_res_bundle_AWCACHE,
        m_axi_res_bundle_AWPROT,
        m_axi_res_bundle_AWQOS,
        m_axi_res_bundle_AWREGION,
        m_axi_res_bundle_AWUSER,
        m_axi_res_bundle_WVALID,
        m_axi_res_bundle_WREADY,
        m_axi_res_bundle_WDATA,
        m_axi_res_bundle_WSTRB,
        m_axi_res_bundle_WLAST,
        m_axi_res_bundle_WID,
        m_axi_res_bundle_WUSER,
        m_axi_res_bundle_ARVALID,
        m_axi_res_bundle_ARREADY,
        m_axi_res_bundle_ARADDR,
        m_axi_res_bundle_ARID,
        m_axi_res_bundle_ARLEN,
        m_axi_res_bundle_ARSIZE,
        m_axi_res_bundle_ARBURST,
        m_axi_res_bundle_ARLOCK,
        m_axi_res_bundle_ARCACHE,
        m_axi_res_bundle_ARPROT,
        m_axi_res_bundle_ARQOS,
        m_axi_res_bundle_ARREGION,
        m_axi_res_bundle_ARUSER,
        m_axi_res_bundle_RVALID,
        m_axi_res_bundle_RREADY,
        m_axi_res_bundle_RDATA,
        m_axi_res_bundle_RLAST,
        m_axi_res_bundle_RID,
        m_axi_res_bundle_RUSER,
        m_axi_res_bundle_RRESP,
        m_axi_res_bundle_BVALID,
        m_axi_res_bundle_BREADY,
        m_axi_res_bundle_BRESP,
        m_axi_res_bundle_BID,
        m_axi_res_bundle_BUSER,
        s_axi_ret_bundle_AWVALID,
        s_axi_ret_bundle_AWREADY,
        s_axi_ret_bundle_AWADDR,
        s_axi_ret_bundle_WVALID,
        s_axi_ret_bundle_WREADY,
        s_axi_ret_bundle_WDATA,
        s_axi_ret_bundle_WSTRB,
        s_axi_ret_bundle_ARVALID,
        s_axi_ret_bundle_ARREADY,
        s_axi_ret_bundle_ARADDR,
        s_axi_ret_bundle_RVALID,
        s_axi_ret_bundle_RREADY,
        s_axi_ret_bundle_RDATA,
        s_axi_ret_bundle_RRESP,
        s_axi_ret_bundle_BVALID,
        s_axi_ret_bundle_BREADY,
        s_axi_ret_bundle_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 97'd1;
parameter    ap_ST_fsm_state2 = 97'd2;
parameter    ap_ST_fsm_state3 = 97'd4;
parameter    ap_ST_fsm_state4 = 97'd8;
parameter    ap_ST_fsm_state5 = 97'd16;
parameter    ap_ST_fsm_state6 = 97'd32;
parameter    ap_ST_fsm_state7 = 97'd64;
parameter    ap_ST_fsm_state8 = 97'd128;
parameter    ap_ST_fsm_state9 = 97'd256;
parameter    ap_ST_fsm_state10 = 97'd512;
parameter    ap_ST_fsm_state11 = 97'd1024;
parameter    ap_ST_fsm_state12 = 97'd2048;
parameter    ap_ST_fsm_state13 = 97'd4096;
parameter    ap_ST_fsm_state14 = 97'd8192;
parameter    ap_ST_fsm_state15 = 97'd16384;
parameter    ap_ST_fsm_state16 = 97'd32768;
parameter    ap_ST_fsm_state17 = 97'd65536;
parameter    ap_ST_fsm_state18 = 97'd131072;
parameter    ap_ST_fsm_state19 = 97'd262144;
parameter    ap_ST_fsm_state20 = 97'd524288;
parameter    ap_ST_fsm_state21 = 97'd1048576;
parameter    ap_ST_fsm_state22 = 97'd2097152;
parameter    ap_ST_fsm_state23 = 97'd4194304;
parameter    ap_ST_fsm_state24 = 97'd8388608;
parameter    ap_ST_fsm_state25 = 97'd16777216;
parameter    ap_ST_fsm_state26 = 97'd33554432;
parameter    ap_ST_fsm_state27 = 97'd67108864;
parameter    ap_ST_fsm_state28 = 97'd134217728;
parameter    ap_ST_fsm_state29 = 97'd268435456;
parameter    ap_ST_fsm_state30 = 97'd536870912;
parameter    ap_ST_fsm_state31 = 97'd1073741824;
parameter    ap_ST_fsm_state32 = 97'd2147483648;
parameter    ap_ST_fsm_state33 = 97'd4294967296;
parameter    ap_ST_fsm_state34 = 97'd8589934592;
parameter    ap_ST_fsm_state35 = 97'd17179869184;
parameter    ap_ST_fsm_state36 = 97'd34359738368;
parameter    ap_ST_fsm_state37 = 97'd68719476736;
parameter    ap_ST_fsm_state38 = 97'd137438953472;
parameter    ap_ST_fsm_state39 = 97'd274877906944;
parameter    ap_ST_fsm_state40 = 97'd549755813888;
parameter    ap_ST_fsm_state41 = 97'd1099511627776;
parameter    ap_ST_fsm_state42 = 97'd2199023255552;
parameter    ap_ST_fsm_state43 = 97'd4398046511104;
parameter    ap_ST_fsm_state44 = 97'd8796093022208;
parameter    ap_ST_fsm_state45 = 97'd17592186044416;
parameter    ap_ST_fsm_state46 = 97'd35184372088832;
parameter    ap_ST_fsm_state47 = 97'd70368744177664;
parameter    ap_ST_fsm_state48 = 97'd140737488355328;
parameter    ap_ST_fsm_state49 = 97'd281474976710656;
parameter    ap_ST_fsm_state50 = 97'd562949953421312;
parameter    ap_ST_fsm_state51 = 97'd1125899906842624;
parameter    ap_ST_fsm_state52 = 97'd2251799813685248;
parameter    ap_ST_fsm_state53 = 97'd4503599627370496;
parameter    ap_ST_fsm_state54 = 97'd9007199254740992;
parameter    ap_ST_fsm_state55 = 97'd18014398509481984;
parameter    ap_ST_fsm_state56 = 97'd36028797018963968;
parameter    ap_ST_fsm_state57 = 97'd72057594037927936;
parameter    ap_ST_fsm_state58 = 97'd144115188075855872;
parameter    ap_ST_fsm_state59 = 97'd288230376151711744;
parameter    ap_ST_fsm_state60 = 97'd576460752303423488;
parameter    ap_ST_fsm_state61 = 97'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 97'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 97'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 97'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 97'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 97'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 97'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 97'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 97'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 97'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 97'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 97'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 97'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 97'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 97'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 97'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 97'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 97'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 97'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 97'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 97'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 97'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 97'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 97'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 97'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 97'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 97'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 97'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 97'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 97'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 97'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 97'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 97'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 97'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 97'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 97'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 97'd79228162514264337593543950336;
parameter    C_S_AXI_RET_BUNDLE_DATA_WIDTH = 32;
parameter    C_S_AXI_RET_BUNDLE_ADDR_WIDTH = 8;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_RAY_BUNDLE_ID_WIDTH = 1;
parameter    C_M_AXI_RAY_BUNDLE_ADDR_WIDTH = 32;
parameter    C_M_AXI_RAY_BUNDLE_DATA_WIDTH = 32;
parameter    C_M_AXI_RAY_BUNDLE_AWUSER_WIDTH = 1;
parameter    C_M_AXI_RAY_BUNDLE_ARUSER_WIDTH = 1;
parameter    C_M_AXI_RAY_BUNDLE_WUSER_WIDTH = 1;
parameter    C_M_AXI_RAY_BUNDLE_RUSER_WIDTH = 1;
parameter    C_M_AXI_RAY_BUNDLE_BUSER_WIDTH = 1;
parameter    C_M_AXI_RAY_BUNDLE_USER_VALUE = 0;
parameter    C_M_AXI_RAY_BUNDLE_PROT_VALUE = 0;
parameter    C_M_AXI_RAY_BUNDLE_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_TRIANGLE_BUNDLE_ID_WIDTH = 1;
parameter    C_M_AXI_TRIANGLE_BUNDLE_ADDR_WIDTH = 32;
parameter    C_M_AXI_TRIANGLE_BUNDLE_DATA_WIDTH = 32;
parameter    C_M_AXI_TRIANGLE_BUNDLE_AWUSER_WIDTH = 1;
parameter    C_M_AXI_TRIANGLE_BUNDLE_ARUSER_WIDTH = 1;
parameter    C_M_AXI_TRIANGLE_BUNDLE_WUSER_WIDTH = 1;
parameter    C_M_AXI_TRIANGLE_BUNDLE_RUSER_WIDTH = 1;
parameter    C_M_AXI_TRIANGLE_BUNDLE_BUSER_WIDTH = 1;
parameter    C_M_AXI_TRIANGLE_BUNDLE_USER_VALUE = 0;
parameter    C_M_AXI_TRIANGLE_BUNDLE_PROT_VALUE = 0;
parameter    C_M_AXI_TRIANGLE_BUNDLE_CACHE_VALUE = 3;
parameter    C_M_AXI_RES_BUNDLE_ID_WIDTH = 1;
parameter    C_M_AXI_RES_BUNDLE_ADDR_WIDTH = 32;
parameter    C_M_AXI_RES_BUNDLE_DATA_WIDTH = 32;
parameter    C_M_AXI_RES_BUNDLE_AWUSER_WIDTH = 1;
parameter    C_M_AXI_RES_BUNDLE_ARUSER_WIDTH = 1;
parameter    C_M_AXI_RES_BUNDLE_WUSER_WIDTH = 1;
parameter    C_M_AXI_RES_BUNDLE_RUSER_WIDTH = 1;
parameter    C_M_AXI_RES_BUNDLE_BUSER_WIDTH = 1;
parameter    C_M_AXI_RES_BUNDLE_USER_VALUE = 0;
parameter    C_M_AXI_RES_BUNDLE_PROT_VALUE = 0;
parameter    C_M_AXI_RES_BUNDLE_CACHE_VALUE = 3;

parameter C_S_AXI_RET_BUNDLE_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_RAY_BUNDLE_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_TRIANGLE_BUNDLE_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_RES_BUNDLE_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_ray_bundle_AWVALID;
input   m_axi_ray_bundle_AWREADY;
output  [C_M_AXI_RAY_BUNDLE_ADDR_WIDTH - 1:0] m_axi_ray_bundle_AWADDR;
output  [C_M_AXI_RAY_BUNDLE_ID_WIDTH - 1:0] m_axi_ray_bundle_AWID;
output  [7:0] m_axi_ray_bundle_AWLEN;
output  [2:0] m_axi_ray_bundle_AWSIZE;
output  [1:0] m_axi_ray_bundle_AWBURST;
output  [1:0] m_axi_ray_bundle_AWLOCK;
output  [3:0] m_axi_ray_bundle_AWCACHE;
output  [2:0] m_axi_ray_bundle_AWPROT;
output  [3:0] m_axi_ray_bundle_AWQOS;
output  [3:0] m_axi_ray_bundle_AWREGION;
output  [C_M_AXI_RAY_BUNDLE_AWUSER_WIDTH - 1:0] m_axi_ray_bundle_AWUSER;
output   m_axi_ray_bundle_WVALID;
input   m_axi_ray_bundle_WREADY;
output  [C_M_AXI_RAY_BUNDLE_DATA_WIDTH - 1:0] m_axi_ray_bundle_WDATA;
output  [C_M_AXI_RAY_BUNDLE_WSTRB_WIDTH - 1:0] m_axi_ray_bundle_WSTRB;
output   m_axi_ray_bundle_WLAST;
output  [C_M_AXI_RAY_BUNDLE_ID_WIDTH - 1:0] m_axi_ray_bundle_WID;
output  [C_M_AXI_RAY_BUNDLE_WUSER_WIDTH - 1:0] m_axi_ray_bundle_WUSER;
output   m_axi_ray_bundle_ARVALID;
input   m_axi_ray_bundle_ARREADY;
output  [C_M_AXI_RAY_BUNDLE_ADDR_WIDTH - 1:0] m_axi_ray_bundle_ARADDR;
output  [C_M_AXI_RAY_BUNDLE_ID_WIDTH - 1:0] m_axi_ray_bundle_ARID;
output  [7:0] m_axi_ray_bundle_ARLEN;
output  [2:0] m_axi_ray_bundle_ARSIZE;
output  [1:0] m_axi_ray_bundle_ARBURST;
output  [1:0] m_axi_ray_bundle_ARLOCK;
output  [3:0] m_axi_ray_bundle_ARCACHE;
output  [2:0] m_axi_ray_bundle_ARPROT;
output  [3:0] m_axi_ray_bundle_ARQOS;
output  [3:0] m_axi_ray_bundle_ARREGION;
output  [C_M_AXI_RAY_BUNDLE_ARUSER_WIDTH - 1:0] m_axi_ray_bundle_ARUSER;
input   m_axi_ray_bundle_RVALID;
output   m_axi_ray_bundle_RREADY;
input  [C_M_AXI_RAY_BUNDLE_DATA_WIDTH - 1:0] m_axi_ray_bundle_RDATA;
input   m_axi_ray_bundle_RLAST;
input  [C_M_AXI_RAY_BUNDLE_ID_WIDTH - 1:0] m_axi_ray_bundle_RID;
input  [C_M_AXI_RAY_BUNDLE_RUSER_WIDTH - 1:0] m_axi_ray_bundle_RUSER;
input  [1:0] m_axi_ray_bundle_RRESP;
input   m_axi_ray_bundle_BVALID;
output   m_axi_ray_bundle_BREADY;
input  [1:0] m_axi_ray_bundle_BRESP;
input  [C_M_AXI_RAY_BUNDLE_ID_WIDTH - 1:0] m_axi_ray_bundle_BID;
input  [C_M_AXI_RAY_BUNDLE_BUSER_WIDTH - 1:0] m_axi_ray_bundle_BUSER;
output   m_axi_triangle_bundle_AWVALID;
input   m_axi_triangle_bundle_AWREADY;
output  [C_M_AXI_TRIANGLE_BUNDLE_ADDR_WIDTH - 1:0] m_axi_triangle_bundle_AWADDR;
output  [C_M_AXI_TRIANGLE_BUNDLE_ID_WIDTH - 1:0] m_axi_triangle_bundle_AWID;
output  [7:0] m_axi_triangle_bundle_AWLEN;
output  [2:0] m_axi_triangle_bundle_AWSIZE;
output  [1:0] m_axi_triangle_bundle_AWBURST;
output  [1:0] m_axi_triangle_bundle_AWLOCK;
output  [3:0] m_axi_triangle_bundle_AWCACHE;
output  [2:0] m_axi_triangle_bundle_AWPROT;
output  [3:0] m_axi_triangle_bundle_AWQOS;
output  [3:0] m_axi_triangle_bundle_AWREGION;
output  [C_M_AXI_TRIANGLE_BUNDLE_AWUSER_WIDTH - 1:0] m_axi_triangle_bundle_AWUSER;
output   m_axi_triangle_bundle_WVALID;
input   m_axi_triangle_bundle_WREADY;
output  [C_M_AXI_TRIANGLE_BUNDLE_DATA_WIDTH - 1:0] m_axi_triangle_bundle_WDATA;
output  [C_M_AXI_TRIANGLE_BUNDLE_WSTRB_WIDTH - 1:0] m_axi_triangle_bundle_WSTRB;
output   m_axi_triangle_bundle_WLAST;
output  [C_M_AXI_TRIANGLE_BUNDLE_ID_WIDTH - 1:0] m_axi_triangle_bundle_WID;
output  [C_M_AXI_TRIANGLE_BUNDLE_WUSER_WIDTH - 1:0] m_axi_triangle_bundle_WUSER;
output   m_axi_triangle_bundle_ARVALID;
input   m_axi_triangle_bundle_ARREADY;
output  [C_M_AXI_TRIANGLE_BUNDLE_ADDR_WIDTH - 1:0] m_axi_triangle_bundle_ARADDR;
output  [C_M_AXI_TRIANGLE_BUNDLE_ID_WIDTH - 1:0] m_axi_triangle_bundle_ARID;
output  [7:0] m_axi_triangle_bundle_ARLEN;
output  [2:0] m_axi_triangle_bundle_ARSIZE;
output  [1:0] m_axi_triangle_bundle_ARBURST;
output  [1:0] m_axi_triangle_bundle_ARLOCK;
output  [3:0] m_axi_triangle_bundle_ARCACHE;
output  [2:0] m_axi_triangle_bundle_ARPROT;
output  [3:0] m_axi_triangle_bundle_ARQOS;
output  [3:0] m_axi_triangle_bundle_ARREGION;
output  [C_M_AXI_TRIANGLE_BUNDLE_ARUSER_WIDTH - 1:0] m_axi_triangle_bundle_ARUSER;
input   m_axi_triangle_bundle_RVALID;
output   m_axi_triangle_bundle_RREADY;
input  [C_M_AXI_TRIANGLE_BUNDLE_DATA_WIDTH - 1:0] m_axi_triangle_bundle_RDATA;
input   m_axi_triangle_bundle_RLAST;
input  [C_M_AXI_TRIANGLE_BUNDLE_ID_WIDTH - 1:0] m_axi_triangle_bundle_RID;
input  [C_M_AXI_TRIANGLE_BUNDLE_RUSER_WIDTH - 1:0] m_axi_triangle_bundle_RUSER;
input  [1:0] m_axi_triangle_bundle_RRESP;
input   m_axi_triangle_bundle_BVALID;
output   m_axi_triangle_bundle_BREADY;
input  [1:0] m_axi_triangle_bundle_BRESP;
input  [C_M_AXI_TRIANGLE_BUNDLE_ID_WIDTH - 1:0] m_axi_triangle_bundle_BID;
input  [C_M_AXI_TRIANGLE_BUNDLE_BUSER_WIDTH - 1:0] m_axi_triangle_bundle_BUSER;
output   m_axi_res_bundle_AWVALID;
input   m_axi_res_bundle_AWREADY;
output  [C_M_AXI_RES_BUNDLE_ADDR_WIDTH - 1:0] m_axi_res_bundle_AWADDR;
output  [C_M_AXI_RES_BUNDLE_ID_WIDTH - 1:0] m_axi_res_bundle_AWID;
output  [7:0] m_axi_res_bundle_AWLEN;
output  [2:0] m_axi_res_bundle_AWSIZE;
output  [1:0] m_axi_res_bundle_AWBURST;
output  [1:0] m_axi_res_bundle_AWLOCK;
output  [3:0] m_axi_res_bundle_AWCACHE;
output  [2:0] m_axi_res_bundle_AWPROT;
output  [3:0] m_axi_res_bundle_AWQOS;
output  [3:0] m_axi_res_bundle_AWREGION;
output  [C_M_AXI_RES_BUNDLE_AWUSER_WIDTH - 1:0] m_axi_res_bundle_AWUSER;
output   m_axi_res_bundle_WVALID;
input   m_axi_res_bundle_WREADY;
output  [C_M_AXI_RES_BUNDLE_DATA_WIDTH - 1:0] m_axi_res_bundle_WDATA;
output  [C_M_AXI_RES_BUNDLE_WSTRB_WIDTH - 1:0] m_axi_res_bundle_WSTRB;
output   m_axi_res_bundle_WLAST;
output  [C_M_AXI_RES_BUNDLE_ID_WIDTH - 1:0] m_axi_res_bundle_WID;
output  [C_M_AXI_RES_BUNDLE_WUSER_WIDTH - 1:0] m_axi_res_bundle_WUSER;
output   m_axi_res_bundle_ARVALID;
input   m_axi_res_bundle_ARREADY;
output  [C_M_AXI_RES_BUNDLE_ADDR_WIDTH - 1:0] m_axi_res_bundle_ARADDR;
output  [C_M_AXI_RES_BUNDLE_ID_WIDTH - 1:0] m_axi_res_bundle_ARID;
output  [7:0] m_axi_res_bundle_ARLEN;
output  [2:0] m_axi_res_bundle_ARSIZE;
output  [1:0] m_axi_res_bundle_ARBURST;
output  [1:0] m_axi_res_bundle_ARLOCK;
output  [3:0] m_axi_res_bundle_ARCACHE;
output  [2:0] m_axi_res_bundle_ARPROT;
output  [3:0] m_axi_res_bundle_ARQOS;
output  [3:0] m_axi_res_bundle_ARREGION;
output  [C_M_AXI_RES_BUNDLE_ARUSER_WIDTH - 1:0] m_axi_res_bundle_ARUSER;
input   m_axi_res_bundle_RVALID;
output   m_axi_res_bundle_RREADY;
input  [C_M_AXI_RES_BUNDLE_DATA_WIDTH - 1:0] m_axi_res_bundle_RDATA;
input   m_axi_res_bundle_RLAST;
input  [C_M_AXI_RES_BUNDLE_ID_WIDTH - 1:0] m_axi_res_bundle_RID;
input  [C_M_AXI_RES_BUNDLE_RUSER_WIDTH - 1:0] m_axi_res_bundle_RUSER;
input  [1:0] m_axi_res_bundle_RRESP;
input   m_axi_res_bundle_BVALID;
output   m_axi_res_bundle_BREADY;
input  [1:0] m_axi_res_bundle_BRESP;
input  [C_M_AXI_RES_BUNDLE_ID_WIDTH - 1:0] m_axi_res_bundle_BID;
input  [C_M_AXI_RES_BUNDLE_BUSER_WIDTH - 1:0] m_axi_res_bundle_BUSER;
input   s_axi_ret_bundle_AWVALID;
output   s_axi_ret_bundle_AWREADY;
input  [C_S_AXI_RET_BUNDLE_ADDR_WIDTH - 1:0] s_axi_ret_bundle_AWADDR;
input   s_axi_ret_bundle_WVALID;
output   s_axi_ret_bundle_WREADY;
input  [C_S_AXI_RET_BUNDLE_DATA_WIDTH - 1:0] s_axi_ret_bundle_WDATA;
input  [C_S_AXI_RET_BUNDLE_WSTRB_WIDTH - 1:0] s_axi_ret_bundle_WSTRB;
input   s_axi_ret_bundle_ARVALID;
output   s_axi_ret_bundle_ARREADY;
input  [C_S_AXI_RET_BUNDLE_ADDR_WIDTH - 1:0] s_axi_ret_bundle_ARADDR;
output   s_axi_ret_bundle_RVALID;
input   s_axi_ret_bundle_RREADY;
output  [C_S_AXI_RET_BUNDLE_DATA_WIDTH - 1:0] s_axi_ret_bundle_RDATA;
output  [1:0] s_axi_ret_bundle_RRESP;
output   s_axi_ret_bundle_BVALID;
input   s_axi_ret_bundle_BREADY;
output  [1:0] s_axi_ret_bundle_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [96:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] dir_pading;
wire   [31:0] dir_x;
wire   [31:0] dir_y;
wire   [31:0] dir_z;
wire   [31:0] orig_pading;
wire   [31:0] orig_x;
wire   [31:0] orig_y;
wire   [31:0] orig_z;
wire   [31:0] v0_pading;
wire   [31:0] v0_x;
wire   [31:0] v0_y;
wire   [31:0] v0_z;
wire   [31:0] v1_pading;
wire   [31:0] v1_x;
wire   [31:0] v1_y;
wire   [31:0] v1_z;
wire   [31:0] v2_pading;
wire   [31:0] v2_x;
wire   [31:0] v2_y;
wire   [31:0] v2_z;
wire   [31:0] t;
wire   [31:0] u;
wire   [31:0] v;
reg    res_bundle_blk_n_AW;
wire    ap_CS_fsm_state62;
reg    res_bundle_blk_n_W;
wire    ap_CS_fsm_state63;
reg    res_bundle_blk_n_B;
wire    ap_CS_fsm_state68;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state91;
wire    ap_CS_fsm_state92;
wire    ap_CS_fsm_state97;
reg   [0:0] and_ln42_reg_1174;
reg   [0:0] and_ln53_reg_1204;
reg   [0:0] and_ln60_reg_1240;
reg   [0:0] and_ln60_1_reg_1254;
wire    ray_bundle_AWREADY;
wire    ray_bundle_WREADY;
reg    ray_bundle_ARVALID;
wire    ray_bundle_ARREADY;
reg   [31:0] ray_bundle_ARADDR;
reg   [0:0] ray_bundle_ARID;
reg   [31:0] ray_bundle_ARLEN;
reg   [2:0] ray_bundle_ARSIZE;
reg   [1:0] ray_bundle_ARBURST;
reg   [1:0] ray_bundle_ARLOCK;
reg   [3:0] ray_bundle_ARCACHE;
reg   [2:0] ray_bundle_ARPROT;
reg   [3:0] ray_bundle_ARQOS;
reg   [3:0] ray_bundle_ARREGION;
reg   [0:0] ray_bundle_ARUSER;
wire    ray_bundle_RVALID;
reg    ray_bundle_RREADY;
wire   [31:0] ray_bundle_RDATA;
wire    ray_bundle_RLAST;
wire   [0:0] ray_bundle_RID;
wire   [0:0] ray_bundle_RUSER;
wire   [1:0] ray_bundle_RRESP;
wire    ray_bundle_BVALID;
wire   [1:0] ray_bundle_BRESP;
wire   [0:0] ray_bundle_BID;
wire   [0:0] ray_bundle_BUSER;
wire    triangle_bundle_AWREADY;
wire    triangle_bundle_WREADY;
reg    triangle_bundle_ARVALID;
wire    triangle_bundle_ARREADY;
reg   [31:0] triangle_bundle_ARADDR;
reg   [0:0] triangle_bundle_ARID;
reg   [31:0] triangle_bundle_ARLEN;
reg   [2:0] triangle_bundle_ARSIZE;
reg   [1:0] triangle_bundle_ARBURST;
reg   [1:0] triangle_bundle_ARLOCK;
reg   [3:0] triangle_bundle_ARCACHE;
reg   [2:0] triangle_bundle_ARPROT;
reg   [3:0] triangle_bundle_ARQOS;
reg   [3:0] triangle_bundle_ARREGION;
reg   [0:0] triangle_bundle_ARUSER;
wire    triangle_bundle_RVALID;
reg    triangle_bundle_RREADY;
wire   [31:0] triangle_bundle_RDATA;
wire    triangle_bundle_RLAST;
wire   [0:0] triangle_bundle_RID;
wire   [0:0] triangle_bundle_RUSER;
wire   [1:0] triangle_bundle_RRESP;
wire    triangle_bundle_BVALID;
wire   [1:0] triangle_bundle_BRESP;
wire   [0:0] triangle_bundle_BID;
wire   [0:0] triangle_bundle_BUSER;
reg    res_bundle_AWVALID;
wire    res_bundle_AWREADY;
reg   [31:0] res_bundle_AWADDR;
reg    res_bundle_WVALID;
wire    res_bundle_WREADY;
reg   [31:0] res_bundle_WDATA;
wire    res_bundle_ARREADY;
wire    res_bundle_RVALID;
wire   [31:0] res_bundle_RDATA;
wire    res_bundle_RLAST;
wire   [0:0] res_bundle_RID;
wire   [0:0] res_bundle_RUSER;
wire   [1:0] res_bundle_RRESP;
wire    res_bundle_BVALID;
reg    res_bundle_BREADY;
wire   [1:0] res_bundle_BRESP;
wire   [0:0] res_bundle_BID;
wire   [0:0] res_bundle_BUSER;
wire   [31:0] grp_fu_397_p2;
reg   [31:0] reg_451;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state77;
wire   [31:0] grp_fu_401_p2;
reg   [31:0] reg_461;
wire    ap_CS_fsm_state51;
wire   [31:0] grp_fu_385_p2;
reg   [31:0] reg_466;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state56;
wire    ap_CS_fsm_state82;
wire    ap_CS_fsm_state87;
reg   [31:0] reg_477;
wire    ap_CS_fsm_state72;
reg   [31:0] reg_483;
wire   [31:0] grp_fu_405_p2;
reg   [31:0] reg_491;
reg   [29:0] v1_reg_1000;
reg   [29:0] u1_reg_1005;
reg   [29:0] t1_reg_1010;
reg   [29:0] v2_z1_reg_1015;
reg   [29:0] v2_y1_reg_1020;
reg   [29:0] v2_x1_reg_1025;
reg   [29:0] v1_z1_reg_1030;
reg   [29:0] v1_y1_reg_1035;
reg   [29:0] v1_x1_reg_1040;
reg   [29:0] v0_z1_reg_1045;
reg   [29:0] v0_y1_reg_1052;
reg   [29:0] v0_x1_reg_1059;
reg   [29:0] orig_z1_reg_1066;
reg   [29:0] orig_y1_reg_1071;
reg   [29:0] orig_x1_reg_1076;
reg   [29:0] dir_z7_reg_1081;
reg   [29:0] dir_y5_reg_1088;
reg   [29:0] dir_x3_reg_1095;
reg   [31:0] v0v1_x_reg_1102;
wire    ap_CS_fsm_state3;
wire    grp_operator_1_fu_359_ap_ready;
wire    grp_operator_1_fu_359_ap_done;
reg   [31:0] v0v1_y_reg_1109;
reg   [31:0] v0v1_z_reg_1116;
reg   [31:0] v0v2_x_reg_1123;
wire    ap_CS_fsm_state5;
reg   [31:0] v0v2_y_reg_1129;
reg   [31:0] v0v2_z_reg_1135;
reg   [31:0] pvec_x_reg_1141;
wire    ap_CS_fsm_state7;
wire    grp_crossProduct_1_fu_335_ap_ready;
wire    grp_crossProduct_1_fu_335_ap_done;
reg   [31:0] pvec_y_reg_1146;
reg   [31:0] pvec_z_reg_1151;
reg   [31:0] res_bundle_addr_reg_1156;
wire    ap_CS_fsm_state23;
reg   [31:0] res_bundle_addr_1_reg_1162;
reg   [31:0] res_bundle_addr_2_reg_1168;
wire   [0:0] and_ln42_fu_812_p2;
reg   [31:0] tvec_x_reg_1178;
wire    ap_CS_fsm_state24;
wire    grp_operator_sub_fu_371_ap_ready;
wire    grp_operator_sub_fu_371_ap_done;
reg   [31:0] tvec_y_reg_1185;
reg   [31:0] tvec_z_reg_1192;
wire   [31:0] grp_fu_421_p2;
reg   [31:0] invDet_reg_1199;
wire   [0:0] and_ln53_fu_872_p2;
wire   [31:0] grp_fu_409_p2;
reg   [31:0] tmp_21_i_reg_1208;
wire   [31:0] grp_fu_413_p2;
reg   [31:0] tmp_22_i_reg_1213;
wire   [31:0] grp_fu_417_p2;
reg   [31:0] tmp_23_i_reg_1218;
wire   [31:0] grp_fu_389_p2;
reg   [31:0] qvec_y_reg_1223;
wire   [31:0] grp_fu_393_p2;
reg   [31:0] qvec_z_reg_1229;
wire   [31:0] grp_dotProduct_2_fu_347_ap_return;
reg   [31:0] tmp_19_reg_1235;
wire    ap_CS_fsm_state58;
wire    grp_dotProduct_2_fu_347_ap_ready;
wire    grp_dotProduct_2_fu_347_ap_done;
wire   [0:0] and_ln60_fu_914_p2;
wire   [0:0] icmp_ln60_2_fu_938_p2;
reg   [0:0] icmp_ln60_2_reg_1244;
wire    ap_CS_fsm_state73;
wire   [0:0] icmp_ln60_3_fu_944_p2;
reg   [0:0] icmp_ln60_3_reg_1249;
wire   [0:0] and_ln60_1_fu_954_p2;
wire    ap_CS_fsm_state74;
wire   [0:0] icmp_ln65_fu_978_p2;
reg   [0:0] icmp_ln65_reg_1258;
wire   [0:0] icmp_ln65_1_fu_984_p2;
reg   [0:0] icmp_ln65_1_reg_1263;
wire   [0:0] and_ln65_fu_994_p2;
reg   [0:0] and_ln65_reg_1268;
wire    ap_CS_fsm_state93;
wire    grp_crossProduct_1_fu_335_ap_start;
wire    grp_crossProduct_1_fu_335_ap_idle;
wire    grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_AWVALID;
wire   [31:0] grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_AWADDR;
wire   [0:0] grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_AWID;
wire   [31:0] grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_AWLEN;
wire   [2:0] grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_AWSIZE;
wire   [1:0] grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_AWBURST;
wire   [1:0] grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_AWLOCK;
wire   [3:0] grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_AWCACHE;
wire   [2:0] grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_AWPROT;
wire   [3:0] grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_AWQOS;
wire   [3:0] grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_AWREGION;
wire   [0:0] grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_AWUSER;
wire    grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_WVALID;
wire   [31:0] grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_WDATA;
wire   [3:0] grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_WSTRB;
wire    grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_WLAST;
wire   [0:0] grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_WID;
wire   [0:0] grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_WUSER;
wire    grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARVALID;
wire   [31:0] grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARADDR;
wire   [0:0] grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARID;
wire   [31:0] grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARLEN;
wire   [2:0] grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARSIZE;
wire   [1:0] grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARBURST;
wire   [1:0] grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARLOCK;
wire   [3:0] grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARCACHE;
wire   [2:0] grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARPROT;
wire   [3:0] grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARQOS;
wire   [3:0] grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARREGION;
wire   [0:0] grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARUSER;
wire    grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_RREADY;
wire    grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_BREADY;
wire   [31:0] grp_crossProduct_1_fu_335_ap_return_0;
wire   [31:0] grp_crossProduct_1_fu_335_ap_return_1;
wire   [31:0] grp_crossProduct_1_fu_335_ap_return_2;
wire    grp_dotProduct_2_fu_347_ap_start;
wire    grp_dotProduct_2_fu_347_ap_idle;
wire    grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_AWVALID;
wire   [31:0] grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_AWADDR;
wire   [0:0] grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_AWID;
wire   [31:0] grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_AWLEN;
wire   [2:0] grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_AWSIZE;
wire   [1:0] grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_AWBURST;
wire   [1:0] grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_AWLOCK;
wire   [3:0] grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_AWCACHE;
wire   [2:0] grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_AWPROT;
wire   [3:0] grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_AWQOS;
wire   [3:0] grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_AWREGION;
wire   [0:0] grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_AWUSER;
wire    grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_WVALID;
wire   [31:0] grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_WDATA;
wire   [3:0] grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_WSTRB;
wire    grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_WLAST;
wire   [0:0] grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_WID;
wire   [0:0] grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_WUSER;
wire    grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARVALID;
wire   [31:0] grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARADDR;
wire   [0:0] grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARID;
wire   [31:0] grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARLEN;
wire   [2:0] grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARSIZE;
wire   [1:0] grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARBURST;
wire   [1:0] grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARLOCK;
wire   [3:0] grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARCACHE;
wire   [2:0] grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARPROT;
wire   [3:0] grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARQOS;
wire   [3:0] grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARREGION;
wire   [0:0] grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARUSER;
wire    grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_RREADY;
wire    grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_BREADY;
wire    grp_operator_1_fu_359_ap_start;
wire    grp_operator_1_fu_359_ap_idle;
wire    grp_operator_1_fu_359_m_axi_Vec3_float_x_AWVALID;
wire   [31:0] grp_operator_1_fu_359_m_axi_Vec3_float_x_AWADDR;
wire   [0:0] grp_operator_1_fu_359_m_axi_Vec3_float_x_AWID;
wire   [31:0] grp_operator_1_fu_359_m_axi_Vec3_float_x_AWLEN;
wire   [2:0] grp_operator_1_fu_359_m_axi_Vec3_float_x_AWSIZE;
wire   [1:0] grp_operator_1_fu_359_m_axi_Vec3_float_x_AWBURST;
wire   [1:0] grp_operator_1_fu_359_m_axi_Vec3_float_x_AWLOCK;
wire   [3:0] grp_operator_1_fu_359_m_axi_Vec3_float_x_AWCACHE;
wire   [2:0] grp_operator_1_fu_359_m_axi_Vec3_float_x_AWPROT;
wire   [3:0] grp_operator_1_fu_359_m_axi_Vec3_float_x_AWQOS;
wire   [3:0] grp_operator_1_fu_359_m_axi_Vec3_float_x_AWREGION;
wire   [0:0] grp_operator_1_fu_359_m_axi_Vec3_float_x_AWUSER;
wire    grp_operator_1_fu_359_m_axi_Vec3_float_x_WVALID;
wire   [31:0] grp_operator_1_fu_359_m_axi_Vec3_float_x_WDATA;
wire   [3:0] grp_operator_1_fu_359_m_axi_Vec3_float_x_WSTRB;
wire    grp_operator_1_fu_359_m_axi_Vec3_float_x_WLAST;
wire   [0:0] grp_operator_1_fu_359_m_axi_Vec3_float_x_WID;
wire   [0:0] grp_operator_1_fu_359_m_axi_Vec3_float_x_WUSER;
wire    grp_operator_1_fu_359_m_axi_Vec3_float_x_ARVALID;
wire   [31:0] grp_operator_1_fu_359_m_axi_Vec3_float_x_ARADDR;
wire   [0:0] grp_operator_1_fu_359_m_axi_Vec3_float_x_ARID;
wire   [31:0] grp_operator_1_fu_359_m_axi_Vec3_float_x_ARLEN;
wire   [2:0] grp_operator_1_fu_359_m_axi_Vec3_float_x_ARSIZE;
wire   [1:0] grp_operator_1_fu_359_m_axi_Vec3_float_x_ARBURST;
wire   [1:0] grp_operator_1_fu_359_m_axi_Vec3_float_x_ARLOCK;
wire   [3:0] grp_operator_1_fu_359_m_axi_Vec3_float_x_ARCACHE;
wire   [2:0] grp_operator_1_fu_359_m_axi_Vec3_float_x_ARPROT;
wire   [3:0] grp_operator_1_fu_359_m_axi_Vec3_float_x_ARQOS;
wire   [3:0] grp_operator_1_fu_359_m_axi_Vec3_float_x_ARREGION;
wire   [0:0] grp_operator_1_fu_359_m_axi_Vec3_float_x_ARUSER;
wire    grp_operator_1_fu_359_m_axi_Vec3_float_x_RREADY;
wire    grp_operator_1_fu_359_m_axi_Vec3_float_x_BREADY;
reg   [29:0] grp_operator_1_fu_359_Vec3_float_x_offset;
reg   [29:0] grp_operator_1_fu_359_Vec3_float_y_offset;
reg   [29:0] grp_operator_1_fu_359_Vec3_float_z_offset;
wire   [31:0] grp_operator_1_fu_359_ap_return_0;
wire   [31:0] grp_operator_1_fu_359_ap_return_1;
wire   [31:0] grp_operator_1_fu_359_ap_return_2;
wire    grp_operator_sub_fu_371_ap_start;
wire    grp_operator_sub_fu_371_ap_idle;
wire    grp_operator_sub_fu_371_m_axi_Vec3_float_x_AWVALID;
wire   [31:0] grp_operator_sub_fu_371_m_axi_Vec3_float_x_AWADDR;
wire   [0:0] grp_operator_sub_fu_371_m_axi_Vec3_float_x_AWID;
wire   [31:0] grp_operator_sub_fu_371_m_axi_Vec3_float_x_AWLEN;
wire   [2:0] grp_operator_sub_fu_371_m_axi_Vec3_float_x_AWSIZE;
wire   [1:0] grp_operator_sub_fu_371_m_axi_Vec3_float_x_AWBURST;
wire   [1:0] grp_operator_sub_fu_371_m_axi_Vec3_float_x_AWLOCK;
wire   [3:0] grp_operator_sub_fu_371_m_axi_Vec3_float_x_AWCACHE;
wire   [2:0] grp_operator_sub_fu_371_m_axi_Vec3_float_x_AWPROT;
wire   [3:0] grp_operator_sub_fu_371_m_axi_Vec3_float_x_AWQOS;
wire   [3:0] grp_operator_sub_fu_371_m_axi_Vec3_float_x_AWREGION;
wire   [0:0] grp_operator_sub_fu_371_m_axi_Vec3_float_x_AWUSER;
wire    grp_operator_sub_fu_371_m_axi_Vec3_float_x_WVALID;
wire   [31:0] grp_operator_sub_fu_371_m_axi_Vec3_float_x_WDATA;
wire   [3:0] grp_operator_sub_fu_371_m_axi_Vec3_float_x_WSTRB;
wire    grp_operator_sub_fu_371_m_axi_Vec3_float_x_WLAST;
wire   [0:0] grp_operator_sub_fu_371_m_axi_Vec3_float_x_WID;
wire   [0:0] grp_operator_sub_fu_371_m_axi_Vec3_float_x_WUSER;
wire    grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARVALID;
wire   [31:0] grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARADDR;
wire   [0:0] grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARID;
wire   [31:0] grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARLEN;
wire   [2:0] grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARSIZE;
wire   [1:0] grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARBURST;
wire   [1:0] grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARLOCK;
wire   [3:0] grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARCACHE;
wire   [2:0] grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARPROT;
wire   [3:0] grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARQOS;
wire   [3:0] grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARREGION;
wire   [0:0] grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARUSER;
wire    grp_operator_sub_fu_371_m_axi_Vec3_float_x_RREADY;
wire    grp_operator_sub_fu_371_m_axi_Vec3_float_x_BREADY;
wire    grp_operator_sub_fu_371_m_axi_v_x_AWVALID;
wire   [31:0] grp_operator_sub_fu_371_m_axi_v_x_AWADDR;
wire   [0:0] grp_operator_sub_fu_371_m_axi_v_x_AWID;
wire   [31:0] grp_operator_sub_fu_371_m_axi_v_x_AWLEN;
wire   [2:0] grp_operator_sub_fu_371_m_axi_v_x_AWSIZE;
wire   [1:0] grp_operator_sub_fu_371_m_axi_v_x_AWBURST;
wire   [1:0] grp_operator_sub_fu_371_m_axi_v_x_AWLOCK;
wire   [3:0] grp_operator_sub_fu_371_m_axi_v_x_AWCACHE;
wire   [2:0] grp_operator_sub_fu_371_m_axi_v_x_AWPROT;
wire   [3:0] grp_operator_sub_fu_371_m_axi_v_x_AWQOS;
wire   [3:0] grp_operator_sub_fu_371_m_axi_v_x_AWREGION;
wire   [0:0] grp_operator_sub_fu_371_m_axi_v_x_AWUSER;
wire    grp_operator_sub_fu_371_m_axi_v_x_WVALID;
wire   [31:0] grp_operator_sub_fu_371_m_axi_v_x_WDATA;
wire   [3:0] grp_operator_sub_fu_371_m_axi_v_x_WSTRB;
wire    grp_operator_sub_fu_371_m_axi_v_x_WLAST;
wire   [0:0] grp_operator_sub_fu_371_m_axi_v_x_WID;
wire   [0:0] grp_operator_sub_fu_371_m_axi_v_x_WUSER;
wire    grp_operator_sub_fu_371_m_axi_v_x_ARVALID;
wire   [31:0] grp_operator_sub_fu_371_m_axi_v_x_ARADDR;
wire   [0:0] grp_operator_sub_fu_371_m_axi_v_x_ARID;
wire   [31:0] grp_operator_sub_fu_371_m_axi_v_x_ARLEN;
wire   [2:0] grp_operator_sub_fu_371_m_axi_v_x_ARSIZE;
wire   [1:0] grp_operator_sub_fu_371_m_axi_v_x_ARBURST;
wire   [1:0] grp_operator_sub_fu_371_m_axi_v_x_ARLOCK;
wire   [3:0] grp_operator_sub_fu_371_m_axi_v_x_ARCACHE;
wire   [2:0] grp_operator_sub_fu_371_m_axi_v_x_ARPROT;
wire   [3:0] grp_operator_sub_fu_371_m_axi_v_x_ARQOS;
wire   [3:0] grp_operator_sub_fu_371_m_axi_v_x_ARREGION;
wire   [0:0] grp_operator_sub_fu_371_m_axi_v_x_ARUSER;
wire    grp_operator_sub_fu_371_m_axi_v_x_RREADY;
wire    grp_operator_sub_fu_371_m_axi_v_x_BREADY;
wire   [31:0] grp_operator_sub_fu_371_ap_return_0;
wire   [31:0] grp_operator_sub_fu_371_ap_return_1;
wire   [31:0] grp_operator_sub_fu_371_ap_return_2;
reg   [0:0] ap_phi_mux_p_0_phi_fu_322_p8;
reg   [0:0] p_0_reg_318;
reg    ap_predicate_op405_writeresp_state97;
reg    ap_block_state97;
reg    grp_crossProduct_1_fu_335_ap_start_reg;
wire    ap_CS_fsm_state6;
reg    grp_dotProduct_2_fu_347_ap_start_reg;
wire    ap_CS_fsm_state57;
reg    grp_operator_1_fu_359_ap_start_reg;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state4;
reg    grp_operator_sub_fu_371_ap_start_reg;
wire   [63:0] empty_fu_689_p1;
wire   [63:0] empty_4_fu_698_p1;
wire   [63:0] empty_5_fu_707_p1;
reg   [31:0] grp_fu_385_p0;
reg   [31:0] grp_fu_385_p1;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state52;
wire    ap_CS_fsm_state78;
wire    ap_CS_fsm_state83;
reg   [31:0] grp_fu_397_p0;
reg   [31:0] grp_fu_397_p1;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state59;
wire    ap_CS_fsm_state88;
reg   [31:0] grp_fu_401_p0;
reg   [31:0] grp_fu_401_p1;
reg   [31:0] grp_fu_405_p0;
reg   [31:0] grp_fu_405_p1;
reg   [31:0] grp_fu_426_p0;
reg   [31:0] grp_fu_426_p1;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state67;
reg   [31:0] grp_fu_431_p0;
reg   [31:0] grp_fu_431_p1;
wire   [31:0] bitcast_ln42_fu_770_p1;
wire   [7:0] tmp_fu_774_p4;
wire   [22:0] trunc_ln42_fu_784_p1;
wire   [0:0] icmp_ln42_1_fu_794_p2;
wire   [0:0] icmp_ln42_fu_788_p2;
wire   [0:0] or_ln42_fu_800_p2;
wire   [0:0] grp_fu_426_p2;
wire   [0:0] and_ln42_1_fu_806_p2;
wire   [0:0] grp_fu_431_p2;
wire   [31:0] bitcast_ln53_fu_830_p1;
wire   [7:0] tmp_5_fu_834_p4;
wire   [22:0] trunc_ln53_fu_844_p1;
wire   [0:0] icmp_ln53_1_fu_854_p2;
wire   [0:0] icmp_ln53_fu_848_p2;
wire   [0:0] or_ln53_fu_860_p2;
wire   [0:0] or_ln53_1_fu_866_p2;
wire   [31:0] bitcast_ln60_fu_878_p1;
wire   [7:0] tmp_12_fu_882_p4;
wire   [22:0] trunc_ln60_fu_892_p1;
wire   [0:0] icmp_ln60_1_fu_902_p2;
wire   [0:0] icmp_ln60_fu_896_p2;
wire   [0:0] or_ln60_fu_908_p2;
wire   [31:0] bitcast_ln60_1_fu_920_p1;
wire   [7:0] tmp_14_fu_924_p4;
wire   [22:0] trunc_ln60_1_fu_934_p1;
wire   [0:0] or_ln60_1_fu_950_p2;
wire   [31:0] bitcast_ln65_fu_960_p1;
wire   [7:0] tmp_16_fu_964_p4;
wire   [22:0] trunc_ln65_fu_974_p1;
wire   [0:0] or_ln65_fu_990_p2;
reg   [1:0] grp_fu_385_opcode;
reg    grp_fu_385_ce;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state54;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state69;
wire    ap_CS_fsm_state70;
wire    ap_CS_fsm_state71;
wire    ap_CS_fsm_state79;
wire    ap_CS_fsm_state80;
wire    ap_CS_fsm_state81;
wire    ap_CS_fsm_state84;
wire    ap_CS_fsm_state85;
wire    ap_CS_fsm_state86;
reg    grp_fu_397_ce;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state49;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state60;
wire    ap_CS_fsm_state61;
wire    ap_CS_fsm_state75;
wire    ap_CS_fsm_state76;
wire    ap_CS_fsm_state89;
wire    ap_CS_fsm_state90;
reg    grp_fu_401_ce;
reg    grp_fu_405_ce;
reg    grp_fu_409_ce;
reg    grp_fu_413_ce;
reg    grp_fu_417_ce;
reg    grp_fu_421_ce;
reg    grp_fu_426_ce;
reg   [4:0] grp_fu_426_opcode;
reg    grp_fu_431_ce;
reg   [4:0] grp_fu_431_opcode;
reg   [96:0] ap_NS_fsm;
wire   [0:0] ap_return;

// power-on initialization
initial begin
#0 ap_CS_fsm = 97'd1;
#0 grp_crossProduct_1_fu_335_ap_start_reg = 1'b0;
#0 grp_dotProduct_2_fu_347_ap_start_reg = 1'b0;
#0 grp_operator_1_fu_359_ap_start_reg = 1'b0;
#0 grp_operator_sub_fu_371_ap_start_reg = 1'b0;
end

rayTI_ret_bundle_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_RET_BUNDLE_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_RET_BUNDLE_DATA_WIDTH ))
rayTI_ret_bundle_s_axi_U(
    .AWVALID(s_axi_ret_bundle_AWVALID),
    .AWREADY(s_axi_ret_bundle_AWREADY),
    .AWADDR(s_axi_ret_bundle_AWADDR),
    .WVALID(s_axi_ret_bundle_WVALID),
    .WREADY(s_axi_ret_bundle_WREADY),
    .WDATA(s_axi_ret_bundle_WDATA),
    .WSTRB(s_axi_ret_bundle_WSTRB),
    .ARVALID(s_axi_ret_bundle_ARVALID),
    .ARREADY(s_axi_ret_bundle_ARREADY),
    .ARADDR(s_axi_ret_bundle_ARADDR),
    .RVALID(s_axi_ret_bundle_RVALID),
    .RREADY(s_axi_ret_bundle_RREADY),
    .RDATA(s_axi_ret_bundle_RDATA),
    .RRESP(s_axi_ret_bundle_RRESP),
    .BVALID(s_axi_ret_bundle_BVALID),
    .BREADY(s_axi_ret_bundle_BREADY),
    .BRESP(s_axi_ret_bundle_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .ap_return(ap_phi_mux_p_0_phi_fu_322_p8),
    .dir_pading(dir_pading),
    .dir_x(dir_x),
    .dir_y(dir_y),
    .dir_z(dir_z),
    .orig_pading(orig_pading),
    .orig_x(orig_x),
    .orig_y(orig_y),
    .orig_z(orig_z),
    .v0_pading(v0_pading),
    .v0_x(v0_x),
    .v0_y(v0_y),
    .v0_z(v0_z),
    .v1_pading(v1_pading),
    .v1_x(v1_x),
    .v1_y(v1_y),
    .v1_z(v1_z),
    .v2_pading(v2_pading),
    .v2_x(v2_x),
    .v2_y(v2_y),
    .v2_z(v2_z),
    .t(t),
    .u(u),
    .v(v)
);

rayTI_ray_bundle_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_RAY_BUNDLE_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_RAY_BUNDLE_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_RAY_BUNDLE_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_RAY_BUNDLE_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_RAY_BUNDLE_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_RAY_BUNDLE_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_RAY_BUNDLE_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_RAY_BUNDLE_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_RAY_BUNDLE_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_RAY_BUNDLE_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_RAY_BUNDLE_CACHE_VALUE ))
rayTI_ray_bundle_m_axi_U(
    .AWVALID(m_axi_ray_bundle_AWVALID),
    .AWREADY(m_axi_ray_bundle_AWREADY),
    .AWADDR(m_axi_ray_bundle_AWADDR),
    .AWID(m_axi_ray_bundle_AWID),
    .AWLEN(m_axi_ray_bundle_AWLEN),
    .AWSIZE(m_axi_ray_bundle_AWSIZE),
    .AWBURST(m_axi_ray_bundle_AWBURST),
    .AWLOCK(m_axi_ray_bundle_AWLOCK),
    .AWCACHE(m_axi_ray_bundle_AWCACHE),
    .AWPROT(m_axi_ray_bundle_AWPROT),
    .AWQOS(m_axi_ray_bundle_AWQOS),
    .AWREGION(m_axi_ray_bundle_AWREGION),
    .AWUSER(m_axi_ray_bundle_AWUSER),
    .WVALID(m_axi_ray_bundle_WVALID),
    .WREADY(m_axi_ray_bundle_WREADY),
    .WDATA(m_axi_ray_bundle_WDATA),
    .WSTRB(m_axi_ray_bundle_WSTRB),
    .WLAST(m_axi_ray_bundle_WLAST),
    .WID(m_axi_ray_bundle_WID),
    .WUSER(m_axi_ray_bundle_WUSER),
    .ARVALID(m_axi_ray_bundle_ARVALID),
    .ARREADY(m_axi_ray_bundle_ARREADY),
    .ARADDR(m_axi_ray_bundle_ARADDR),
    .ARID(m_axi_ray_bundle_ARID),
    .ARLEN(m_axi_ray_bundle_ARLEN),
    .ARSIZE(m_axi_ray_bundle_ARSIZE),
    .ARBURST(m_axi_ray_bundle_ARBURST),
    .ARLOCK(m_axi_ray_bundle_ARLOCK),
    .ARCACHE(m_axi_ray_bundle_ARCACHE),
    .ARPROT(m_axi_ray_bundle_ARPROT),
    .ARQOS(m_axi_ray_bundle_ARQOS),
    .ARREGION(m_axi_ray_bundle_ARREGION),
    .ARUSER(m_axi_ray_bundle_ARUSER),
    .RVALID(m_axi_ray_bundle_RVALID),
    .RREADY(m_axi_ray_bundle_RREADY),
    .RDATA(m_axi_ray_bundle_RDATA),
    .RLAST(m_axi_ray_bundle_RLAST),
    .RID(m_axi_ray_bundle_RID),
    .RUSER(m_axi_ray_bundle_RUSER),
    .RRESP(m_axi_ray_bundle_RRESP),
    .BVALID(m_axi_ray_bundle_BVALID),
    .BREADY(m_axi_ray_bundle_BREADY),
    .BRESP(m_axi_ray_bundle_BRESP),
    .BID(m_axi_ray_bundle_BID),
    .BUSER(m_axi_ray_bundle_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(ray_bundle_ARVALID),
    .I_ARREADY(ray_bundle_ARREADY),
    .I_ARADDR(ray_bundle_ARADDR),
    .I_ARID(ray_bundle_ARID),
    .I_ARLEN(ray_bundle_ARLEN),
    .I_ARSIZE(ray_bundle_ARSIZE),
    .I_ARLOCK(ray_bundle_ARLOCK),
    .I_ARCACHE(ray_bundle_ARCACHE),
    .I_ARQOS(ray_bundle_ARQOS),
    .I_ARPROT(ray_bundle_ARPROT),
    .I_ARUSER(ray_bundle_ARUSER),
    .I_ARBURST(ray_bundle_ARBURST),
    .I_ARREGION(ray_bundle_ARREGION),
    .I_RVALID(ray_bundle_RVALID),
    .I_RREADY(ray_bundle_RREADY),
    .I_RDATA(ray_bundle_RDATA),
    .I_RID(ray_bundle_RID),
    .I_RUSER(ray_bundle_RUSER),
    .I_RRESP(ray_bundle_RRESP),
    .I_RLAST(ray_bundle_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(ray_bundle_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(ray_bundle_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(ray_bundle_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(ray_bundle_BRESP),
    .I_BID(ray_bundle_BID),
    .I_BUSER(ray_bundle_BUSER)
);

rayTI_triangle_bundle_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_TRIANGLE_BUNDLE_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_TRIANGLE_BUNDLE_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_TRIANGLE_BUNDLE_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_TRIANGLE_BUNDLE_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_TRIANGLE_BUNDLE_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_TRIANGLE_BUNDLE_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_TRIANGLE_BUNDLE_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_TRIANGLE_BUNDLE_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_TRIANGLE_BUNDLE_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_TRIANGLE_BUNDLE_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_TRIANGLE_BUNDLE_CACHE_VALUE ))
rayTI_triangle_bundle_m_axi_U(
    .AWVALID(m_axi_triangle_bundle_AWVALID),
    .AWREADY(m_axi_triangle_bundle_AWREADY),
    .AWADDR(m_axi_triangle_bundle_AWADDR),
    .AWID(m_axi_triangle_bundle_AWID),
    .AWLEN(m_axi_triangle_bundle_AWLEN),
    .AWSIZE(m_axi_triangle_bundle_AWSIZE),
    .AWBURST(m_axi_triangle_bundle_AWBURST),
    .AWLOCK(m_axi_triangle_bundle_AWLOCK),
    .AWCACHE(m_axi_triangle_bundle_AWCACHE),
    .AWPROT(m_axi_triangle_bundle_AWPROT),
    .AWQOS(m_axi_triangle_bundle_AWQOS),
    .AWREGION(m_axi_triangle_bundle_AWREGION),
    .AWUSER(m_axi_triangle_bundle_AWUSER),
    .WVALID(m_axi_triangle_bundle_WVALID),
    .WREADY(m_axi_triangle_bundle_WREADY),
    .WDATA(m_axi_triangle_bundle_WDATA),
    .WSTRB(m_axi_triangle_bundle_WSTRB),
    .WLAST(m_axi_triangle_bundle_WLAST),
    .WID(m_axi_triangle_bundle_WID),
    .WUSER(m_axi_triangle_bundle_WUSER),
    .ARVALID(m_axi_triangle_bundle_ARVALID),
    .ARREADY(m_axi_triangle_bundle_ARREADY),
    .ARADDR(m_axi_triangle_bundle_ARADDR),
    .ARID(m_axi_triangle_bundle_ARID),
    .ARLEN(m_axi_triangle_bundle_ARLEN),
    .ARSIZE(m_axi_triangle_bundle_ARSIZE),
    .ARBURST(m_axi_triangle_bundle_ARBURST),
    .ARLOCK(m_axi_triangle_bundle_ARLOCK),
    .ARCACHE(m_axi_triangle_bundle_ARCACHE),
    .ARPROT(m_axi_triangle_bundle_ARPROT),
    .ARQOS(m_axi_triangle_bundle_ARQOS),
    .ARREGION(m_axi_triangle_bundle_ARREGION),
    .ARUSER(m_axi_triangle_bundle_ARUSER),
    .RVALID(m_axi_triangle_bundle_RVALID),
    .RREADY(m_axi_triangle_bundle_RREADY),
    .RDATA(m_axi_triangle_bundle_RDATA),
    .RLAST(m_axi_triangle_bundle_RLAST),
    .RID(m_axi_triangle_bundle_RID),
    .RUSER(m_axi_triangle_bundle_RUSER),
    .RRESP(m_axi_triangle_bundle_RRESP),
    .BVALID(m_axi_triangle_bundle_BVALID),
    .BREADY(m_axi_triangle_bundle_BREADY),
    .BRESP(m_axi_triangle_bundle_BRESP),
    .BID(m_axi_triangle_bundle_BID),
    .BUSER(m_axi_triangle_bundle_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(triangle_bundle_ARVALID),
    .I_ARREADY(triangle_bundle_ARREADY),
    .I_ARADDR(triangle_bundle_ARADDR),
    .I_ARID(triangle_bundle_ARID),
    .I_ARLEN(triangle_bundle_ARLEN),
    .I_ARSIZE(triangle_bundle_ARSIZE),
    .I_ARLOCK(triangle_bundle_ARLOCK),
    .I_ARCACHE(triangle_bundle_ARCACHE),
    .I_ARQOS(triangle_bundle_ARQOS),
    .I_ARPROT(triangle_bundle_ARPROT),
    .I_ARUSER(triangle_bundle_ARUSER),
    .I_ARBURST(triangle_bundle_ARBURST),
    .I_ARREGION(triangle_bundle_ARREGION),
    .I_RVALID(triangle_bundle_RVALID),
    .I_RREADY(triangle_bundle_RREADY),
    .I_RDATA(triangle_bundle_RDATA),
    .I_RID(triangle_bundle_RID),
    .I_RUSER(triangle_bundle_RUSER),
    .I_RRESP(triangle_bundle_RRESP),
    .I_RLAST(triangle_bundle_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(triangle_bundle_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(triangle_bundle_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(triangle_bundle_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(triangle_bundle_BRESP),
    .I_BID(triangle_bundle_BID),
    .I_BUSER(triangle_bundle_BUSER)
);

rayTI_res_bundle_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_RES_BUNDLE_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_RES_BUNDLE_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_RES_BUNDLE_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_RES_BUNDLE_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_RES_BUNDLE_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_RES_BUNDLE_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_RES_BUNDLE_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_RES_BUNDLE_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_RES_BUNDLE_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_RES_BUNDLE_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_RES_BUNDLE_CACHE_VALUE ))
rayTI_res_bundle_m_axi_U(
    .AWVALID(m_axi_res_bundle_AWVALID),
    .AWREADY(m_axi_res_bundle_AWREADY),
    .AWADDR(m_axi_res_bundle_AWADDR),
    .AWID(m_axi_res_bundle_AWID),
    .AWLEN(m_axi_res_bundle_AWLEN),
    .AWSIZE(m_axi_res_bundle_AWSIZE),
    .AWBURST(m_axi_res_bundle_AWBURST),
    .AWLOCK(m_axi_res_bundle_AWLOCK),
    .AWCACHE(m_axi_res_bundle_AWCACHE),
    .AWPROT(m_axi_res_bundle_AWPROT),
    .AWQOS(m_axi_res_bundle_AWQOS),
    .AWREGION(m_axi_res_bundle_AWREGION),
    .AWUSER(m_axi_res_bundle_AWUSER),
    .WVALID(m_axi_res_bundle_WVALID),
    .WREADY(m_axi_res_bundle_WREADY),
    .WDATA(m_axi_res_bundle_WDATA),
    .WSTRB(m_axi_res_bundle_WSTRB),
    .WLAST(m_axi_res_bundle_WLAST),
    .WID(m_axi_res_bundle_WID),
    .WUSER(m_axi_res_bundle_WUSER),
    .ARVALID(m_axi_res_bundle_ARVALID),
    .ARREADY(m_axi_res_bundle_ARREADY),
    .ARADDR(m_axi_res_bundle_ARADDR),
    .ARID(m_axi_res_bundle_ARID),
    .ARLEN(m_axi_res_bundle_ARLEN),
    .ARSIZE(m_axi_res_bundle_ARSIZE),
    .ARBURST(m_axi_res_bundle_ARBURST),
    .ARLOCK(m_axi_res_bundle_ARLOCK),
    .ARCACHE(m_axi_res_bundle_ARCACHE),
    .ARPROT(m_axi_res_bundle_ARPROT),
    .ARQOS(m_axi_res_bundle_ARQOS),
    .ARREGION(m_axi_res_bundle_ARREGION),
    .ARUSER(m_axi_res_bundle_ARUSER),
    .RVALID(m_axi_res_bundle_RVALID),
    .RREADY(m_axi_res_bundle_RREADY),
    .RDATA(m_axi_res_bundle_RDATA),
    .RLAST(m_axi_res_bundle_RLAST),
    .RID(m_axi_res_bundle_RID),
    .RUSER(m_axi_res_bundle_RUSER),
    .RRESP(m_axi_res_bundle_RRESP),
    .BVALID(m_axi_res_bundle_BVALID),
    .BREADY(m_axi_res_bundle_BREADY),
    .BRESP(m_axi_res_bundle_BRESP),
    .BID(m_axi_res_bundle_BID),
    .BUSER(m_axi_res_bundle_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(res_bundle_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(res_bundle_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(res_bundle_RDATA),
    .I_RID(res_bundle_RID),
    .I_RUSER(res_bundle_RUSER),
    .I_RRESP(res_bundle_RRESP),
    .I_RLAST(res_bundle_RLAST),
    .I_AWVALID(res_bundle_AWVALID),
    .I_AWREADY(res_bundle_AWREADY),
    .I_AWADDR(res_bundle_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(res_bundle_WVALID),
    .I_WREADY(res_bundle_WREADY),
    .I_WDATA(res_bundle_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(res_bundle_BVALID),
    .I_BREADY(res_bundle_BREADY),
    .I_BRESP(res_bundle_BRESP),
    .I_BID(res_bundle_BID),
    .I_BUSER(res_bundle_BUSER)
);

crossProduct_1 grp_crossProduct_1_fu_335(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_crossProduct_1_fu_335_ap_start),
    .ap_done(grp_crossProduct_1_fu_335_ap_done),
    .ap_idle(grp_crossProduct_1_fu_335_ap_idle),
    .ap_ready(grp_crossProduct_1_fu_335_ap_ready),
    .m_axi_Vec3_float_x_AWVALID(grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_AWVALID),
    .m_axi_Vec3_float_x_AWREADY(1'b0),
    .m_axi_Vec3_float_x_AWADDR(grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_AWADDR),
    .m_axi_Vec3_float_x_AWID(grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_AWID),
    .m_axi_Vec3_float_x_AWLEN(grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_AWLEN),
    .m_axi_Vec3_float_x_AWSIZE(grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_AWSIZE),
    .m_axi_Vec3_float_x_AWBURST(grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_AWBURST),
    .m_axi_Vec3_float_x_AWLOCK(grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_AWLOCK),
    .m_axi_Vec3_float_x_AWCACHE(grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_AWCACHE),
    .m_axi_Vec3_float_x_AWPROT(grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_AWPROT),
    .m_axi_Vec3_float_x_AWQOS(grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_AWQOS),
    .m_axi_Vec3_float_x_AWREGION(grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_AWREGION),
    .m_axi_Vec3_float_x_AWUSER(grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_AWUSER),
    .m_axi_Vec3_float_x_WVALID(grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_WVALID),
    .m_axi_Vec3_float_x_WREADY(1'b0),
    .m_axi_Vec3_float_x_WDATA(grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_WDATA),
    .m_axi_Vec3_float_x_WSTRB(grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_WSTRB),
    .m_axi_Vec3_float_x_WLAST(grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_WLAST),
    .m_axi_Vec3_float_x_WID(grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_WID),
    .m_axi_Vec3_float_x_WUSER(grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_WUSER),
    .m_axi_Vec3_float_x_ARVALID(grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARVALID),
    .m_axi_Vec3_float_x_ARREADY(ray_bundle_ARREADY),
    .m_axi_Vec3_float_x_ARADDR(grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARADDR),
    .m_axi_Vec3_float_x_ARID(grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARID),
    .m_axi_Vec3_float_x_ARLEN(grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARLEN),
    .m_axi_Vec3_float_x_ARSIZE(grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARSIZE),
    .m_axi_Vec3_float_x_ARBURST(grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARBURST),
    .m_axi_Vec3_float_x_ARLOCK(grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARLOCK),
    .m_axi_Vec3_float_x_ARCACHE(grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARCACHE),
    .m_axi_Vec3_float_x_ARPROT(grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARPROT),
    .m_axi_Vec3_float_x_ARQOS(grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARQOS),
    .m_axi_Vec3_float_x_ARREGION(grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARREGION),
    .m_axi_Vec3_float_x_ARUSER(grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARUSER),
    .m_axi_Vec3_float_x_RVALID(ray_bundle_RVALID),
    .m_axi_Vec3_float_x_RREADY(grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_RREADY),
    .m_axi_Vec3_float_x_RDATA(ray_bundle_RDATA),
    .m_axi_Vec3_float_x_RLAST(ray_bundle_RLAST),
    .m_axi_Vec3_float_x_RID(ray_bundle_RID),
    .m_axi_Vec3_float_x_RUSER(ray_bundle_RUSER),
    .m_axi_Vec3_float_x_RRESP(ray_bundle_RRESP),
    .m_axi_Vec3_float_x_BVALID(1'b0),
    .m_axi_Vec3_float_x_BREADY(grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_BREADY),
    .m_axi_Vec3_float_x_BRESP(2'd0),
    .m_axi_Vec3_float_x_BID(1'd0),
    .m_axi_Vec3_float_x_BUSER(1'd0),
    .Vec3_float_x_offset(dir_x3_reg_1095),
    .Vec3_float_y_offset(dir_y5_reg_1088),
    .Vec3_float_z_offset(dir_z7_reg_1081),
    .v_x_read(v0v2_x_reg_1123),
    .v_y_read(v0v2_y_reg_1129),
    .v_z_read(v0v2_z_reg_1135),
    .ap_return_0(grp_crossProduct_1_fu_335_ap_return_0),
    .ap_return_1(grp_crossProduct_1_fu_335_ap_return_1),
    .ap_return_2(grp_crossProduct_1_fu_335_ap_return_2)
);

dotProduct_2 grp_dotProduct_2_fu_347(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_dotProduct_2_fu_347_ap_start),
    .ap_done(grp_dotProduct_2_fu_347_ap_done),
    .ap_idle(grp_dotProduct_2_fu_347_ap_idle),
    .ap_ready(grp_dotProduct_2_fu_347_ap_ready),
    .m_axi_Vec3_float_x_AWVALID(grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_AWVALID),
    .m_axi_Vec3_float_x_AWREADY(1'b0),
    .m_axi_Vec3_float_x_AWADDR(grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_AWADDR),
    .m_axi_Vec3_float_x_AWID(grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_AWID),
    .m_axi_Vec3_float_x_AWLEN(grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_AWLEN),
    .m_axi_Vec3_float_x_AWSIZE(grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_AWSIZE),
    .m_axi_Vec3_float_x_AWBURST(grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_AWBURST),
    .m_axi_Vec3_float_x_AWLOCK(grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_AWLOCK),
    .m_axi_Vec3_float_x_AWCACHE(grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_AWCACHE),
    .m_axi_Vec3_float_x_AWPROT(grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_AWPROT),
    .m_axi_Vec3_float_x_AWQOS(grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_AWQOS),
    .m_axi_Vec3_float_x_AWREGION(grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_AWREGION),
    .m_axi_Vec3_float_x_AWUSER(grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_AWUSER),
    .m_axi_Vec3_float_x_WVALID(grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_WVALID),
    .m_axi_Vec3_float_x_WREADY(1'b0),
    .m_axi_Vec3_float_x_WDATA(grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_WDATA),
    .m_axi_Vec3_float_x_WSTRB(grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_WSTRB),
    .m_axi_Vec3_float_x_WLAST(grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_WLAST),
    .m_axi_Vec3_float_x_WID(grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_WID),
    .m_axi_Vec3_float_x_WUSER(grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_WUSER),
    .m_axi_Vec3_float_x_ARVALID(grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARVALID),
    .m_axi_Vec3_float_x_ARREADY(ray_bundle_ARREADY),
    .m_axi_Vec3_float_x_ARADDR(grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARADDR),
    .m_axi_Vec3_float_x_ARID(grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARID),
    .m_axi_Vec3_float_x_ARLEN(grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARLEN),
    .m_axi_Vec3_float_x_ARSIZE(grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARSIZE),
    .m_axi_Vec3_float_x_ARBURST(grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARBURST),
    .m_axi_Vec3_float_x_ARLOCK(grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARLOCK),
    .m_axi_Vec3_float_x_ARCACHE(grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARCACHE),
    .m_axi_Vec3_float_x_ARPROT(grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARPROT),
    .m_axi_Vec3_float_x_ARQOS(grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARQOS),
    .m_axi_Vec3_float_x_ARREGION(grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARREGION),
    .m_axi_Vec3_float_x_ARUSER(grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARUSER),
    .m_axi_Vec3_float_x_RVALID(ray_bundle_RVALID),
    .m_axi_Vec3_float_x_RREADY(grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_RREADY),
    .m_axi_Vec3_float_x_RDATA(ray_bundle_RDATA),
    .m_axi_Vec3_float_x_RLAST(ray_bundle_RLAST),
    .m_axi_Vec3_float_x_RID(ray_bundle_RID),
    .m_axi_Vec3_float_x_RUSER(ray_bundle_RUSER),
    .m_axi_Vec3_float_x_RRESP(ray_bundle_RRESP),
    .m_axi_Vec3_float_x_BVALID(1'b0),
    .m_axi_Vec3_float_x_BREADY(grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_BREADY),
    .m_axi_Vec3_float_x_BRESP(2'd0),
    .m_axi_Vec3_float_x_BID(1'd0),
    .m_axi_Vec3_float_x_BUSER(1'd0),
    .Vec3_float_x_offset(dir_x3_reg_1095),
    .Vec3_float_y_offset(dir_y5_reg_1088),
    .Vec3_float_z_offset(dir_z7_reg_1081),
    .v_x_read(reg_466),
    .v_y_read(qvec_y_reg_1223),
    .v_z_read(qvec_z_reg_1229),
    .ap_return(grp_dotProduct_2_fu_347_ap_return)
);

operator_1 grp_operator_1_fu_359(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_operator_1_fu_359_ap_start),
    .ap_done(grp_operator_1_fu_359_ap_done),
    .ap_idle(grp_operator_1_fu_359_ap_idle),
    .ap_ready(grp_operator_1_fu_359_ap_ready),
    .m_axi_Vec3_float_x_AWVALID(grp_operator_1_fu_359_m_axi_Vec3_float_x_AWVALID),
    .m_axi_Vec3_float_x_AWREADY(1'b0),
    .m_axi_Vec3_float_x_AWADDR(grp_operator_1_fu_359_m_axi_Vec3_float_x_AWADDR),
    .m_axi_Vec3_float_x_AWID(grp_operator_1_fu_359_m_axi_Vec3_float_x_AWID),
    .m_axi_Vec3_float_x_AWLEN(grp_operator_1_fu_359_m_axi_Vec3_float_x_AWLEN),
    .m_axi_Vec3_float_x_AWSIZE(grp_operator_1_fu_359_m_axi_Vec3_float_x_AWSIZE),
    .m_axi_Vec3_float_x_AWBURST(grp_operator_1_fu_359_m_axi_Vec3_float_x_AWBURST),
    .m_axi_Vec3_float_x_AWLOCK(grp_operator_1_fu_359_m_axi_Vec3_float_x_AWLOCK),
    .m_axi_Vec3_float_x_AWCACHE(grp_operator_1_fu_359_m_axi_Vec3_float_x_AWCACHE),
    .m_axi_Vec3_float_x_AWPROT(grp_operator_1_fu_359_m_axi_Vec3_float_x_AWPROT),
    .m_axi_Vec3_float_x_AWQOS(grp_operator_1_fu_359_m_axi_Vec3_float_x_AWQOS),
    .m_axi_Vec3_float_x_AWREGION(grp_operator_1_fu_359_m_axi_Vec3_float_x_AWREGION),
    .m_axi_Vec3_float_x_AWUSER(grp_operator_1_fu_359_m_axi_Vec3_float_x_AWUSER),
    .m_axi_Vec3_float_x_WVALID(grp_operator_1_fu_359_m_axi_Vec3_float_x_WVALID),
    .m_axi_Vec3_float_x_WREADY(1'b0),
    .m_axi_Vec3_float_x_WDATA(grp_operator_1_fu_359_m_axi_Vec3_float_x_WDATA),
    .m_axi_Vec3_float_x_WSTRB(grp_operator_1_fu_359_m_axi_Vec3_float_x_WSTRB),
    .m_axi_Vec3_float_x_WLAST(grp_operator_1_fu_359_m_axi_Vec3_float_x_WLAST),
    .m_axi_Vec3_float_x_WID(grp_operator_1_fu_359_m_axi_Vec3_float_x_WID),
    .m_axi_Vec3_float_x_WUSER(grp_operator_1_fu_359_m_axi_Vec3_float_x_WUSER),
    .m_axi_Vec3_float_x_ARVALID(grp_operator_1_fu_359_m_axi_Vec3_float_x_ARVALID),
    .m_axi_Vec3_float_x_ARREADY(triangle_bundle_ARREADY),
    .m_axi_Vec3_float_x_ARADDR(grp_operator_1_fu_359_m_axi_Vec3_float_x_ARADDR),
    .m_axi_Vec3_float_x_ARID(grp_operator_1_fu_359_m_axi_Vec3_float_x_ARID),
    .m_axi_Vec3_float_x_ARLEN(grp_operator_1_fu_359_m_axi_Vec3_float_x_ARLEN),
    .m_axi_Vec3_float_x_ARSIZE(grp_operator_1_fu_359_m_axi_Vec3_float_x_ARSIZE),
    .m_axi_Vec3_float_x_ARBURST(grp_operator_1_fu_359_m_axi_Vec3_float_x_ARBURST),
    .m_axi_Vec3_float_x_ARLOCK(grp_operator_1_fu_359_m_axi_Vec3_float_x_ARLOCK),
    .m_axi_Vec3_float_x_ARCACHE(grp_operator_1_fu_359_m_axi_Vec3_float_x_ARCACHE),
    .m_axi_Vec3_float_x_ARPROT(grp_operator_1_fu_359_m_axi_Vec3_float_x_ARPROT),
    .m_axi_Vec3_float_x_ARQOS(grp_operator_1_fu_359_m_axi_Vec3_float_x_ARQOS),
    .m_axi_Vec3_float_x_ARREGION(grp_operator_1_fu_359_m_axi_Vec3_float_x_ARREGION),
    .m_axi_Vec3_float_x_ARUSER(grp_operator_1_fu_359_m_axi_Vec3_float_x_ARUSER),
    .m_axi_Vec3_float_x_RVALID(triangle_bundle_RVALID),
    .m_axi_Vec3_float_x_RREADY(grp_operator_1_fu_359_m_axi_Vec3_float_x_RREADY),
    .m_axi_Vec3_float_x_RDATA(triangle_bundle_RDATA),
    .m_axi_Vec3_float_x_RLAST(triangle_bundle_RLAST),
    .m_axi_Vec3_float_x_RID(triangle_bundle_RID),
    .m_axi_Vec3_float_x_RUSER(triangle_bundle_RUSER),
    .m_axi_Vec3_float_x_RRESP(triangle_bundle_RRESP),
    .m_axi_Vec3_float_x_BVALID(1'b0),
    .m_axi_Vec3_float_x_BREADY(grp_operator_1_fu_359_m_axi_Vec3_float_x_BREADY),
    .m_axi_Vec3_float_x_BRESP(2'd0),
    .m_axi_Vec3_float_x_BID(1'd0),
    .m_axi_Vec3_float_x_BUSER(1'd0),
    .Vec3_float_x_offset(grp_operator_1_fu_359_Vec3_float_x_offset),
    .Vec3_float_y_offset(grp_operator_1_fu_359_Vec3_float_y_offset),
    .Vec3_float_z_offset(grp_operator_1_fu_359_Vec3_float_z_offset),
    .v_x_offset(v0_x1_reg_1059),
    .v_y_offset(v0_y1_reg_1052),
    .v_z_offset(v0_z1_reg_1045),
    .ap_return_0(grp_operator_1_fu_359_ap_return_0),
    .ap_return_1(grp_operator_1_fu_359_ap_return_1),
    .ap_return_2(grp_operator_1_fu_359_ap_return_2)
);

operator_sub grp_operator_sub_fu_371(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_operator_sub_fu_371_ap_start),
    .ap_done(grp_operator_sub_fu_371_ap_done),
    .ap_idle(grp_operator_sub_fu_371_ap_idle),
    .ap_ready(grp_operator_sub_fu_371_ap_ready),
    .m_axi_Vec3_float_x_AWVALID(grp_operator_sub_fu_371_m_axi_Vec3_float_x_AWVALID),
    .m_axi_Vec3_float_x_AWREADY(1'b0),
    .m_axi_Vec3_float_x_AWADDR(grp_operator_sub_fu_371_m_axi_Vec3_float_x_AWADDR),
    .m_axi_Vec3_float_x_AWID(grp_operator_sub_fu_371_m_axi_Vec3_float_x_AWID),
    .m_axi_Vec3_float_x_AWLEN(grp_operator_sub_fu_371_m_axi_Vec3_float_x_AWLEN),
    .m_axi_Vec3_float_x_AWSIZE(grp_operator_sub_fu_371_m_axi_Vec3_float_x_AWSIZE),
    .m_axi_Vec3_float_x_AWBURST(grp_operator_sub_fu_371_m_axi_Vec3_float_x_AWBURST),
    .m_axi_Vec3_float_x_AWLOCK(grp_operator_sub_fu_371_m_axi_Vec3_float_x_AWLOCK),
    .m_axi_Vec3_float_x_AWCACHE(grp_operator_sub_fu_371_m_axi_Vec3_float_x_AWCACHE),
    .m_axi_Vec3_float_x_AWPROT(grp_operator_sub_fu_371_m_axi_Vec3_float_x_AWPROT),
    .m_axi_Vec3_float_x_AWQOS(grp_operator_sub_fu_371_m_axi_Vec3_float_x_AWQOS),
    .m_axi_Vec3_float_x_AWREGION(grp_operator_sub_fu_371_m_axi_Vec3_float_x_AWREGION),
    .m_axi_Vec3_float_x_AWUSER(grp_operator_sub_fu_371_m_axi_Vec3_float_x_AWUSER),
    .m_axi_Vec3_float_x_WVALID(grp_operator_sub_fu_371_m_axi_Vec3_float_x_WVALID),
    .m_axi_Vec3_float_x_WREADY(1'b0),
    .m_axi_Vec3_float_x_WDATA(grp_operator_sub_fu_371_m_axi_Vec3_float_x_WDATA),
    .m_axi_Vec3_float_x_WSTRB(grp_operator_sub_fu_371_m_axi_Vec3_float_x_WSTRB),
    .m_axi_Vec3_float_x_WLAST(grp_operator_sub_fu_371_m_axi_Vec3_float_x_WLAST),
    .m_axi_Vec3_float_x_WID(grp_operator_sub_fu_371_m_axi_Vec3_float_x_WID),
    .m_axi_Vec3_float_x_WUSER(grp_operator_sub_fu_371_m_axi_Vec3_float_x_WUSER),
    .m_axi_Vec3_float_x_ARVALID(grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARVALID),
    .m_axi_Vec3_float_x_ARREADY(ray_bundle_ARREADY),
    .m_axi_Vec3_float_x_ARADDR(grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARADDR),
    .m_axi_Vec3_float_x_ARID(grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARID),
    .m_axi_Vec3_float_x_ARLEN(grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARLEN),
    .m_axi_Vec3_float_x_ARSIZE(grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARSIZE),
    .m_axi_Vec3_float_x_ARBURST(grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARBURST),
    .m_axi_Vec3_float_x_ARLOCK(grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARLOCK),
    .m_axi_Vec3_float_x_ARCACHE(grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARCACHE),
    .m_axi_Vec3_float_x_ARPROT(grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARPROT),
    .m_axi_Vec3_float_x_ARQOS(grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARQOS),
    .m_axi_Vec3_float_x_ARREGION(grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARREGION),
    .m_axi_Vec3_float_x_ARUSER(grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARUSER),
    .m_axi_Vec3_float_x_RVALID(ray_bundle_RVALID),
    .m_axi_Vec3_float_x_RREADY(grp_operator_sub_fu_371_m_axi_Vec3_float_x_RREADY),
    .m_axi_Vec3_float_x_RDATA(ray_bundle_RDATA),
    .m_axi_Vec3_float_x_RLAST(ray_bundle_RLAST),
    .m_axi_Vec3_float_x_RID(ray_bundle_RID),
    .m_axi_Vec3_float_x_RUSER(ray_bundle_RUSER),
    .m_axi_Vec3_float_x_RRESP(ray_bundle_RRESP),
    .m_axi_Vec3_float_x_BVALID(1'b0),
    .m_axi_Vec3_float_x_BREADY(grp_operator_sub_fu_371_m_axi_Vec3_float_x_BREADY),
    .m_axi_Vec3_float_x_BRESP(2'd0),
    .m_axi_Vec3_float_x_BID(1'd0),
    .m_axi_Vec3_float_x_BUSER(1'd0),
    .Vec3_float_x_offset(orig_x1_reg_1076),
    .Vec3_float_y_offset(orig_y1_reg_1071),
    .Vec3_float_z_offset(orig_z1_reg_1066),
    .m_axi_v_x_AWVALID(grp_operator_sub_fu_371_m_axi_v_x_AWVALID),
    .m_axi_v_x_AWREADY(1'b0),
    .m_axi_v_x_AWADDR(grp_operator_sub_fu_371_m_axi_v_x_AWADDR),
    .m_axi_v_x_AWID(grp_operator_sub_fu_371_m_axi_v_x_AWID),
    .m_axi_v_x_AWLEN(grp_operator_sub_fu_371_m_axi_v_x_AWLEN),
    .m_axi_v_x_AWSIZE(grp_operator_sub_fu_371_m_axi_v_x_AWSIZE),
    .m_axi_v_x_AWBURST(grp_operator_sub_fu_371_m_axi_v_x_AWBURST),
    .m_axi_v_x_AWLOCK(grp_operator_sub_fu_371_m_axi_v_x_AWLOCK),
    .m_axi_v_x_AWCACHE(grp_operator_sub_fu_371_m_axi_v_x_AWCACHE),
    .m_axi_v_x_AWPROT(grp_operator_sub_fu_371_m_axi_v_x_AWPROT),
    .m_axi_v_x_AWQOS(grp_operator_sub_fu_371_m_axi_v_x_AWQOS),
    .m_axi_v_x_AWREGION(grp_operator_sub_fu_371_m_axi_v_x_AWREGION),
    .m_axi_v_x_AWUSER(grp_operator_sub_fu_371_m_axi_v_x_AWUSER),
    .m_axi_v_x_WVALID(grp_operator_sub_fu_371_m_axi_v_x_WVALID),
    .m_axi_v_x_WREADY(1'b0),
    .m_axi_v_x_WDATA(grp_operator_sub_fu_371_m_axi_v_x_WDATA),
    .m_axi_v_x_WSTRB(grp_operator_sub_fu_371_m_axi_v_x_WSTRB),
    .m_axi_v_x_WLAST(grp_operator_sub_fu_371_m_axi_v_x_WLAST),
    .m_axi_v_x_WID(grp_operator_sub_fu_371_m_axi_v_x_WID),
    .m_axi_v_x_WUSER(grp_operator_sub_fu_371_m_axi_v_x_WUSER),
    .m_axi_v_x_ARVALID(grp_operator_sub_fu_371_m_axi_v_x_ARVALID),
    .m_axi_v_x_ARREADY(triangle_bundle_ARREADY),
    .m_axi_v_x_ARADDR(grp_operator_sub_fu_371_m_axi_v_x_ARADDR),
    .m_axi_v_x_ARID(grp_operator_sub_fu_371_m_axi_v_x_ARID),
    .m_axi_v_x_ARLEN(grp_operator_sub_fu_371_m_axi_v_x_ARLEN),
    .m_axi_v_x_ARSIZE(grp_operator_sub_fu_371_m_axi_v_x_ARSIZE),
    .m_axi_v_x_ARBURST(grp_operator_sub_fu_371_m_axi_v_x_ARBURST),
    .m_axi_v_x_ARLOCK(grp_operator_sub_fu_371_m_axi_v_x_ARLOCK),
    .m_axi_v_x_ARCACHE(grp_operator_sub_fu_371_m_axi_v_x_ARCACHE),
    .m_axi_v_x_ARPROT(grp_operator_sub_fu_371_m_axi_v_x_ARPROT),
    .m_axi_v_x_ARQOS(grp_operator_sub_fu_371_m_axi_v_x_ARQOS),
    .m_axi_v_x_ARREGION(grp_operator_sub_fu_371_m_axi_v_x_ARREGION),
    .m_axi_v_x_ARUSER(grp_operator_sub_fu_371_m_axi_v_x_ARUSER),
    .m_axi_v_x_RVALID(triangle_bundle_RVALID),
    .m_axi_v_x_RREADY(grp_operator_sub_fu_371_m_axi_v_x_RREADY),
    .m_axi_v_x_RDATA(triangle_bundle_RDATA),
    .m_axi_v_x_RLAST(triangle_bundle_RLAST),
    .m_axi_v_x_RID(triangle_bundle_RID),
    .m_axi_v_x_RUSER(triangle_bundle_RUSER),
    .m_axi_v_x_RRESP(triangle_bundle_RRESP),
    .m_axi_v_x_BVALID(1'b0),
    .m_axi_v_x_BREADY(grp_operator_sub_fu_371_m_axi_v_x_BREADY),
    .m_axi_v_x_BRESP(2'd0),
    .m_axi_v_x_BID(1'd0),
    .m_axi_v_x_BUSER(1'd0),
    .v_x_offset(v0_x1_reg_1059),
    .v_y_offset(v0_y1_reg_1052),
    .v_z_offset(v0_z1_reg_1045),
    .ap_return_0(grp_operator_sub_fu_371_ap_return_0),
    .ap_return_1(grp_operator_sub_fu_371_ap_return_1),
    .ap_return_2(grp_operator_sub_fu_371_ap_return_2)
);

rayTI_faddfsub_32eOg #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
rayTI_faddfsub_32eOg_U47(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_385_p0),
    .din1(grp_fu_385_p1),
    .opcode(grp_fu_385_opcode),
    .ce(grp_fu_385_ce),
    .dout(grp_fu_385_p2)
);

rayTI_fsub_32ns_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
rayTI_fsub_32ns_3bkb_U48(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_491),
    .din1(tmp_21_i_reg_1208),
    .ce(1'b1),
    .dout(grp_fu_389_p2)
);

rayTI_fsub_32ns_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
rayTI_fsub_32ns_3bkb_U49(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_22_i_reg_1213),
    .din1(tmp_23_i_reg_1218),
    .ce(1'b1),
    .dout(grp_fu_393_p2)
);

rayTI_fmul_32ns_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
rayTI_fmul_32ns_3cud_U50(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_397_p0),
    .din1(grp_fu_397_p1),
    .ce(grp_fu_397_ce),
    .dout(grp_fu_397_p2)
);

rayTI_fmul_32ns_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
rayTI_fmul_32ns_3cud_U51(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_401_p0),
    .din1(grp_fu_401_p1),
    .ce(grp_fu_401_ce),
    .dout(grp_fu_401_p2)
);

rayTI_fmul_32ns_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
rayTI_fmul_32ns_3cud_U52(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_405_p0),
    .din1(grp_fu_405_p1),
    .ce(grp_fu_405_ce),
    .dout(grp_fu_405_p2)
);

rayTI_fmul_32ns_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
rayTI_fmul_32ns_3cud_U53(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tvec_x_reg_1178),
    .din1(v0v1_z_reg_1116),
    .ce(grp_fu_409_ce),
    .dout(grp_fu_409_p2)
);

rayTI_fmul_32ns_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
rayTI_fmul_32ns_3cud_U54(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tvec_x_reg_1178),
    .din1(v0v1_y_reg_1109),
    .ce(grp_fu_413_ce),
    .dout(grp_fu_413_p2)
);

rayTI_fmul_32ns_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
rayTI_fmul_32ns_3cud_U55(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tvec_y_reg_1185),
    .din1(v0v1_x_reg_1102),
    .ce(grp_fu_417_ce),
    .dout(grp_fu_417_p2)
);

rayTI_fdiv_32ns_3fYi #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
rayTI_fdiv_32ns_3fYi_U56(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(32'd1065353216),
    .din1(reg_466),
    .ce(grp_fu_421_ce),
    .dout(grp_fu_421_p2)
);

rayTI_fcmp_32ns_3g8j #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
rayTI_fcmp_32ns_3g8j_U57(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_426_p0),
    .din1(grp_fu_426_p1),
    .ce(grp_fu_426_ce),
    .opcode(grp_fu_426_opcode),
    .dout(grp_fu_426_p2)
);

rayTI_fcmp_32ns_3g8j #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
rayTI_fcmp_32ns_3g8j_U58(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_431_p0),
    .din1(grp_fu_431_p1),
    .ce(grp_fu_431_ce),
    .opcode(grp_fu_431_opcode),
    .dout(grp_fu_431_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_crossProduct_1_fu_335_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            grp_crossProduct_1_fu_335_ap_start_reg <= 1'b1;
        end else if ((grp_crossProduct_1_fu_335_ap_ready == 1'b1)) begin
            grp_crossProduct_1_fu_335_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_dotProduct_2_fu_347_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state57)) begin
            grp_dotProduct_2_fu_347_ap_start_reg <= 1'b1;
        end else if ((grp_dotProduct_2_fu_347_ap_ready == 1'b1)) begin
            grp_dotProduct_2_fu_347_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_operator_1_fu_359_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
            grp_operator_1_fu_359_ap_start_reg <= 1'b1;
        end else if ((grp_operator_1_fu_359_ap_ready == 1'b1)) begin
            grp_operator_1_fu_359_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_operator_sub_fu_371_ap_start_reg <= 1'b0;
    end else begin
        if (((1'd0 == and_ln42_fu_812_p2) & (1'b1 == ap_CS_fsm_state23))) begin
            grp_operator_sub_fu_371_ap_start_reg <= 1'b1;
        end else if ((grp_operator_sub_fu_371_ap_ready == 1'b1)) begin
            grp_operator_sub_fu_371_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((res_bundle_BVALID == 1'b0) & (ap_predicate_op405_writeresp_state97 == 1'b1)) & (1'd0 == and_ln60_1_reg_1254) & (1'd0 == and_ln60_reg_1240) & (1'd0 == and_ln53_reg_1204) & (1'd0 == and_ln42_reg_1174) & (1'b1 == ap_CS_fsm_state97))) begin
        p_0_reg_318 <= and_ln65_reg_1268;
    end else if ((((1'b1 == ap_CS_fsm_state74) & ((1'd1 == and_ln60_1_fu_954_p2) | (1'd1 == and_ln60_reg_1240))) | ((1'd1 == and_ln42_fu_812_p2) & (1'b1 == ap_CS_fsm_state23)) | ((1'd1 == and_ln53_fu_872_p2) & (res_bundle_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state48)))) begin
        p_0_reg_318 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        and_ln42_reg_1174 <= and_ln42_fu_812_p2;
        res_bundle_addr_1_reg_1162[29 : 0] <= empty_4_fu_698_p1[29 : 0];
        res_bundle_addr_2_reg_1168[29 : 0] <= empty_5_fu_707_p1[29 : 0];
        res_bundle_addr_reg_1156[29 : 0] <= empty_fu_689_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((res_bundle_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state48))) begin
        and_ln53_reg_1204 <= and_ln53_fu_872_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln60_reg_1240) & (1'b1 == ap_CS_fsm_state74))) begin
        and_ln60_1_reg_1254 <= and_ln60_1_fu_954_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((res_bundle_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state68))) begin
        and_ln60_reg_1240 <= and_ln60_fu_914_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state93)) begin
        and_ln65_reg_1268 <= and_ln65_fu_994_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        dir_x3_reg_1095 <= {{dir_x[31:2]}};
        dir_y5_reg_1088 <= {{dir_y[31:2]}};
        dir_z7_reg_1081 <= {{dir_z[31:2]}};
        orig_x1_reg_1076 <= {{orig_x[31:2]}};
        orig_y1_reg_1071 <= {{orig_y[31:2]}};
        orig_z1_reg_1066 <= {{orig_z[31:2]}};
        t1_reg_1010 <= {{t[31:2]}};
        u1_reg_1005 <= {{u[31:2]}};
        v0_x1_reg_1059 <= {{v0_x[31:2]}};
        v0_y1_reg_1052 <= {{v0_y[31:2]}};
        v0_z1_reg_1045 <= {{v0_z[31:2]}};
        v1_reg_1000 <= {{v[31:2]}};
        v1_x1_reg_1040 <= {{v1_x[31:2]}};
        v1_y1_reg_1035 <= {{v1_y[31:2]}};
        v1_z1_reg_1030 <= {{v1_z[31:2]}};
        v2_x1_reg_1025 <= {{v2_x[31:2]}};
        v2_y1_reg_1020 <= {{v2_y[31:2]}};
        v2_z1_reg_1015 <= {{v2_z[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        icmp_ln60_2_reg_1244 <= icmp_ln60_2_fu_938_p2;
        icmp_ln60_3_reg_1249 <= icmp_ln60_3_fu_944_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((res_bundle_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state92))) begin
        icmp_ln65_1_reg_1263 <= icmp_ln65_1_fu_984_p2;
        icmp_ln65_reg_1258 <= icmp_ln65_fu_978_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        invDet_reg_1199 <= grp_fu_421_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_crossProduct_1_fu_335_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        pvec_x_reg_1141 <= grp_crossProduct_1_fu_335_ap_return_0;
        pvec_y_reg_1146 <= grp_crossProduct_1_fu_335_ap_return_1;
        pvec_z_reg_1151 <= grp_crossProduct_1_fu_335_ap_return_2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        qvec_y_reg_1223 <= grp_fu_389_p2;
        qvec_z_reg_1229 <= grp_fu_393_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state11) | ((res_bundle_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state91)) | ((res_bundle_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state42)))) begin
        reg_451 <= grp_fu_397_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state11))) begin
        reg_461 <= grp_fu_401_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state16))) begin
        reg_466 <= grp_fu_385_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state33))) begin
        reg_477 <= grp_fu_385_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state51) | ((res_bundle_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state62)))) begin
        reg_483 <= grp_fu_397_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state77))) begin
        reg_491 <= grp_fu_405_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_dotProduct_2_fu_347_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state58))) begin
        tmp_19_reg_1235 <= grp_dotProduct_2_fu_347_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        tmp_21_i_reg_1208 <= grp_fu_409_p2;
        tmp_22_i_reg_1213 <= grp_fu_413_p2;
        tmp_23_i_reg_1218 <= grp_fu_417_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_operator_sub_fu_371_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
        tvec_x_reg_1178 <= grp_operator_sub_fu_371_ap_return_0;
        tvec_y_reg_1185 <= grp_operator_sub_fu_371_ap_return_1;
        tvec_z_reg_1192 <= grp_operator_sub_fu_371_ap_return_2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_operator_1_fu_359_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        v0v1_x_reg_1102 <= grp_operator_1_fu_359_ap_return_0;
        v0v1_y_reg_1109 <= grp_operator_1_fu_359_ap_return_1;
        v0v1_z_reg_1116 <= grp_operator_1_fu_359_ap_return_2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_operator_1_fu_359_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        v0v2_x_reg_1123 <= grp_operator_1_fu_359_ap_return_0;
        v0v2_y_reg_1129 <= grp_operator_1_fu_359_ap_return_1;
        v0v2_z_reg_1135 <= grp_operator_1_fu_359_ap_return_2;
    end
end

always @ (*) begin
    if ((~((res_bundle_BVALID == 1'b0) & (ap_predicate_op405_writeresp_state97 == 1'b1)) & (1'b1 == ap_CS_fsm_state97))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'd0 == and_ln60_1_reg_1254) & (1'd0 == and_ln60_reg_1240) & (1'd0 == and_ln53_reg_1204) & (1'd0 == and_ln42_reg_1174) & (1'b1 == ap_CS_fsm_state97))) begin
        ap_phi_mux_p_0_phi_fu_322_p8 = and_ln65_reg_1268;
    end else begin
        ap_phi_mux_p_0_phi_fu_322_p8 = p_0_reg_318;
    end
end

always @ (*) begin
    if ((~((res_bundle_BVALID == 1'b0) & (ap_predicate_op405_writeresp_state97 == 1'b1)) & (1'b1 == ap_CS_fsm_state97))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state12) | ((res_bundle_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state68)))) begin
        grp_fu_385_ce = 1'b1;
    end else begin
        grp_fu_385_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        grp_fu_385_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state12) | ((res_bundle_BVALID == 1'b1) & (1'd0 == and_ln60_fu_914_p2) & (1'b1 == ap_CS_fsm_state68)))) begin
        grp_fu_385_opcode = 2'd0;
    end else begin
        grp_fu_385_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        grp_fu_385_p0 = reg_483;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_fu_385_p0 = reg_477;
    end else if (((1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state17))) begin
        grp_fu_385_p0 = reg_466;
    end else if (((1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state12))) begin
        grp_fu_385_p0 = reg_451;
    end else begin
        grp_fu_385_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state83)) begin
        grp_fu_385_p1 = reg_491;
    end else if ((1'b1 == ap_CS_fsm_state68)) begin
        grp_fu_385_p1 = reg_483;
    end else if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state17))) begin
        grp_fu_385_p1 = reg_451;
    end else if (((1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state12))) begin
        grp_fu_385_p1 = reg_461;
    end else begin
        grp_fu_385_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state8) | ((res_bundle_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state91)) | ((res_bundle_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state48)) | ((res_bundle_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state42)) | ((res_bundle_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state62)))) begin
        grp_fu_397_ce = 1'b1;
    end else begin
        grp_fu_397_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        grp_fu_397_p0 = v0v2_x_reg_1123;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        grp_fu_397_p0 = tmp_19_reg_1235;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        grp_fu_397_p0 = tvec_y_reg_1185;
    end else if (((1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state39))) begin
        grp_fu_397_p0 = reg_466;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_fu_397_p0 = tvec_z_reg_1192;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fu_397_p0 = tvec_x_reg_1178;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_397_p0 = v0v1_z_reg_1116;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_397_p0 = v0v1_x_reg_1102;
    end else begin
        grp_fu_397_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        grp_fu_397_p1 = reg_466;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        grp_fu_397_p1 = v0v1_z_reg_1116;
    end else if (((1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state39))) begin
        grp_fu_397_p1 = invDet_reg_1199;
    end else if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state13))) begin
        grp_fu_397_p1 = pvec_z_reg_1151;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state8))) begin
        grp_fu_397_p1 = pvec_x_reg_1141;
    end else begin
        grp_fu_397_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state8) | ((res_bundle_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state48)))) begin
        grp_fu_401_ce = 1'b1;
    end else begin
        grp_fu_401_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        grp_fu_401_p0 = v0v2_y_reg_1129;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        grp_fu_401_p0 = tvec_z_reg_1192;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fu_401_p0 = tvec_y_reg_1185;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_401_p0 = v0v1_y_reg_1109;
    end else begin
        grp_fu_401_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        grp_fu_401_p1 = qvec_y_reg_1223;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        grp_fu_401_p1 = v0v1_y_reg_1109;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state8))) begin
        grp_fu_401_p1 = pvec_y_reg_1146;
    end else begin
        grp_fu_401_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | ((res_bundle_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state48)))) begin
        grp_fu_405_ce = 1'b1;
    end else begin
        grp_fu_405_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        grp_fu_405_p0 = v0v2_z_reg_1135;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        grp_fu_405_p0 = tvec_z_reg_1192;
    end else begin
        grp_fu_405_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        grp_fu_405_p1 = qvec_z_reg_1229;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        grp_fu_405_p1 = v0v1_x_reg_1102;
    end else begin
        grp_fu_405_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | ((res_bundle_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state48)))) begin
        grp_fu_409_ce = 1'b1;
    end else begin
        grp_fu_409_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | ((res_bundle_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state48)))) begin
        grp_fu_413_ce = 1'b1;
    end else begin
        grp_fu_413_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | ((res_bundle_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state48)))) begin
        grp_fu_417_ce = 1'b1;
    end else begin
        grp_fu_417_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state29) | ((grp_operator_sub_fu_371_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state24)))) begin
        grp_fu_421_ce = 1'b1;
    end else begin
        grp_fu_421_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state22) | ((res_bundle_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state92)) | ((res_bundle_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state48)) | ((res_bundle_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state68)))) begin
        grp_fu_426_ce = 1'b1;
    end else begin
        grp_fu_426_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state47))) begin
        grp_fu_426_opcode = 5'd4;
    end else if (((1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_fu_426_opcode = 5'd2;
    end else begin
        grp_fu_426_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        grp_fu_426_p0 = reg_477;
    end else if ((1'b1 == ap_CS_fsm_state67)) begin
        grp_fu_426_p0 = reg_483;
    end else if (((1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state47))) begin
        grp_fu_426_p0 = reg_451;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_426_p0 = reg_466;
    end else begin
        grp_fu_426_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        grp_fu_426_p1 = 32'd1065353216;
    end else if (((1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state47))) begin
        grp_fu_426_p1 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_426_p1 = 32'd2989214839;
    end else begin
        grp_fu_426_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state22) | ((res_bundle_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state48)))) begin
        grp_fu_431_ce = 1'b1;
    end else begin
        grp_fu_431_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        grp_fu_431_opcode = 5'd2;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_431_opcode = 5'd4;
    end else begin
        grp_fu_431_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        grp_fu_431_p0 = reg_451;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_431_p0 = reg_466;
    end else begin
        grp_fu_431_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        grp_fu_431_p1 = 32'd1065353216;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_431_p1 = 32'd841731191;
    end else begin
        grp_fu_431_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_operator_1_fu_359_Vec3_float_x_offset = v2_x1_reg_1025;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_operator_1_fu_359_Vec3_float_x_offset = v1_x1_reg_1040;
    end else begin
        grp_operator_1_fu_359_Vec3_float_x_offset = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_operator_1_fu_359_Vec3_float_y_offset = v2_y1_reg_1020;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_operator_1_fu_359_Vec3_float_y_offset = v1_y1_reg_1035;
    end else begin
        grp_operator_1_fu_359_Vec3_float_y_offset = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_operator_1_fu_359_Vec3_float_z_offset = v2_z1_reg_1015;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_operator_1_fu_359_Vec3_float_z_offset = v1_z1_reg_1030;
    end else begin
        grp_operator_1_fu_359_Vec3_float_z_offset = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | ((1'd0 == and_ln42_fu_812_p2) & (1'b1 == ap_CS_fsm_state23)))) begin
        ray_bundle_ARADDR = grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARADDR;
    end else if (((1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57))) begin
        ray_bundle_ARADDR = grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARADDR;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        ray_bundle_ARADDR = grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARADDR;
    end else begin
        ray_bundle_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | ((1'd0 == and_ln42_fu_812_p2) & (1'b1 == ap_CS_fsm_state23)))) begin
        ray_bundle_ARBURST = grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARBURST;
    end else if (((1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57))) begin
        ray_bundle_ARBURST = grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARBURST;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        ray_bundle_ARBURST = grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARBURST;
    end else begin
        ray_bundle_ARBURST = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | ((1'd0 == and_ln42_fu_812_p2) & (1'b1 == ap_CS_fsm_state23)))) begin
        ray_bundle_ARCACHE = grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARCACHE;
    end else if (((1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57))) begin
        ray_bundle_ARCACHE = grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARCACHE;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        ray_bundle_ARCACHE = grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARCACHE;
    end else begin
        ray_bundle_ARCACHE = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | ((1'd0 == and_ln42_fu_812_p2) & (1'b1 == ap_CS_fsm_state23)))) begin
        ray_bundle_ARID = grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARID;
    end else if (((1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57))) begin
        ray_bundle_ARID = grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARID;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        ray_bundle_ARID = grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARID;
    end else begin
        ray_bundle_ARID = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | ((1'd0 == and_ln42_fu_812_p2) & (1'b1 == ap_CS_fsm_state23)))) begin
        ray_bundle_ARLEN = grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARLEN;
    end else if (((1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57))) begin
        ray_bundle_ARLEN = grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARLEN;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        ray_bundle_ARLEN = grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARLEN;
    end else begin
        ray_bundle_ARLEN = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | ((1'd0 == and_ln42_fu_812_p2) & (1'b1 == ap_CS_fsm_state23)))) begin
        ray_bundle_ARLOCK = grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARLOCK;
    end else if (((1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57))) begin
        ray_bundle_ARLOCK = grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARLOCK;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        ray_bundle_ARLOCK = grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARLOCK;
    end else begin
        ray_bundle_ARLOCK = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | ((1'd0 == and_ln42_fu_812_p2) & (1'b1 == ap_CS_fsm_state23)))) begin
        ray_bundle_ARPROT = grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARPROT;
    end else if (((1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57))) begin
        ray_bundle_ARPROT = grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARPROT;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        ray_bundle_ARPROT = grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARPROT;
    end else begin
        ray_bundle_ARPROT = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | ((1'd0 == and_ln42_fu_812_p2) & (1'b1 == ap_CS_fsm_state23)))) begin
        ray_bundle_ARQOS = grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARQOS;
    end else if (((1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57))) begin
        ray_bundle_ARQOS = grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARQOS;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        ray_bundle_ARQOS = grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARQOS;
    end else begin
        ray_bundle_ARQOS = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | ((1'd0 == and_ln42_fu_812_p2) & (1'b1 == ap_CS_fsm_state23)))) begin
        ray_bundle_ARREGION = grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARREGION;
    end else if (((1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57))) begin
        ray_bundle_ARREGION = grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARREGION;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        ray_bundle_ARREGION = grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARREGION;
    end else begin
        ray_bundle_ARREGION = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | ((1'd0 == and_ln42_fu_812_p2) & (1'b1 == ap_CS_fsm_state23)))) begin
        ray_bundle_ARSIZE = grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARSIZE;
    end else if (((1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57))) begin
        ray_bundle_ARSIZE = grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARSIZE;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        ray_bundle_ARSIZE = grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARSIZE;
    end else begin
        ray_bundle_ARSIZE = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | ((1'd0 == and_ln42_fu_812_p2) & (1'b1 == ap_CS_fsm_state23)))) begin
        ray_bundle_ARUSER = grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARUSER;
    end else if (((1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57))) begin
        ray_bundle_ARUSER = grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARUSER;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        ray_bundle_ARUSER = grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARUSER;
    end else begin
        ray_bundle_ARUSER = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | ((1'd0 == and_ln42_fu_812_p2) & (1'b1 == ap_CS_fsm_state23)))) begin
        ray_bundle_ARVALID = grp_operator_sub_fu_371_m_axi_Vec3_float_x_ARVALID;
    end else if (((1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57))) begin
        ray_bundle_ARVALID = grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_ARVALID;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        ray_bundle_ARVALID = grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_ARVALID;
    end else begin
        ray_bundle_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | ((1'd0 == and_ln42_fu_812_p2) & (1'b1 == ap_CS_fsm_state23)))) begin
        ray_bundle_RREADY = grp_operator_sub_fu_371_m_axi_Vec3_float_x_RREADY;
    end else if (((1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57))) begin
        ray_bundle_RREADY = grp_dotProduct_2_fu_347_m_axi_Vec3_float_x_RREADY;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        ray_bundle_RREADY = grp_crossProduct_1_fu_335_m_axi_Vec3_float_x_RREADY;
    end else begin
        ray_bundle_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((res_bundle_AWREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state91)) begin
            res_bundle_AWADDR = res_bundle_addr_2_reg_1168;
        end else if ((1'b1 == ap_CS_fsm_state62)) begin
            res_bundle_AWADDR = res_bundle_addr_reg_1156;
        end else if ((1'b1 == ap_CS_fsm_state42)) begin
            res_bundle_AWADDR = res_bundle_addr_1_reg_1162;
        end else begin
            res_bundle_AWADDR = 'bx;
        end
    end else begin
        res_bundle_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((res_bundle_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state91)) | ((res_bundle_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state42)) | ((res_bundle_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state62)))) begin
        res_bundle_AWVALID = 1'b1;
    end else begin
        res_bundle_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((~((res_bundle_BVALID == 1'b0) & (ap_predicate_op405_writeresp_state97 == 1'b1)) & (1'b1 == ap_CS_fsm_state97) & (ap_predicate_op405_writeresp_state97 == 1'b1)) | ((res_bundle_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state48)) | ((res_bundle_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state68)))) begin
        res_bundle_BREADY = 1'b1;
    end else begin
        res_bundle_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        res_bundle_WDATA = reg_483;
    end else if (((1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state43))) begin
        res_bundle_WDATA = reg_451;
    end else begin
        res_bundle_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((res_bundle_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state92)) | ((res_bundle_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state43)) | ((res_bundle_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state63)))) begin
        res_bundle_WVALID = 1'b1;
    end else begin
        res_bundle_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state62))) begin
        res_bundle_blk_n_AW = m_axi_res_bundle_AWREADY;
    end else begin
        res_bundle_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state68) | ((1'd0 == and_ln60_1_reg_1254) & (1'd0 == and_ln60_reg_1240) & (1'd0 == and_ln53_reg_1204) & (1'd0 == and_ln42_reg_1174) & (1'b1 == ap_CS_fsm_state97)))) begin
        res_bundle_blk_n_B = m_axi_res_bundle_BVALID;
    end else begin
        res_bundle_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state63))) begin
        res_bundle_blk_n_W = m_axi_res_bundle_WREADY;
    end else begin
        res_bundle_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | ((1'd0 == and_ln42_fu_812_p2) & (1'b1 == ap_CS_fsm_state23)))) begin
        triangle_bundle_ARADDR = grp_operator_sub_fu_371_m_axi_v_x_ARADDR;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        triangle_bundle_ARADDR = grp_operator_1_fu_359_m_axi_Vec3_float_x_ARADDR;
    end else begin
        triangle_bundle_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | ((1'd0 == and_ln42_fu_812_p2) & (1'b1 == ap_CS_fsm_state23)))) begin
        triangle_bundle_ARBURST = grp_operator_sub_fu_371_m_axi_v_x_ARBURST;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        triangle_bundle_ARBURST = grp_operator_1_fu_359_m_axi_Vec3_float_x_ARBURST;
    end else begin
        triangle_bundle_ARBURST = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | ((1'd0 == and_ln42_fu_812_p2) & (1'b1 == ap_CS_fsm_state23)))) begin
        triangle_bundle_ARCACHE = grp_operator_sub_fu_371_m_axi_v_x_ARCACHE;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        triangle_bundle_ARCACHE = grp_operator_1_fu_359_m_axi_Vec3_float_x_ARCACHE;
    end else begin
        triangle_bundle_ARCACHE = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | ((1'd0 == and_ln42_fu_812_p2) & (1'b1 == ap_CS_fsm_state23)))) begin
        triangle_bundle_ARID = grp_operator_sub_fu_371_m_axi_v_x_ARID;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        triangle_bundle_ARID = grp_operator_1_fu_359_m_axi_Vec3_float_x_ARID;
    end else begin
        triangle_bundle_ARID = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | ((1'd0 == and_ln42_fu_812_p2) & (1'b1 == ap_CS_fsm_state23)))) begin
        triangle_bundle_ARLEN = grp_operator_sub_fu_371_m_axi_v_x_ARLEN;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        triangle_bundle_ARLEN = grp_operator_1_fu_359_m_axi_Vec3_float_x_ARLEN;
    end else begin
        triangle_bundle_ARLEN = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | ((1'd0 == and_ln42_fu_812_p2) & (1'b1 == ap_CS_fsm_state23)))) begin
        triangle_bundle_ARLOCK = grp_operator_sub_fu_371_m_axi_v_x_ARLOCK;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        triangle_bundle_ARLOCK = grp_operator_1_fu_359_m_axi_Vec3_float_x_ARLOCK;
    end else begin
        triangle_bundle_ARLOCK = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | ((1'd0 == and_ln42_fu_812_p2) & (1'b1 == ap_CS_fsm_state23)))) begin
        triangle_bundle_ARPROT = grp_operator_sub_fu_371_m_axi_v_x_ARPROT;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        triangle_bundle_ARPROT = grp_operator_1_fu_359_m_axi_Vec3_float_x_ARPROT;
    end else begin
        triangle_bundle_ARPROT = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | ((1'd0 == and_ln42_fu_812_p2) & (1'b1 == ap_CS_fsm_state23)))) begin
        triangle_bundle_ARQOS = grp_operator_sub_fu_371_m_axi_v_x_ARQOS;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        triangle_bundle_ARQOS = grp_operator_1_fu_359_m_axi_Vec3_float_x_ARQOS;
    end else begin
        triangle_bundle_ARQOS = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | ((1'd0 == and_ln42_fu_812_p2) & (1'b1 == ap_CS_fsm_state23)))) begin
        triangle_bundle_ARREGION = grp_operator_sub_fu_371_m_axi_v_x_ARREGION;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        triangle_bundle_ARREGION = grp_operator_1_fu_359_m_axi_Vec3_float_x_ARREGION;
    end else begin
        triangle_bundle_ARREGION = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | ((1'd0 == and_ln42_fu_812_p2) & (1'b1 == ap_CS_fsm_state23)))) begin
        triangle_bundle_ARSIZE = grp_operator_sub_fu_371_m_axi_v_x_ARSIZE;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        triangle_bundle_ARSIZE = grp_operator_1_fu_359_m_axi_Vec3_float_x_ARSIZE;
    end else begin
        triangle_bundle_ARSIZE = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | ((1'd0 == and_ln42_fu_812_p2) & (1'b1 == ap_CS_fsm_state23)))) begin
        triangle_bundle_ARUSER = grp_operator_sub_fu_371_m_axi_v_x_ARUSER;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        triangle_bundle_ARUSER = grp_operator_1_fu_359_m_axi_Vec3_float_x_ARUSER;
    end else begin
        triangle_bundle_ARUSER = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | ((1'd0 == and_ln42_fu_812_p2) & (1'b1 == ap_CS_fsm_state23)))) begin
        triangle_bundle_ARVALID = grp_operator_sub_fu_371_m_axi_v_x_ARVALID;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        triangle_bundle_ARVALID = grp_operator_1_fu_359_m_axi_Vec3_float_x_ARVALID;
    end else begin
        triangle_bundle_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | ((1'd0 == and_ln42_fu_812_p2) & (1'b1 == ap_CS_fsm_state23)))) begin
        triangle_bundle_RREADY = grp_operator_sub_fu_371_m_axi_v_x_RREADY;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        triangle_bundle_RREADY = grp_operator_1_fu_359_m_axi_Vec3_float_x_RREADY;
    end else begin
        triangle_bundle_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((grp_operator_1_fu_359_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((grp_operator_1_fu_359_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((grp_crossProduct_1_fu_335_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            if (((1'd1 == and_ln42_fu_812_p2) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state97;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((grp_operator_sub_fu_371_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            if (((res_bundle_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state42))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_state43 : begin
            if (((res_bundle_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state43))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            if (((1'd1 == and_ln53_fu_872_p2) & (res_bundle_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state48))) begin
                ap_NS_fsm = ap_ST_fsm_state97;
            end else if (((res_bundle_BVALID == 1'b1) & (1'd0 == and_ln53_fu_872_p2) & (1'b1 == ap_CS_fsm_state48))) begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            if (((grp_dotProduct_2_fu_347_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state58))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            if (((res_bundle_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state62))) begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end
        end
        ap_ST_fsm_state63 : begin
            if (((res_bundle_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state63))) begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            if (((1'd1 == and_ln60_fu_914_p2) & (res_bundle_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state68))) begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end else if (((res_bundle_BVALID == 1'b1) & (1'd0 == and_ln60_fu_914_p2) & (1'b1 == ap_CS_fsm_state68))) begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            if (((1'b1 == ap_CS_fsm_state74) & ((1'd1 == and_ln60_1_fu_954_p2) | (1'd1 == and_ln60_reg_1240)))) begin
                ap_NS_fsm = ap_ST_fsm_state97;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            if (((res_bundle_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state91))) begin
                ap_NS_fsm = ap_ST_fsm_state92;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state91;
            end
        end
        ap_ST_fsm_state92 : begin
            if (((res_bundle_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state92))) begin
                ap_NS_fsm = ap_ST_fsm_state93;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state92;
            end
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            if ((~((res_bundle_BVALID == 1'b0) & (ap_predicate_op405_writeresp_state97 == 1'b1)) & (1'b1 == ap_CS_fsm_state97))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state97;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln42_1_fu_806_p2 = (or_ln42_fu_800_p2 & grp_fu_426_p2);

assign and_ln42_fu_812_p2 = (grp_fu_431_p2 & and_ln42_1_fu_806_p2);

assign and_ln53_fu_872_p2 = (or_ln53_fu_860_p2 & or_ln53_1_fu_866_p2);

assign and_ln60_1_fu_954_p2 = (or_ln60_1_fu_950_p2 & grp_fu_426_p2);

assign and_ln60_fu_914_p2 = (or_ln60_fu_908_p2 & grp_fu_426_p2);

assign and_ln65_fu_994_p2 = (or_ln65_fu_990_p2 & grp_fu_426_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd88];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state90 = ap_CS_fsm[32'd89];

assign ap_CS_fsm_state91 = ap_CS_fsm[32'd90];

assign ap_CS_fsm_state92 = ap_CS_fsm[32'd91];

assign ap_CS_fsm_state93 = ap_CS_fsm[32'd92];

assign ap_CS_fsm_state97 = ap_CS_fsm[32'd96];

always @ (*) begin
    ap_block_state97 = ((res_bundle_BVALID == 1'b0) & (ap_predicate_op405_writeresp_state97 == 1'b1));
end

always @ (*) begin
    ap_predicate_op405_writeresp_state97 = ((1'd0 == and_ln60_1_reg_1254) & (1'd0 == and_ln60_reg_1240) & (1'd0 == and_ln53_reg_1204) & (1'd0 == and_ln42_reg_1174));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bitcast_ln42_fu_770_p1 = reg_466;

assign bitcast_ln53_fu_830_p1 = reg_451;

assign bitcast_ln60_1_fu_920_p1 = reg_477;

assign bitcast_ln60_fu_878_p1 = reg_483;

assign bitcast_ln65_fu_960_p1 = reg_451;

assign empty_4_fu_698_p1 = u1_reg_1005;

assign empty_5_fu_707_p1 = t1_reg_1010;

assign empty_fu_689_p1 = v1_reg_1000;

assign grp_crossProduct_1_fu_335_ap_start = grp_crossProduct_1_fu_335_ap_start_reg;

assign grp_dotProduct_2_fu_347_ap_start = grp_dotProduct_2_fu_347_ap_start_reg;

assign grp_operator_1_fu_359_ap_start = grp_operator_1_fu_359_ap_start_reg;

assign grp_operator_sub_fu_371_ap_start = grp_operator_sub_fu_371_ap_start_reg;

assign icmp_ln42_1_fu_794_p2 = ((trunc_ln42_fu_784_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_788_p2 = ((tmp_fu_774_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln53_1_fu_854_p2 = ((trunc_ln53_fu_844_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln53_fu_848_p2 = ((tmp_5_fu_834_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln60_1_fu_902_p2 = ((trunc_ln60_fu_892_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln60_2_fu_938_p2 = ((tmp_14_fu_924_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln60_3_fu_944_p2 = ((trunc_ln60_1_fu_934_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln60_fu_896_p2 = ((tmp_12_fu_882_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln65_1_fu_984_p2 = ((trunc_ln65_fu_974_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_978_p2 = ((tmp_16_fu_964_p4 != 8'd255) ? 1'b1 : 1'b0);

assign or_ln42_fu_800_p2 = (icmp_ln42_fu_788_p2 | icmp_ln42_1_fu_794_p2);

assign or_ln53_1_fu_866_p2 = (grp_fu_431_p2 | grp_fu_426_p2);

assign or_ln53_fu_860_p2 = (icmp_ln53_fu_848_p2 | icmp_ln53_1_fu_854_p2);

assign or_ln60_1_fu_950_p2 = (icmp_ln60_3_reg_1249 | icmp_ln60_2_reg_1244);

assign or_ln60_fu_908_p2 = (icmp_ln60_fu_896_p2 | icmp_ln60_1_fu_902_p2);

assign or_ln65_fu_990_p2 = (icmp_ln65_reg_1258 | icmp_ln65_1_reg_1263);

assign tmp_12_fu_882_p4 = {{bitcast_ln60_fu_878_p1[30:23]}};

assign tmp_14_fu_924_p4 = {{bitcast_ln60_1_fu_920_p1[30:23]}};

assign tmp_16_fu_964_p4 = {{bitcast_ln65_fu_960_p1[30:23]}};

assign tmp_5_fu_834_p4 = {{bitcast_ln53_fu_830_p1[30:23]}};

assign tmp_fu_774_p4 = {{bitcast_ln42_fu_770_p1[30:23]}};

assign trunc_ln42_fu_784_p1 = bitcast_ln42_fu_770_p1[22:0];

assign trunc_ln53_fu_844_p1 = bitcast_ln53_fu_830_p1[22:0];

assign trunc_ln60_1_fu_934_p1 = bitcast_ln60_1_fu_920_p1[22:0];

assign trunc_ln60_fu_892_p1 = bitcast_ln60_fu_878_p1[22:0];

assign trunc_ln65_fu_974_p1 = bitcast_ln65_fu_960_p1[22:0];

always @ (posedge ap_clk) begin
    res_bundle_addr_reg_1156[31:30] <= 2'b00;
    res_bundle_addr_1_reg_1162[31:30] <= 2'b00;
    res_bundle_addr_2_reg_1168[31:30] <= 2'b00;
end

endmodule //rayTI
