// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module operator_sub (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_Vec3_float_x_AWVALID,
        m_axi_Vec3_float_x_AWREADY,
        m_axi_Vec3_float_x_AWADDR,
        m_axi_Vec3_float_x_AWID,
        m_axi_Vec3_float_x_AWLEN,
        m_axi_Vec3_float_x_AWSIZE,
        m_axi_Vec3_float_x_AWBURST,
        m_axi_Vec3_float_x_AWLOCK,
        m_axi_Vec3_float_x_AWCACHE,
        m_axi_Vec3_float_x_AWPROT,
        m_axi_Vec3_float_x_AWQOS,
        m_axi_Vec3_float_x_AWREGION,
        m_axi_Vec3_float_x_AWUSER,
        m_axi_Vec3_float_x_WVALID,
        m_axi_Vec3_float_x_WREADY,
        m_axi_Vec3_float_x_WDATA,
        m_axi_Vec3_float_x_WSTRB,
        m_axi_Vec3_float_x_WLAST,
        m_axi_Vec3_float_x_WID,
        m_axi_Vec3_float_x_WUSER,
        m_axi_Vec3_float_x_ARVALID,
        m_axi_Vec3_float_x_ARREADY,
        m_axi_Vec3_float_x_ARADDR,
        m_axi_Vec3_float_x_ARID,
        m_axi_Vec3_float_x_ARLEN,
        m_axi_Vec3_float_x_ARSIZE,
        m_axi_Vec3_float_x_ARBURST,
        m_axi_Vec3_float_x_ARLOCK,
        m_axi_Vec3_float_x_ARCACHE,
        m_axi_Vec3_float_x_ARPROT,
        m_axi_Vec3_float_x_ARQOS,
        m_axi_Vec3_float_x_ARREGION,
        m_axi_Vec3_float_x_ARUSER,
        m_axi_Vec3_float_x_RVALID,
        m_axi_Vec3_float_x_RREADY,
        m_axi_Vec3_float_x_RDATA,
        m_axi_Vec3_float_x_RLAST,
        m_axi_Vec3_float_x_RID,
        m_axi_Vec3_float_x_RUSER,
        m_axi_Vec3_float_x_RRESP,
        m_axi_Vec3_float_x_BVALID,
        m_axi_Vec3_float_x_BREADY,
        m_axi_Vec3_float_x_BRESP,
        m_axi_Vec3_float_x_BID,
        m_axi_Vec3_float_x_BUSER,
        Vec3_float_x_offset,
        Vec3_float_y_offset,
        Vec3_float_z_offset,
        m_axi_v_x_AWVALID,
        m_axi_v_x_AWREADY,
        m_axi_v_x_AWADDR,
        m_axi_v_x_AWID,
        m_axi_v_x_AWLEN,
        m_axi_v_x_AWSIZE,
        m_axi_v_x_AWBURST,
        m_axi_v_x_AWLOCK,
        m_axi_v_x_AWCACHE,
        m_axi_v_x_AWPROT,
        m_axi_v_x_AWQOS,
        m_axi_v_x_AWREGION,
        m_axi_v_x_AWUSER,
        m_axi_v_x_WVALID,
        m_axi_v_x_WREADY,
        m_axi_v_x_WDATA,
        m_axi_v_x_WSTRB,
        m_axi_v_x_WLAST,
        m_axi_v_x_WID,
        m_axi_v_x_WUSER,
        m_axi_v_x_ARVALID,
        m_axi_v_x_ARREADY,
        m_axi_v_x_ARADDR,
        m_axi_v_x_ARID,
        m_axi_v_x_ARLEN,
        m_axi_v_x_ARSIZE,
        m_axi_v_x_ARBURST,
        m_axi_v_x_ARLOCK,
        m_axi_v_x_ARCACHE,
        m_axi_v_x_ARPROT,
        m_axi_v_x_ARQOS,
        m_axi_v_x_ARREGION,
        m_axi_v_x_ARUSER,
        m_axi_v_x_RVALID,
        m_axi_v_x_RREADY,
        m_axi_v_x_RDATA,
        m_axi_v_x_RLAST,
        m_axi_v_x_RID,
        m_axi_v_x_RUSER,
        m_axi_v_x_RRESP,
        m_axi_v_x_BVALID,
        m_axi_v_x_BREADY,
        m_axi_v_x_BRESP,
        m_axi_v_x_BID,
        m_axi_v_x_BUSER,
        v_x_offset,
        v_y_offset,
        v_z_offset,
        ap_return_0,
        ap_return_1,
        ap_return_2
);

parameter    ap_ST_fsm_state1 = 15'd1;
parameter    ap_ST_fsm_state2 = 15'd2;
parameter    ap_ST_fsm_state3 = 15'd4;
parameter    ap_ST_fsm_state4 = 15'd8;
parameter    ap_ST_fsm_state5 = 15'd16;
parameter    ap_ST_fsm_state6 = 15'd32;
parameter    ap_ST_fsm_state7 = 15'd64;
parameter    ap_ST_fsm_state8 = 15'd128;
parameter    ap_ST_fsm_state9 = 15'd256;
parameter    ap_ST_fsm_state10 = 15'd512;
parameter    ap_ST_fsm_state11 = 15'd1024;
parameter    ap_ST_fsm_state12 = 15'd2048;
parameter    ap_ST_fsm_state13 = 15'd4096;
parameter    ap_ST_fsm_state14 = 15'd8192;
parameter    ap_ST_fsm_state15 = 15'd16384;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_Vec3_float_x_AWVALID;
input   m_axi_Vec3_float_x_AWREADY;
output  [31:0] m_axi_Vec3_float_x_AWADDR;
output  [0:0] m_axi_Vec3_float_x_AWID;
output  [31:0] m_axi_Vec3_float_x_AWLEN;
output  [2:0] m_axi_Vec3_float_x_AWSIZE;
output  [1:0] m_axi_Vec3_float_x_AWBURST;
output  [1:0] m_axi_Vec3_float_x_AWLOCK;
output  [3:0] m_axi_Vec3_float_x_AWCACHE;
output  [2:0] m_axi_Vec3_float_x_AWPROT;
output  [3:0] m_axi_Vec3_float_x_AWQOS;
output  [3:0] m_axi_Vec3_float_x_AWREGION;
output  [0:0] m_axi_Vec3_float_x_AWUSER;
output   m_axi_Vec3_float_x_WVALID;
input   m_axi_Vec3_float_x_WREADY;
output  [31:0] m_axi_Vec3_float_x_WDATA;
output  [3:0] m_axi_Vec3_float_x_WSTRB;
output   m_axi_Vec3_float_x_WLAST;
output  [0:0] m_axi_Vec3_float_x_WID;
output  [0:0] m_axi_Vec3_float_x_WUSER;
output   m_axi_Vec3_float_x_ARVALID;
input   m_axi_Vec3_float_x_ARREADY;
output  [31:0] m_axi_Vec3_float_x_ARADDR;
output  [0:0] m_axi_Vec3_float_x_ARID;
output  [31:0] m_axi_Vec3_float_x_ARLEN;
output  [2:0] m_axi_Vec3_float_x_ARSIZE;
output  [1:0] m_axi_Vec3_float_x_ARBURST;
output  [1:0] m_axi_Vec3_float_x_ARLOCK;
output  [3:0] m_axi_Vec3_float_x_ARCACHE;
output  [2:0] m_axi_Vec3_float_x_ARPROT;
output  [3:0] m_axi_Vec3_float_x_ARQOS;
output  [3:0] m_axi_Vec3_float_x_ARREGION;
output  [0:0] m_axi_Vec3_float_x_ARUSER;
input   m_axi_Vec3_float_x_RVALID;
output   m_axi_Vec3_float_x_RREADY;
input  [31:0] m_axi_Vec3_float_x_RDATA;
input   m_axi_Vec3_float_x_RLAST;
input  [0:0] m_axi_Vec3_float_x_RID;
input  [0:0] m_axi_Vec3_float_x_RUSER;
input  [1:0] m_axi_Vec3_float_x_RRESP;
input   m_axi_Vec3_float_x_BVALID;
output   m_axi_Vec3_float_x_BREADY;
input  [1:0] m_axi_Vec3_float_x_BRESP;
input  [0:0] m_axi_Vec3_float_x_BID;
input  [0:0] m_axi_Vec3_float_x_BUSER;
input  [29:0] Vec3_float_x_offset;
input  [29:0] Vec3_float_y_offset;
input  [29:0] Vec3_float_z_offset;
output   m_axi_v_x_AWVALID;
input   m_axi_v_x_AWREADY;
output  [31:0] m_axi_v_x_AWADDR;
output  [0:0] m_axi_v_x_AWID;
output  [31:0] m_axi_v_x_AWLEN;
output  [2:0] m_axi_v_x_AWSIZE;
output  [1:0] m_axi_v_x_AWBURST;
output  [1:0] m_axi_v_x_AWLOCK;
output  [3:0] m_axi_v_x_AWCACHE;
output  [2:0] m_axi_v_x_AWPROT;
output  [3:0] m_axi_v_x_AWQOS;
output  [3:0] m_axi_v_x_AWREGION;
output  [0:0] m_axi_v_x_AWUSER;
output   m_axi_v_x_WVALID;
input   m_axi_v_x_WREADY;
output  [31:0] m_axi_v_x_WDATA;
output  [3:0] m_axi_v_x_WSTRB;
output   m_axi_v_x_WLAST;
output  [0:0] m_axi_v_x_WID;
output  [0:0] m_axi_v_x_WUSER;
output   m_axi_v_x_ARVALID;
input   m_axi_v_x_ARREADY;
output  [31:0] m_axi_v_x_ARADDR;
output  [0:0] m_axi_v_x_ARID;
output  [31:0] m_axi_v_x_ARLEN;
output  [2:0] m_axi_v_x_ARSIZE;
output  [1:0] m_axi_v_x_ARBURST;
output  [1:0] m_axi_v_x_ARLOCK;
output  [3:0] m_axi_v_x_ARCACHE;
output  [2:0] m_axi_v_x_ARPROT;
output  [3:0] m_axi_v_x_ARQOS;
output  [3:0] m_axi_v_x_ARREGION;
output  [0:0] m_axi_v_x_ARUSER;
input   m_axi_v_x_RVALID;
output   m_axi_v_x_RREADY;
input  [31:0] m_axi_v_x_RDATA;
input   m_axi_v_x_RLAST;
input  [0:0] m_axi_v_x_RID;
input  [0:0] m_axi_v_x_RUSER;
input  [1:0] m_axi_v_x_RRESP;
input   m_axi_v_x_BVALID;
output   m_axi_v_x_BREADY;
input  [1:0] m_axi_v_x_BRESP;
input  [0:0] m_axi_v_x_BID;
input  [0:0] m_axi_v_x_BUSER;
input  [29:0] v_x_offset;
input  [29:0] v_y_offset;
input  [29:0] v_z_offset;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;
output  [31:0] ap_return_2;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_Vec3_float_x_ARVALID;
reg[31:0] m_axi_Vec3_float_x_ARADDR;
reg m_axi_Vec3_float_x_RREADY;
reg m_axi_v_x_ARVALID;
reg[31:0] m_axi_v_x_ARADDR;
reg m_axi_v_x_RREADY;
reg[31:0] ap_return_0;
reg[31:0] ap_return_1;
reg[31:0] ap_return_2;

(* fsm_encoding = "none" *) reg   [14:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    Vec3_float_x_blk_n_AR;
wire    ap_CS_fsm_state3;
reg    Vec3_float_x_blk_n_R;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state8;
reg    v_x_blk_n_AR;
reg    v_x_blk_n_R;
reg    ap_block_state1_io;
reg    ap_block_state2_io;
reg    ap_block_state3_io;
reg   [31:0] Vec3_x_addr_7_read_reg_272;
reg    ap_block_state8;
reg   [31:0] v_x_addr_2_read_reg_277;
reg   [31:0] Vec3_x_addr_6_read_reg_282;
reg    ap_block_state9;
reg   [31:0] v_x_addr_1_read_reg_287;
reg   [31:0] Vec3_x_addr_read_reg_292;
reg    ap_block_state10;
reg   [31:0] v_x_addr_read_reg_297;
wire   [31:0] grp_fu_150_p2;
reg   [31:0] xx_assign_reg_302;
wire    ap_CS_fsm_state13;
reg   [31:0] yy_assign_reg_307;
wire    ap_CS_fsm_state14;
wire   [63:0] zext_ln87_7_fu_154_p1;
wire   [63:0] zext_ln87_10_fu_165_p1;
wire   [63:0] zext_ln87_6_fu_176_p1;
wire   [63:0] zext_ln87_9_fu_187_p1;
wire   [63:0] zext_ln87_fu_198_p1;
wire   [63:0] zext_ln87_8_fu_209_p1;
reg   [31:0] grp_fu_150_p0;
reg   [31:0] grp_fu_150_p1;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state15;
reg    grp_fu_150_ce;
wire    ap_CS_fsm_state12;
reg   [31:0] ap_return_0_preg;
reg   [31:0] ap_return_1_preg;
reg   [31:0] ap_return_2_preg;
reg   [14:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 15'd1;
#0 ap_return_0_preg = 32'd0;
#0 ap_return_1_preg = 32'd0;
#0 ap_return_2_preg = 32'd0;
end

rayTI_fsub_32ns_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
rayTI_fsub_32ns_3bkb_U27(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_150_p0),
    .din1(grp_fu_150_p1),
    .ce(grp_fu_150_ce),
    .dout(grp_fu_150_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state15)) begin
            ap_return_0_preg <= xx_assign_reg_302;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state15)) begin
            ap_return_1_preg <= yy_assign_reg_307;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state15)) begin
            ap_return_2_preg <= grp_fu_150_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axi_Vec3_float_x_RVALID == 1'b0) | (m_axi_v_x_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state9))) begin
        Vec3_x_addr_6_read_reg_282 <= m_axi_Vec3_float_x_RDATA;
        v_x_addr_1_read_reg_287 <= m_axi_v_x_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axi_Vec3_float_x_RVALID == 1'b0) | (m_axi_v_x_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state8))) begin
        Vec3_x_addr_7_read_reg_272 <= m_axi_Vec3_float_x_RDATA;
        v_x_addr_2_read_reg_277 <= m_axi_v_x_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axi_Vec3_float_x_RVALID == 1'b0) | (m_axi_v_x_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state10))) begin
        Vec3_x_addr_read_reg_292 <= m_axi_Vec3_float_x_RDATA;
        v_x_addr_read_reg_297 <= m_axi_v_x_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        xx_assign_reg_302 <= grp_fu_150_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        yy_assign_reg_307 <= grp_fu_150_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        Vec3_float_x_blk_n_AR = m_axi_Vec3_float_x_ARREADY;
    end else begin
        Vec3_float_x_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state10))) begin
        Vec3_float_x_blk_n_R = m_axi_Vec3_float_x_RVALID;
    end else begin
        Vec3_float_x_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        ap_return_0 = xx_assign_reg_302;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        ap_return_1 = yy_assign_reg_307;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        ap_return_2 = grp_fu_150_p2;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (~((m_axi_Vec3_float_x_RVALID == 1'b0) | (m_axi_v_x_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state9)) | (~((m_axi_Vec3_float_x_RVALID == 1'b0) | (m_axi_v_x_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state10)))) begin
        grp_fu_150_ce = 1'b1;
    end else begin
        grp_fu_150_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_150_p0 = Vec3_x_addr_read_reg_292;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_150_p0 = Vec3_x_addr_6_read_reg_282;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_150_p0 = Vec3_x_addr_7_read_reg_272;
    end else begin
        grp_fu_150_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_150_p1 = v_x_addr_read_reg_297;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_150_p1 = v_x_addr_1_read_reg_287;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_150_p1 = v_x_addr_2_read_reg_277;
    end else begin
        grp_fu_150_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state3_io) & (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_Vec3_float_x_ARADDR = zext_ln87_8_fu_209_p1;
    end else if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_Vec3_float_x_ARADDR = zext_ln87_9_fu_187_p1;
    end else if ((~((ap_start == 1'b0) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_Vec3_float_x_ARADDR = zext_ln87_10_fu_165_p1;
    end else begin
        m_axi_Vec3_float_x_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1)) | ((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2)) | ((1'b0 == ap_block_state3_io) & (1'b1 == ap_CS_fsm_state3)))) begin
        m_axi_Vec3_float_x_ARVALID = 1'b1;
    end else begin
        m_axi_Vec3_float_x_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((~((m_axi_Vec3_float_x_RVALID == 1'b0) | (m_axi_v_x_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state8)) | (~((m_axi_Vec3_float_x_RVALID == 1'b0) | (m_axi_v_x_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state9)) | (~((m_axi_Vec3_float_x_RVALID == 1'b0) | (m_axi_v_x_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state10)))) begin
        m_axi_Vec3_float_x_RREADY = 1'b1;
    end else begin
        m_axi_Vec3_float_x_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state3_io) & (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_v_x_ARADDR = zext_ln87_fu_198_p1;
    end else if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_v_x_ARADDR = zext_ln87_6_fu_176_p1;
    end else if ((~((ap_start == 1'b0) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_v_x_ARADDR = zext_ln87_7_fu_154_p1;
    end else begin
        m_axi_v_x_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1)) | ((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2)) | ((1'b0 == ap_block_state3_io) & (1'b1 == ap_CS_fsm_state3)))) begin
        m_axi_v_x_ARVALID = 1'b1;
    end else begin
        m_axi_v_x_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((~((m_axi_Vec3_float_x_RVALID == 1'b0) | (m_axi_v_x_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state8)) | (~((m_axi_Vec3_float_x_RVALID == 1'b0) | (m_axi_v_x_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state9)) | (~((m_axi_Vec3_float_x_RVALID == 1'b0) | (m_axi_v_x_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state10)))) begin
        m_axi_v_x_RREADY = 1'b1;
    end else begin
        m_axi_v_x_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        v_x_blk_n_AR = m_axi_v_x_ARREADY;
    end else begin
        v_x_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state10))) begin
        v_x_blk_n_R = m_axi_v_x_RVALID;
    end else begin
        v_x_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b0 == ap_block_state3_io) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if ((~((m_axi_Vec3_float_x_RVALID == 1'b0) | (m_axi_v_x_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if ((~((m_axi_Vec3_float_x_RVALID == 1'b0) | (m_axi_v_x_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if ((~((m_axi_Vec3_float_x_RVALID == 1'b0) | (m_axi_v_x_RVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state10 = ((m_axi_Vec3_float_x_RVALID == 1'b0) | (m_axi_v_x_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state1_io = ((m_axi_Vec3_float_x_ARREADY == 1'b0) | (m_axi_v_x_ARREADY == 1'b0));
end

always @ (*) begin
    ap_block_state2_io = ((m_axi_Vec3_float_x_ARREADY == 1'b0) | (m_axi_v_x_ARREADY == 1'b0));
end

always @ (*) begin
    ap_block_state3_io = ((m_axi_Vec3_float_x_ARREADY == 1'b0) | (m_axi_v_x_ARREADY == 1'b0));
end

always @ (*) begin
    ap_block_state8 = ((m_axi_Vec3_float_x_RVALID == 1'b0) | (m_axi_v_x_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state9 = ((m_axi_Vec3_float_x_RVALID == 1'b0) | (m_axi_v_x_RVALID == 1'b0));
end

assign m_axi_Vec3_float_x_ARBURST = 2'd0;

assign m_axi_Vec3_float_x_ARCACHE = 4'd0;

assign m_axi_Vec3_float_x_ARID = 1'd0;

assign m_axi_Vec3_float_x_ARLEN = 32'd1;

assign m_axi_Vec3_float_x_ARLOCK = 2'd0;

assign m_axi_Vec3_float_x_ARPROT = 3'd0;

assign m_axi_Vec3_float_x_ARQOS = 4'd0;

assign m_axi_Vec3_float_x_ARREGION = 4'd0;

assign m_axi_Vec3_float_x_ARSIZE = 3'd0;

assign m_axi_Vec3_float_x_ARUSER = 1'd0;

assign m_axi_Vec3_float_x_AWADDR = 32'd0;

assign m_axi_Vec3_float_x_AWBURST = 2'd0;

assign m_axi_Vec3_float_x_AWCACHE = 4'd0;

assign m_axi_Vec3_float_x_AWID = 1'd0;

assign m_axi_Vec3_float_x_AWLEN = 32'd0;

assign m_axi_Vec3_float_x_AWLOCK = 2'd0;

assign m_axi_Vec3_float_x_AWPROT = 3'd0;

assign m_axi_Vec3_float_x_AWQOS = 4'd0;

assign m_axi_Vec3_float_x_AWREGION = 4'd0;

assign m_axi_Vec3_float_x_AWSIZE = 3'd0;

assign m_axi_Vec3_float_x_AWUSER = 1'd0;

assign m_axi_Vec3_float_x_AWVALID = 1'b0;

assign m_axi_Vec3_float_x_BREADY = 1'b0;

assign m_axi_Vec3_float_x_WDATA = 32'd0;

assign m_axi_Vec3_float_x_WID = 1'd0;

assign m_axi_Vec3_float_x_WLAST = 1'b0;

assign m_axi_Vec3_float_x_WSTRB = 4'd0;

assign m_axi_Vec3_float_x_WUSER = 1'd0;

assign m_axi_Vec3_float_x_WVALID = 1'b0;

assign m_axi_v_x_ARBURST = 2'd0;

assign m_axi_v_x_ARCACHE = 4'd0;

assign m_axi_v_x_ARID = 1'd0;

assign m_axi_v_x_ARLEN = 32'd1;

assign m_axi_v_x_ARLOCK = 2'd0;

assign m_axi_v_x_ARPROT = 3'd0;

assign m_axi_v_x_ARQOS = 4'd0;

assign m_axi_v_x_ARREGION = 4'd0;

assign m_axi_v_x_ARSIZE = 3'd0;

assign m_axi_v_x_ARUSER = 1'd0;

assign m_axi_v_x_AWADDR = 32'd0;

assign m_axi_v_x_AWBURST = 2'd0;

assign m_axi_v_x_AWCACHE = 4'd0;

assign m_axi_v_x_AWID = 1'd0;

assign m_axi_v_x_AWLEN = 32'd0;

assign m_axi_v_x_AWLOCK = 2'd0;

assign m_axi_v_x_AWPROT = 3'd0;

assign m_axi_v_x_AWQOS = 4'd0;

assign m_axi_v_x_AWREGION = 4'd0;

assign m_axi_v_x_AWSIZE = 3'd0;

assign m_axi_v_x_AWUSER = 1'd0;

assign m_axi_v_x_AWVALID = 1'b0;

assign m_axi_v_x_BREADY = 1'b0;

assign m_axi_v_x_WDATA = 32'd0;

assign m_axi_v_x_WID = 1'd0;

assign m_axi_v_x_WLAST = 1'b0;

assign m_axi_v_x_WSTRB = 4'd0;

assign m_axi_v_x_WUSER = 1'd0;

assign m_axi_v_x_WVALID = 1'b0;

assign zext_ln87_10_fu_165_p1 = Vec3_float_x_offset;

assign zext_ln87_6_fu_176_p1 = v_y_offset;

assign zext_ln87_7_fu_154_p1 = v_x_offset;

assign zext_ln87_8_fu_209_p1 = Vec3_float_z_offset;

assign zext_ln87_9_fu_187_p1 = Vec3_float_y_offset;

assign zext_ln87_fu_198_p1 = v_z_offset;

endmodule //operator_sub
