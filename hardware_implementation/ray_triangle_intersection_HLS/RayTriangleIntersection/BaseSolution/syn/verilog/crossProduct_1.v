// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module crossProduct_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_Vec3_float_x_AWVALID,
        m_axi_Vec3_float_x_AWREADY,
        m_axi_Vec3_float_x_AWADDR,
        m_axi_Vec3_float_x_AWID,
        m_axi_Vec3_float_x_AWLEN,
        m_axi_Vec3_float_x_AWSIZE,
        m_axi_Vec3_float_x_AWBURST,
        m_axi_Vec3_float_x_AWLOCK,
        m_axi_Vec3_float_x_AWCACHE,
        m_axi_Vec3_float_x_AWPROT,
        m_axi_Vec3_float_x_AWQOS,
        m_axi_Vec3_float_x_AWREGION,
        m_axi_Vec3_float_x_AWUSER,
        m_axi_Vec3_float_x_WVALID,
        m_axi_Vec3_float_x_WREADY,
        m_axi_Vec3_float_x_WDATA,
        m_axi_Vec3_float_x_WSTRB,
        m_axi_Vec3_float_x_WLAST,
        m_axi_Vec3_float_x_WID,
        m_axi_Vec3_float_x_WUSER,
        m_axi_Vec3_float_x_ARVALID,
        m_axi_Vec3_float_x_ARREADY,
        m_axi_Vec3_float_x_ARADDR,
        m_axi_Vec3_float_x_ARID,
        m_axi_Vec3_float_x_ARLEN,
        m_axi_Vec3_float_x_ARSIZE,
        m_axi_Vec3_float_x_ARBURST,
        m_axi_Vec3_float_x_ARLOCK,
        m_axi_Vec3_float_x_ARCACHE,
        m_axi_Vec3_float_x_ARPROT,
        m_axi_Vec3_float_x_ARQOS,
        m_axi_Vec3_float_x_ARREGION,
        m_axi_Vec3_float_x_ARUSER,
        m_axi_Vec3_float_x_RVALID,
        m_axi_Vec3_float_x_RREADY,
        m_axi_Vec3_float_x_RDATA,
        m_axi_Vec3_float_x_RLAST,
        m_axi_Vec3_float_x_RID,
        m_axi_Vec3_float_x_RUSER,
        m_axi_Vec3_float_x_RRESP,
        m_axi_Vec3_float_x_BVALID,
        m_axi_Vec3_float_x_BREADY,
        m_axi_Vec3_float_x_BRESP,
        m_axi_Vec3_float_x_BID,
        m_axi_Vec3_float_x_BUSER,
        Vec3_float_x_offset,
        Vec3_float_y_offset,
        Vec3_float_z_offset,
        v_x_read,
        v_y_read,
        v_z_read,
        ap_return_0,
        ap_return_1,
        ap_return_2
);

parameter    ap_ST_fsm_state1 = 19'd1;
parameter    ap_ST_fsm_state2 = 19'd2;
parameter    ap_ST_fsm_state3 = 19'd4;
parameter    ap_ST_fsm_state4 = 19'd8;
parameter    ap_ST_fsm_state5 = 19'd16;
parameter    ap_ST_fsm_state6 = 19'd32;
parameter    ap_ST_fsm_state7 = 19'd64;
parameter    ap_ST_fsm_state8 = 19'd128;
parameter    ap_ST_fsm_state9 = 19'd256;
parameter    ap_ST_fsm_state10 = 19'd512;
parameter    ap_ST_fsm_state11 = 19'd1024;
parameter    ap_ST_fsm_state12 = 19'd2048;
parameter    ap_ST_fsm_state13 = 19'd4096;
parameter    ap_ST_fsm_state14 = 19'd8192;
parameter    ap_ST_fsm_state15 = 19'd16384;
parameter    ap_ST_fsm_state16 = 19'd32768;
parameter    ap_ST_fsm_state17 = 19'd65536;
parameter    ap_ST_fsm_state18 = 19'd131072;
parameter    ap_ST_fsm_state19 = 19'd262144;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_Vec3_float_x_AWVALID;
input   m_axi_Vec3_float_x_AWREADY;
output  [31:0] m_axi_Vec3_float_x_AWADDR;
output  [0:0] m_axi_Vec3_float_x_AWID;
output  [31:0] m_axi_Vec3_float_x_AWLEN;
output  [2:0] m_axi_Vec3_float_x_AWSIZE;
output  [1:0] m_axi_Vec3_float_x_AWBURST;
output  [1:0] m_axi_Vec3_float_x_AWLOCK;
output  [3:0] m_axi_Vec3_float_x_AWCACHE;
output  [2:0] m_axi_Vec3_float_x_AWPROT;
output  [3:0] m_axi_Vec3_float_x_AWQOS;
output  [3:0] m_axi_Vec3_float_x_AWREGION;
output  [0:0] m_axi_Vec3_float_x_AWUSER;
output   m_axi_Vec3_float_x_WVALID;
input   m_axi_Vec3_float_x_WREADY;
output  [31:0] m_axi_Vec3_float_x_WDATA;
output  [3:0] m_axi_Vec3_float_x_WSTRB;
output   m_axi_Vec3_float_x_WLAST;
output  [0:0] m_axi_Vec3_float_x_WID;
output  [0:0] m_axi_Vec3_float_x_WUSER;
output   m_axi_Vec3_float_x_ARVALID;
input   m_axi_Vec3_float_x_ARREADY;
output  [31:0] m_axi_Vec3_float_x_ARADDR;
output  [0:0] m_axi_Vec3_float_x_ARID;
output  [31:0] m_axi_Vec3_float_x_ARLEN;
output  [2:0] m_axi_Vec3_float_x_ARSIZE;
output  [1:0] m_axi_Vec3_float_x_ARBURST;
output  [1:0] m_axi_Vec3_float_x_ARLOCK;
output  [3:0] m_axi_Vec3_float_x_ARCACHE;
output  [2:0] m_axi_Vec3_float_x_ARPROT;
output  [3:0] m_axi_Vec3_float_x_ARQOS;
output  [3:0] m_axi_Vec3_float_x_ARREGION;
output  [0:0] m_axi_Vec3_float_x_ARUSER;
input   m_axi_Vec3_float_x_RVALID;
output   m_axi_Vec3_float_x_RREADY;
input  [31:0] m_axi_Vec3_float_x_RDATA;
input   m_axi_Vec3_float_x_RLAST;
input  [0:0] m_axi_Vec3_float_x_RID;
input  [0:0] m_axi_Vec3_float_x_RUSER;
input  [1:0] m_axi_Vec3_float_x_RRESP;
input   m_axi_Vec3_float_x_BVALID;
output   m_axi_Vec3_float_x_BREADY;
input  [1:0] m_axi_Vec3_float_x_BRESP;
input  [0:0] m_axi_Vec3_float_x_BID;
input  [0:0] m_axi_Vec3_float_x_BUSER;
input  [29:0] Vec3_float_x_offset;
input  [29:0] Vec3_float_y_offset;
input  [29:0] Vec3_float_z_offset;
input  [31:0] v_x_read;
input  [31:0] v_y_read;
input  [31:0] v_z_read;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;
output  [31:0] ap_return_2;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_Vec3_float_x_ARVALID;
reg[31:0] m_axi_Vec3_float_x_ARADDR;
reg m_axi_Vec3_float_x_RREADY;
reg[31:0] ap_return_0;
reg[31:0] ap_return_1;
reg[31:0] ap_return_2;

(* fsm_encoding = "none" *) reg   [18:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    Vec3_float_x_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    Vec3_float_x_blk_n_R;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state10;
reg   [31:0] Vec3_x_addr_10_read_reg_225;
reg   [31:0] Vec3_x_addr_read_reg_231;
reg   [31:0] Vec3_x_addr_11_read_reg_237;
wire    ap_CS_fsm_state11;
wire   [31:0] grp_fu_126_p2;
reg   [31:0] tmp_reg_261;
wire    ap_CS_fsm_state14;
wire   [31:0] grp_fu_131_p2;
reg   [31:0] tmp_14_reg_266;
wire   [31:0] grp_fu_136_p2;
reg   [31:0] tmp_s_reg_271;
wire   [31:0] grp_fu_141_p2;
reg   [31:0] tmp_15_reg_276;
wire   [31:0] grp_fu_146_p2;
reg   [31:0] tmp_16_reg_281;
wire   [31:0] grp_fu_151_p2;
reg   [31:0] tmp_17_reg_286;
wire   [63:0] zext_ln107_1_fu_156_p1;
wire   [63:0] zext_ln107_fu_167_p1;
wire   [63:0] zext_ln107_2_fu_178_p1;
wire    ap_CS_fsm_state15;
wire   [31:0] grp_fu_114_p2;
wire    ap_CS_fsm_state19;
wire   [31:0] grp_fu_118_p2;
wire   [31:0] grp_fu_122_p2;
reg   [31:0] ap_return_0_preg;
reg   [31:0] ap_return_1_preg;
reg   [31:0] ap_return_2_preg;
reg   [18:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 19'd1;
#0 ap_return_0_preg = 32'd0;
#0 ap_return_1_preg = 32'd0;
#0 ap_return_2_preg = 32'd0;
end

rayTI_fsub_32ns_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
rayTI_fsub_32ns_3bkb_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_reg_261),
    .din1(tmp_14_reg_266),
    .ce(1'b1),
    .dout(grp_fu_114_p2)
);

rayTI_fsub_32ns_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
rayTI_fsub_32ns_3bkb_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_s_reg_271),
    .din1(tmp_15_reg_276),
    .ce(1'b1),
    .dout(grp_fu_118_p2)
);

rayTI_fsub_32ns_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
rayTI_fsub_32ns_3bkb_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_16_reg_281),
    .din1(tmp_17_reg_286),
    .ce(1'b1),
    .dout(grp_fu_122_p2)
);

rayTI_fmul_32ns_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
rayTI_fmul_32ns_3cud_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(Vec3_x_addr_10_read_reg_225),
    .din1(v_z_read),
    .ce(1'b1),
    .dout(grp_fu_126_p2)
);

rayTI_fmul_32ns_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
rayTI_fmul_32ns_3cud_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(Vec3_x_addr_read_reg_231),
    .din1(v_y_read),
    .ce(1'b1),
    .dout(grp_fu_131_p2)
);

rayTI_fmul_32ns_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
rayTI_fmul_32ns_3cud_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(Vec3_x_addr_read_reg_231),
    .din1(v_x_read),
    .ce(1'b1),
    .dout(grp_fu_136_p2)
);

rayTI_fmul_32ns_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
rayTI_fmul_32ns_3cud_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(Vec3_x_addr_11_read_reg_237),
    .din1(v_z_read),
    .ce(1'b1),
    .dout(grp_fu_141_p2)
);

rayTI_fmul_32ns_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
rayTI_fmul_32ns_3cud_U17(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(Vec3_x_addr_11_read_reg_237),
    .din1(v_y_read),
    .ce(1'b1),
    .dout(grp_fu_146_p2)
);

rayTI_fmul_32ns_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
rayTI_fmul_32ns_3cud_U18(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(Vec3_x_addr_10_read_reg_225),
    .din1(v_x_read),
    .ce(1'b1),
    .dout(grp_fu_151_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state19)) begin
            ap_return_0_preg <= grp_fu_114_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state19)) begin
            ap_return_1_preg <= grp_fu_118_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state19)) begin
            ap_return_2_preg <= grp_fu_122_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_Vec3_float_x_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        Vec3_x_addr_10_read_reg_225 <= m_axi_Vec3_float_x_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_Vec3_float_x_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        Vec3_x_addr_11_read_reg_237 <= m_axi_Vec3_float_x_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_Vec3_float_x_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        Vec3_x_addr_read_reg_231 <= m_axi_Vec3_float_x_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        tmp_14_reg_266 <= grp_fu_131_p2;
        tmp_15_reg_276 <= grp_fu_141_p2;
        tmp_16_reg_281 <= grp_fu_146_p2;
        tmp_17_reg_286 <= grp_fu_151_p2;
        tmp_reg_261 <= grp_fu_126_p2;
        tmp_s_reg_271 <= grp_fu_136_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        Vec3_float_x_blk_n_AR = m_axi_Vec3_float_x_ARREADY;
    end else begin
        Vec3_float_x_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9))) begin
        Vec3_float_x_blk_n_R = m_axi_Vec3_float_x_RVALID;
    end else begin
        Vec3_float_x_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        ap_return_0 = grp_fu_114_p2;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        ap_return_1 = grp_fu_118_p2;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        ap_return_2 = grp_fu_122_p2;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if (((m_axi_Vec3_float_x_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_Vec3_float_x_ARADDR = zext_ln107_2_fu_178_p1;
    end else if (((m_axi_Vec3_float_x_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_Vec3_float_x_ARADDR = zext_ln107_fu_167_p1;
    end else if ((~((m_axi_Vec3_float_x_ARREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_Vec3_float_x_ARADDR = zext_ln107_1_fu_156_p1;
    end else begin
        m_axi_Vec3_float_x_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((~((m_axi_Vec3_float_x_ARREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((m_axi_Vec3_float_x_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | ((m_axi_Vec3_float_x_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        m_axi_Vec3_float_x_ARVALID = 1'b1;
    end else begin
        m_axi_Vec3_float_x_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((m_axi_Vec3_float_x_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((m_axi_Vec3_float_x_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((m_axi_Vec3_float_x_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9)))) begin
        m_axi_Vec3_float_x_RREADY = 1'b1;
    end else begin
        m_axi_Vec3_float_x_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((m_axi_Vec3_float_x_ARREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((m_axi_Vec3_float_x_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((m_axi_Vec3_float_x_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((m_axi_Vec3_float_x_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((m_axi_Vec3_float_x_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((m_axi_Vec3_float_x_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign m_axi_Vec3_float_x_ARBURST = 2'd0;

assign m_axi_Vec3_float_x_ARCACHE = 4'd0;

assign m_axi_Vec3_float_x_ARID = 1'd0;

assign m_axi_Vec3_float_x_ARLEN = 32'd1;

assign m_axi_Vec3_float_x_ARLOCK = 2'd0;

assign m_axi_Vec3_float_x_ARPROT = 3'd0;

assign m_axi_Vec3_float_x_ARQOS = 4'd0;

assign m_axi_Vec3_float_x_ARREGION = 4'd0;

assign m_axi_Vec3_float_x_ARSIZE = 3'd0;

assign m_axi_Vec3_float_x_ARUSER = 1'd0;

assign m_axi_Vec3_float_x_AWADDR = 32'd0;

assign m_axi_Vec3_float_x_AWBURST = 2'd0;

assign m_axi_Vec3_float_x_AWCACHE = 4'd0;

assign m_axi_Vec3_float_x_AWID = 1'd0;

assign m_axi_Vec3_float_x_AWLEN = 32'd0;

assign m_axi_Vec3_float_x_AWLOCK = 2'd0;

assign m_axi_Vec3_float_x_AWPROT = 3'd0;

assign m_axi_Vec3_float_x_AWQOS = 4'd0;

assign m_axi_Vec3_float_x_AWREGION = 4'd0;

assign m_axi_Vec3_float_x_AWSIZE = 3'd0;

assign m_axi_Vec3_float_x_AWUSER = 1'd0;

assign m_axi_Vec3_float_x_AWVALID = 1'b0;

assign m_axi_Vec3_float_x_BREADY = 1'b0;

assign m_axi_Vec3_float_x_WDATA = 32'd0;

assign m_axi_Vec3_float_x_WID = 1'd0;

assign m_axi_Vec3_float_x_WLAST = 1'b0;

assign m_axi_Vec3_float_x_WSTRB = 4'd0;

assign m_axi_Vec3_float_x_WUSER = 1'd0;

assign m_axi_Vec3_float_x_WVALID = 1'b0;

assign zext_ln107_1_fu_156_p1 = Vec3_float_y_offset;

assign zext_ln107_2_fu_178_p1 = Vec3_float_x_offset;

assign zext_ln107_fu_167_p1 = Vec3_float_z_offset;

endmodule //crossProduct_1
